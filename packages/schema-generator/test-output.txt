[0m[32mTask[0m [0m[36mtest[0m deno test --allow-read --allow-write --allow-run --allow-env=API_URL,"TSC_*",NODE_INSPECTOR_IPC,VSCODE_INSPECTOR_OPTIONS,NODE_ENV,UPDATE_GOLDENS test/**/*.test.ts
[0m[33mWarning[0m experimentalDecorators compiler option is deprecated and may be removed at any time
[0m[38;5;245mrunning 1 test from ./test/schema/array-special-types.test.ts[0m
Schema: Array special types ...
  should use items: true for any[] arrays ...
[0m[38;5;245m------- output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=AnyArray
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=AnyArray
[0m[38;5;245m----- output end -----[0m
  should use items: true for any[] arrays ... [0m[32mok[0m [0m[38;5;245m(55ms)[0m
  should use items: true for Array<any> ...
[0m[38;5;245m------- output -------[0m
[WRAPPER-CHECK] typeNodeName="Array", isWrapperContext=false, type=AnyArray
[CT-FORMATTER supportsType] nodeName="Array", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=AnyArray
[0m[38;5;245m----- output end -----[0m
  should use items: true for Array<any> ... [0m[32mok[0m [0m[38;5;245m(23ms)[0m
  should use items: false for never[] arrays ...
[0m[38;5;245m------- output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=NeverArray
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=NeverArray
[0m[38;5;245m----- output end -----[0m
  should use items: false for never[] arrays ... [0m[32mok[0m [0m[38;5;245m(19ms)[0m
  should use items: false for Array<never> ...
[0m[38;5;245m------- output -------[0m
[WRAPPER-CHECK] typeNodeName="Array", isWrapperContext=false, type=NeverArray
[CT-FORMATTER supportsType] nodeName="Array", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=NeverArray
[0m[38;5;245m----- output end -----[0m
  should use items: false for Array<never> ... [0m[32mok[0m [0m[38;5;245m(22ms)[0m
  should use items: true for unknown[] arrays ...
[0m[38;5;245m------- output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=UnknownArray
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=UnknownArray
[0m[38;5;245m----- output end -----[0m
  should use items: true for unknown[] arrays ... [0m[32mok[0m [0m[38;5;245m(16ms)[0m
  should use items: true for Array<unknown> ...
[0m[38;5;245m------- output -------[0m
[WRAPPER-CHECK] typeNodeName="Array", isWrapperContext=false, type=UnknownArray
[CT-FORMATTER supportsType] nodeName="Array", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=UnknownArray
[0m[38;5;245m----- output end -----[0m
  should use items: true for Array<unknown> ... [0m[32mok[0m [0m[38;5;245m(15ms)[0m
  should generate normal schemas for regular array types ...
[0m[38;5;245m------- output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=StringArray
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=StringArray
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- output end -----[0m
  should generate normal schemas for regular array types ... [0m[32mok[0m [0m[38;5;245m(18ms)[0m
Schema: Array special types ... [0m[32mok[0m [0m[38;5;245m(170ms)[0m
[0m[38;5;245mrunning 1 test from ./test/schema/arrays-optional.test.ts[0m
Schema: Arrays and optional properties ...
  marks optional array property as not required ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=X
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=X
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
  marks optional array property as not required ... [0m[32mok[0m [0m[38;5;245m(55ms)[0m
  supports Array<T> and T[] equally ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=A
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=A
[WRAPPER-CHECK] typeNodeName="Array", isWrapperContext=false, type=string[]
[CT-FORMATTER supportsType] nodeName="Array", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=B
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=B
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  supports Array<T> and T[] equally ... [0m[32mok[0m [0m[38;5;245m(41ms)[0m
Schema: Arrays and optional properties ... [0m[32mok[0m [0m[38;5;245m(97ms)[0m
[0m[38;5;245mrunning 1 test from ./test/schema/boolean-literals.test.ts[0m
Schema: Boolean literals ...
  should preserve boolean literal values in enum ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=BooleanLiterals
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=BooleanLiterals
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=true
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=false
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=boolean
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=boolean
[0m[38;5;245m----- post-test output end -----[0m
  should preserve boolean literal values in enum ... [0m[32mok[0m [0m[38;5;245m(53ms)[0m
  should handle boolean literal types directly ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=true
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=false
[0m[38;5;245m----- post-test output end -----[0m
  should handle boolean literal types directly ... [0m[32mok[0m [0m[38;5;245m(40ms)[0m
Schema: Boolean literals ... [0m[32mok[0m [0m[38;5;245m(92ms)[0m
[0m[38;5;245mrunning 1 test from ./test/schema/cell-type.test.ts[0m
Schema: Cell types ...
  handles Cell<string> ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=X
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=X
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<string>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<string>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  handles Cell<string> ... [0m[32mok[0m [0m[38;5;245m(55ms)[0m
  handles Cell<Array<{id:string}>> ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=X
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=X
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<{ id: string; }[]>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<{ id: string; }[]>
[WRAPPER-CHECK] typeNodeName="Array", isWrapperContext=false, type={ id: string; }[]
[CT-FORMATTER supportsType] nodeName="Array", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ id: string; }[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ id: string; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ id: string; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  handles Cell<Array<{id:string}>> ... [0m[32mok[0m [0m[38;5;245m(25ms)[0m
  handles Stream<Cell<number>> ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=X
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=X
[WRAPPER-CHECK] typeNodeName="Stream", isWrapperContext=true, type=Stream<Cell<number>>
[CT-FORMATTER supportsType] nodeName="Stream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=Stream<Cell<number>>
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<number>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<number>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
  handles Stream<Cell<number>> ... [0m[32mok[0m [0m[38;5;245m(20ms)[0m
  disallows Cell<Stream<T>> and suggests boxing ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=X
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=X
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<Stream<number>>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<Stream<number>>
[WRAPPER-CHECK] typeNodeName="Stream", isWrapperContext=true, type=Stream<number>
[CT-FORMATTER supportsType] nodeName="Stream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=Stream<number>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
  disallows Cell<Stream<T>> and suggests boxing ... [0m[32mok[0m [0m[38;5;245m(23ms)[0m
Schema: Cell types ... [0m[32mok[0m [0m[38;5;245m(123ms)[0m
[0m[38;5;245mrunning 1 test from ./test/schema/circular-alias-error.test.ts[0m
Circular alias error handling ...
  should throw descriptive error for circular Default aliases ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="A", isWrapperContext=false, type=any
[0m[38;5;245m----- post-test output end -----[0m
  should throw descriptive error for circular Default aliases ... [0m[32mok[0m [0m[38;5;245m(52ms)[0m
  should handle longer circular chains ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="A", isWrapperContext=false, type=any
[0m[38;5;245m----- post-test output end -----[0m
  should handle longer circular chains ... [0m[32mok[0m [0m[38;5;245m(22ms)[0m
Circular alias error handling ... [0m[32mok[0m [0m[38;5;245m(73ms)[0m
[0m[38;5;245mrunning 1 test from ./test/schema/complex-defaults.test.ts[0m
Schema: Complex defaults ...
  array defaults with items shape ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=WithArrayDefaults
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=WithArrayDefaults
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<TodoItem[], []>
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=TodoItem[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=TodoItem[]
[WRAPPER-CHECK] typeNodeName="TodoItem", isWrapperContext=false, type=TodoItem
[CT-FORMATTER supportsType] nodeName="TodoItem", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=TodoItem
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=boolean
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=boolean
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<string[], ["item1", "item2"]>
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<number[][], [[1, 2], [3, 4]]>
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number[][]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number[][]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
  array defaults with items shape ... [0m[32mok[0m [0m[38;5;245m(59ms)[0m
  object defaults with nested objects ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=WithObjectDefaults
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=WithObjectDefaults
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<{ theme: string; count: number; }, { theme: "dark"; count: 10; }>
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ theme: string; count: number; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ theme: string; count: number; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<{ name: string; settings: { notifications: boolean; email: string; }; }, { name: "Anonymous"; settings: { notifications: true; email: "user@example.com"; }; }>
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ name: string; settings: { notifications: boolean; email: string; }; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ name: string; settings: { notifications: boolean; email: string; }; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ notifications: boolean; email: string; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ notifications: boolean; email: string; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=boolean
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=boolean
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  object defaults with nested objects ... [0m[32mok[0m [0m[38;5;245m(24ms)[0m
  null/undefined defaults in Default<...> ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=WithNullDefaults
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=WithNullDefaults
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<string | null, null>
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string | null
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string | null
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<string | undefined, undefined>
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string | undefined
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string | undefined
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  null/undefined defaults in Default<...> ... [0m[32mok[0m [0m[38;5;245m(23ms)[0m
  boolean schema defaults (any/never with Default) ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=WithBooleanSchemas
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=WithBooleanSchemas
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<any, "defaultValue">
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=any
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=any
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<never, "fallbackValue">
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=never
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=never
[0m[38;5;245m----- post-test output end -----[0m
  boolean schema defaults (any/never with Default) ... [0m[32mok[0m [0m[38;5;245m(22ms)[0m
Schema: Complex defaults ... [0m[32mok[0m [0m[38;5;245m(127ms)[0m
[0m[38;5;245mrunning 1 test from ./test/schema/default-type.test.ts[0m
Schema: Default<T,V> ...
  applies default for primitive value ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=T
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
  applies default for primitive value ... [0m[32mok[0m [0m[38;5;245m(51ms)[0m
  applies default for array values and keeps items shape ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=T
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  applies default for array values and keeps items shape ... [0m[32mok[0m [0m[38;5;245m(21ms)[0m
Schema: Default<T,V> ... [0m[32mok[0m [0m[38;5;245m(72ms)[0m
[0m[38;5;245mrunning 1 test from ./test/schema/defaults-no-def-mutation.test.ts[0m
Schema: Default<T,V> does not mutate shared definitions ...
  two props using same named type with different defaults ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=X
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=X
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<Address, { city: "NY"; }>
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="Address", isWrapperContext=false, type=Address
[CT-FORMATTER supportsType] nodeName="Address", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Address
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<Address, { city: "SF"; }>
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="Address", isWrapperContext=false, type=Address
[0m[38;5;245m----- post-test output end -----[0m
  two props using same named type with different defaults ... [0m[32mok[0m [0m[38;5;245m(56ms)[0m
Schema: Default<T,V> does not mutate shared definitions ... [0m[32mok[0m [0m[38;5;245m(55ms)[0m
[0m[38;5;245mrunning 1 test from ./test/schema/nested-wrappers.test.ts[0m
Schema: Nested wrappers (Cell, Stream, Default) ...
  Default<string, 'hello'> inside object ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=X
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=X
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<string, "hello">
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<number, 42>
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
  Default<string, 'hello'> inside object ... [0m[32mok[0m [0m[38;5;245m(54ms)[0m
  Cell<Default<string,'default'>> ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=X
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=X
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<Default<string, "default">>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<Default<string, "default">>
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<string, "default">
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  Cell<Default<string,'default'>> ... [0m[32mok[0m [0m[38;5;245m(24ms)[0m
  Stream<Default<string,'initial'>> ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=X
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=X
[WRAPPER-CHECK] typeNodeName="Stream", isWrapperContext=true, type=Stream<Default<string, "initial">>
[CT-FORMATTER supportsType] nodeName="Stream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=Stream<Default<string, "initial">>
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<string, "initial">
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  Stream<Default<string,'initial'>> ... [0m[32mok[0m [0m[38;5;245m(20ms)[0m
  Stream<Default<string[], ['a']>> yields array schema with default ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=X
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=X
[WRAPPER-CHECK] typeNodeName="Stream", isWrapperContext=true, type=Stream<Default<string[], ["a"]>>
[CT-FORMATTER supportsType] nodeName="Stream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=Stream<Default<string[], ["a"]>>
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<string[], ["a"]>
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  Stream<Default<string[], ['a']>> yields array schema with default ... [0m[32mok[0m [0m[38;5;245m(26ms)[0m
  array of Cell<string> ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=X
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=X
[WRAPPER-CHECK] typeNodeName="Array", isWrapperContext=false, type=Cell<string>[]
[CT-FORMATTER supportsType] nodeName="Array", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Cell<string>[]
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<string>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<string>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  array of Cell<string> ... [0m[32mok[0m [0m[38;5;245m(19ms)[0m
  Cell<string[]> ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=X
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=X
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<string[]>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<string[]>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  Cell<string[]> ... [0m[32mok[0m [0m[38;5;245m(16ms)[0m
  complex nesting: Cell<Default<string,'d'>> and Default<string[], ['a','b']> ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=X
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=X
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<Default<string, "d">>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<Default<string, "d">>
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<string, "d">
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<string[], ["a", "b"]>
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  complex nesting: Cell<Default<string,'d'>> and Default<string[], ['a','b']> ... [0m[32mok[0m [0m[38;5;245m(18ms)[0m
Schema: Nested wrappers (Cell, Stream, Default) ... [0m[32mok[0m [0m[38;5;245m(177ms)[0m
[0m[38;5;245mrunning 1 test from ./test/schema/recursion-variants.test.ts[0m
Schema: Recursion variants ...
  simple recursive: next?: Node ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=Node
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Node
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="Node", isWrapperContext=false, type=Node
[0m[38;5;245m----- post-test output end -----[0m
  simple recursive: next?: Node ... [0m[32mok[0m [0m[38;5;245m(53ms)[0m
  nested recursive: children?: Node[] ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=Node
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Node
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=Node[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Node[]
[WRAPPER-CHECK] typeNodeName="Node", isWrapperContext=false, type=Node
[0m[38;5;245m----- post-test output end -----[0m
  nested recursive: children?: Node[] ... [0m[32mok[0m [0m[38;5;245m(25ms)[0m
  multi-hop circular A -> B -> C -> A ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=A
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=A
[WRAPPER-CHECK] typeNodeName="B", isWrapperContext=false, type=B
[CT-FORMATTER supportsType] nodeName="B", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=B
[WRAPPER-CHECK] typeNodeName="C", isWrapperContext=false, type=C
[CT-FORMATTER supportsType] nodeName="C", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=C
[WRAPPER-CHECK] typeNodeName="A", isWrapperContext=false, type=A
[0m[38;5;245m----- post-test output end -----[0m
  multi-hop circular A -> B -> C -> A ... [0m[32mok[0m [0m[38;5;245m(19ms)[0m
  mutually recursive A <-> B ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=A
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=A
[WRAPPER-CHECK] typeNodeName="B", isWrapperContext=false, type=B
[CT-FORMATTER supportsType] nodeName="B", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=B
[WRAPPER-CHECK] typeNodeName="A", isWrapperContext=false, type=A
[0m[38;5;245m----- post-test output end -----[0m
  mutually recursive A <-> B ... [0m[32mok[0m [0m[38;5;245m(21ms)[0m
Schema: Recursion variants ... [0m[32mok[0m [0m[38;5;245m(119ms)[0m
[0m[38;5;245mrunning 1 test from ./test/schema/type-aliases-and-shared.test.ts[0m
Schema: Type aliases and shared types ...
  handles basic Cell/Stream/Default aliases ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=TypeAliasTest
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=TypeAliasTest
[WRAPPER-CHECK] typeNodeName="MyCell", isWrapperContext=false, type=MyCell<string>
[CT-FORMATTER supportsType] nodeName="MyCell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=MyCell<string>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="StringCell", isWrapperContext=false, type=StringCell
[CT-FORMATTER supportsType] nodeName="StringCell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=StringCell
[WRAPPER-CHECK] typeNodeName="StringCell", isWrapperContext=false, type=string
[CT-FORMATTER supportsType] nodeName="StringCell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="MyStream", isWrapperContext=false, type=MyStream<number>
[CT-FORMATTER supportsType] nodeName="MyStream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=MyStream<number>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="WithDefault", isWrapperContext=false, type=WithDefault<string, "hello">
[CT-FORMATTER supportsType] nodeName="WithDefault", isDefault=false, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="CellArray", isWrapperContext=false, type=CellArray<number>
[CT-FORMATTER supportsType] nodeName="CellArray", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=CellArray<number>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="StreamOfCells", isWrapperContext=false, type=StreamOfCells<string>
[CT-FORMATTER supportsType] nodeName="StreamOfCells", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=StreamOfCells<string>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=Cell<string>
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<string>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=MyCell<MyCell<string>[]>[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=MyCell<MyCell<string>[]>[]
[WRAPPER-CHECK] typeNodeName="MyCell", isWrapperContext=false, type=MyCell<MyCell<string>[]>
[CT-FORMATTER supportsType] nodeName="MyCell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=MyCell<MyCell<string>[]>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=MyCell<string>[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=MyCell<string>[]
[WRAPPER-CHECK] typeNodeName="MyCell", isWrapperContext=false, type=MyCell<string>
[CT-FORMATTER supportsType] nodeName="MyCell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=MyCell<string>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  handles basic Cell/Stream/Default aliases ... [0m[32mok[0m [0m[38;5;245m(60ms)[0m
  hoists shared object type to definitions and references via $ref ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=A
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=A
[WRAPPER-CHECK] typeNodeName="B", isWrapperContext=false, type=B
[CT-FORMATTER supportsType] nodeName="B", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=B
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="B", isWrapperContext=false, type=B
[0m[38;5;245m----- post-test output end -----[0m
  hoists shared object type to definitions and references via $ref ... [0m[32mok[0m [0m[38;5;245m(23ms)[0m
Schema: Type aliases and shared types ... [0m[32mok[0m [0m[38;5;245m(82ms)[0m
[0m[38;5;245mrunning 1 test from ./test/schema/type-to-schema.test.ts[0m
Schema: type-to-schema parity ...
  generates schemas for inputs/outputs structures ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=UpdaterInput
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=UpdaterInput
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=RecipeInput
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=RecipeInput
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<string[]>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<string[]>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=RecipeOutput
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=RecipeOutput
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Stream", isWrapperContext=true, type=Stream<UpdaterInput>
[CT-FORMATTER supportsType] nodeName="Stream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=Stream<UpdaterInput>
[WRAPPER-CHECK] typeNodeName="UpdaterInput", isWrapperContext=false, type=UpdaterInput
[CT-FORMATTER supportsType] nodeName="UpdaterInput", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=UpdaterInput
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  generates schemas for inputs/outputs structures ... [0m[32mok[0m [0m[38;5;245m(100ms)[0m
  handles nested objects with string and number unions ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=UserInfo
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=UserInfo
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ name: string; email?: string | undefined; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ name: string; email?: string | undefined; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type="active" | "inactive" | "pending"
[CT-FORMATTER supportsType] wrapperInfo=undefined, type="active" | "inactive" | "pending"
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=1 | 2 | 3
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=1 | 2 | 3
[0m[38;5;245m----- post-test output end -----[0m
  handles nested objects with string and number unions ... [0m[32mok[0m [0m[38;5;245m(25ms)[0m
Schema: type-to-schema parity ... [0m[32mok[0m [0m[38;5;245m(125ms)[0m
[0m[38;5;245mrunning 1 test from ./test/fixtures-runner.test.ts[0m
Schema fixtures ...
  alias-edge-cases ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="VeryDeepCell", isWrapperContext=false, type=VeryDeepCell<string>
[CT-FORMATTER supportsType] nodeName="VeryDeepCell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=VeryDeepCell<string>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="DeepStream", isWrapperContext=false, type=DeepStream<number>
[CT-FORMATTER supportsType] nodeName="DeepStream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=DeepStream<number>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="StringCellStream", isWrapperContext=false, type=StringCellStream
[CT-FORMATTER supportsType] nodeName="StringCellStream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=StringCellStream
[WRAPPER-CHECK] typeNodeName="StringCellStream", isWrapperContext=false, type=StringCell
[CT-FORMATTER supportsType] nodeName="StringCellStream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=StringCell
[WRAPPER-CHECK] typeNodeName="StringCellStream", isWrapperContext=false, type=string
[CT-FORMATTER supportsType] nodeName="StringCellStream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="DeepNestedStream", isWrapperContext=false, type=DeepNestedStream
[CT-FORMATTER supportsType] nodeName="DeepNestedStream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=DeepNestedStream
[WRAPPER-CHECK] typeNodeName="DeepNestedStream", isWrapperContext=false, type=NumberCell
[CT-FORMATTER supportsType] nodeName="DeepNestedStream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=NumberCell
[WRAPPER-CHECK] typeNodeName="DeepNestedStream", isWrapperContext=false, type=number
[CT-FORMATTER supportsType] nodeName="DeepNestedStream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="IndirectCellArray", isWrapperContext=false, type=IndirectCellArray
[CT-FORMATTER supportsType] nodeName="IndirectCellArray", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=IndirectCellArray
[WRAPPER-CHECK] typeNodeName="IndirectCellArray", isWrapperContext=false, type=StringArray
[CT-FORMATTER supportsType] nodeName="IndirectCellArray", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=StringArray
[WRAPPER-CHECK] typeNodeName="IndirectCellArray", isWrapperContext=false, type=string
[CT-FORMATTER supportsType] nodeName="IndirectCellArray", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="CellOfNumberList", isWrapperContext=false, type=CellOfNumberList
[CT-FORMATTER supportsType] nodeName="CellOfNumberList", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=CellOfNumberList
[WRAPPER-CHECK] typeNodeName="CellOfNumberList", isWrapperContext=false, type=NumberList<number>
[CT-FORMATTER supportsType] nodeName="CellOfNumberList", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=NumberList<number>
[WRAPPER-CHECK] typeNodeName="CellOfNumberList", isWrapperContext=false, type=number
[CT-FORMATTER supportsType] nodeName="CellOfNumberList", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="CellOfUserList", isWrapperContext=false, type=CellOfUserList
[CT-FORMATTER supportsType] nodeName="CellOfUserList", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=CellOfUserList
[WRAPPER-CHECK] typeNodeName="CellOfUserList", isWrapperContext=false, type=UserList
[CT-FORMATTER supportsType] nodeName="CellOfUserList", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=UserList
[WRAPPER-CHECK] typeNodeName="CellOfUserList", isWrapperContext=false, type={ name: string; id: number; }
[CT-FORMATTER supportsType] nodeName="CellOfUserList", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ name: string; id: number; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="UserDataStore", isWrapperContext=false, type=UserDataStore
[CT-FORMATTER supportsType] nodeName="UserDataStore", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=UserDataStore
[WRAPPER-CHECK] typeNodeName="UserDataStore", isWrapperContext=false, type=string
[CT-FORMATTER supportsType] nodeName="UserDataStore", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="VeryDeepCell", isWrapperContext=false, type=VeryDeepCell<string>
[CT-FORMATTER supportsType] nodeName="VeryDeepCell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=VeryDeepCell<string>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="DeepStream", isWrapperContext=false, type=DeepStream<number>
[CT-FORMATTER supportsType] nodeName="DeepStream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=DeepStream<number>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="StringCellStream", isWrapperContext=false, type=StringCellStream
[CT-FORMATTER supportsType] nodeName="StringCellStream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=StringCellStream
[WRAPPER-CHECK] typeNodeName="StringCellStream", isWrapperContext=false, type=StringCell
[CT-FORMATTER supportsType] nodeName="StringCellStream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=StringCell
[WRAPPER-CHECK] typeNodeName="StringCellStream", isWrapperContext=false, type=string
[CT-FORMATTER supportsType] nodeName="StringCellStream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="DeepNestedStream", isWrapperContext=false, type=DeepNestedStream
[CT-FORMATTER supportsType] nodeName="DeepNestedStream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=DeepNestedStream
[WRAPPER-CHECK] typeNodeName="DeepNestedStream", isWrapperContext=false, type=NumberCell
[CT-FORMATTER supportsType] nodeName="DeepNestedStream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=NumberCell
[WRAPPER-CHECK] typeNodeName="DeepNestedStream", isWrapperContext=false, type=number
[CT-FORMATTER supportsType] nodeName="DeepNestedStream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="IndirectCellArray", isWrapperContext=false, type=IndirectCellArray
[CT-FORMATTER supportsType] nodeName="IndirectCellArray", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=IndirectCellArray
[WRAPPER-CHECK] typeNodeName="IndirectCellArray", isWrapperContext=false, type=StringArray
[CT-FORMATTER supportsType] nodeName="IndirectCellArray", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=StringArray
[WRAPPER-CHECK] typeNodeName="IndirectCellArray", isWrapperContext=false, type=string
[CT-FORMATTER supportsType] nodeName="IndirectCellArray", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="CellOfNumberList", isWrapperContext=false, type=CellOfNumberList
[CT-FORMATTER supportsType] nodeName="CellOfNumberList", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=CellOfNumberList
[WRAPPER-CHECK] typeNodeName="CellOfNumberList", isWrapperContext=false, type=NumberList<number>
[CT-FORMATTER supportsType] nodeName="CellOfNumberList", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=NumberList<number>
[WRAPPER-CHECK] typeNodeName="CellOfNumberList", isWrapperContext=false, type=number
[CT-FORMATTER supportsType] nodeName="CellOfNumberList", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="CellOfUserList", isWrapperContext=false, type=CellOfUserList
[CT-FORMATTER supportsType] nodeName="CellOfUserList", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=CellOfUserList
[WRAPPER-CHECK] typeNodeName="CellOfUserList", isWrapperContext=false, type=UserList
[CT-FORMATTER supportsType] nodeName="CellOfUserList", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=UserList
[WRAPPER-CHECK] typeNodeName="CellOfUserList", isWrapperContext=false, type={ name: string; id: number; }
[CT-FORMATTER supportsType] nodeName="CellOfUserList", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ name: string; id: number; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="UserDataStore", isWrapperContext=false, type=UserDataStore
[CT-FORMATTER supportsType] nodeName="UserDataStore", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=UserDataStore
[WRAPPER-CHECK] typeNodeName="UserDataStore", isWrapperContext=false, type=string
[CT-FORMATTER supportsType] nodeName="UserDataStore", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  alias-edge-cases ... [0m[32mok[0m [0m[38;5;245m(86ms)[0m
  aliases-of-aliases-cell-array ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Alias2", isWrapperContext=false, type=Alias2<number>
[CT-FORMATTER supportsType] nodeName="Alias2", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Alias2<number>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Alias2", isWrapperContext=false, type=Alias2<number>
[CT-FORMATTER supportsType] nodeName="Alias2", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Alias2<number>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
  aliases-of-aliases-cell-array ... [0m[32mok[0m [0m[38;5;245m(39ms)[0m
  array-of-cell-string ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=Cell<string>[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Cell<string>[]
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<string>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<string>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=Cell<string>[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Cell<string>[]
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<string>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<string>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  array-of-cell-string ... [0m[32mok[0m [0m[38;5;245m(34ms)[0m
  arrays-optional ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  arrays-optional ... [0m[32mok[0m [0m[38;5;245m(35ms)[0m
  cell-array-types ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<number[]>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<number[]>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<{ id: string; }[]>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<{ id: string; }[]>
[WRAPPER-CHECK] typeNodeName="Array", isWrapperContext=false, type={ id: string; }[]
[CT-FORMATTER supportsType] nodeName="Array", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ id: string; }[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ id: string; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ id: string; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<number[]>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<number[]>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<{ id: string; }[]>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<{ id: string; }[]>
[WRAPPER-CHECK] typeNodeName="Array", isWrapperContext=false, type={ id: string; }[]
[CT-FORMATTER supportsType] nodeName="Array", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ id: string; }[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ id: string; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ id: string; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  cell-array-types ... [0m[32mok[0m [0m[38;5;245m(36ms)[0m
  cell-type ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<string>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<string>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<string>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<string>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  cell-type ... [0m[32mok[0m [0m[38;5;245m(30ms)[0m
  cycles-multi-hop ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="B", isWrapperContext=false, type=B
[CT-FORMATTER supportsType] nodeName="B", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=B
[WRAPPER-CHECK] typeNodeName="C", isWrapperContext=false, type=C
[CT-FORMATTER supportsType] nodeName="C", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=C
[WRAPPER-CHECK] typeNodeName="SchemaRoot", isWrapperContext=false, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="B", isWrapperContext=false, type=B
[CT-FORMATTER supportsType] nodeName="B", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=B
[WRAPPER-CHECK] typeNodeName="C", isWrapperContext=false, type=C
[CT-FORMATTER supportsType] nodeName="C", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=C
[WRAPPER-CHECK] typeNodeName="SchemaRoot", isWrapperContext=false, type=SchemaRoot
[0m[38;5;245m----- post-test output end -----[0m
  cycles-multi-hop ... [0m[32mok[0m [0m[38;5;245m(29ms)[0m
  cycles-mutual-optional ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="SchemaRootA", isWrapperContext=false, type=SchemaRootA
[CT-FORMATTER supportsType] nodeName="SchemaRootA", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRootA
[WRAPPER-CHECK] typeNodeName="SchemaRoot", isWrapperContext=false, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="SchemaRootA", isWrapperContext=false, type=SchemaRootA
[CT-FORMATTER supportsType] nodeName="SchemaRootA", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRootA
[WRAPPER-CHECK] typeNodeName="SchemaRoot", isWrapperContext=false, type=SchemaRoot
[0m[38;5;245m----- post-test output end -----[0m
  cycles-mutual-optional ... [0m[32mok[0m [0m[38;5;245m(28ms)[0m
  date-types ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="UserProfile", isWrapperContext=false, type=UserProfile
[CT-FORMATTER supportsType] nodeName="UserProfile", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=UserProfile
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Date", isWrapperContext=false, type=Date
[CT-FORMATTER supportsType] nodeName="Date", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Date
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=Date | null
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Date | null
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ timezone: string; updatedAt: Date; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ timezone: string; updatedAt: Date; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Date", isWrapperContext=false, type=Date
[CT-FORMATTER supportsType] nodeName="Date", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Date
[WRAPPER-CHECK] typeNodeName="EventLog", isWrapperContext=false, type=EventLog
[CT-FORMATTER supportsType] nodeName="EventLog", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=EventLog
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Date
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="Date", isWrapperContext=false, type=Date
[CT-FORMATTER supportsType] nodeName="Date", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Date
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Document", isWrapperContext=false, type=Document
[CT-FORMATTER supportsType] nodeName="Document", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Document
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Date", isWrapperContext=false, type=Date
[CT-FORMATTER supportsType] nodeName="Date", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Date
[WRAPPER-CHECK] typeNodeName="Date", isWrapperContext=false, type=Date
[CT-FORMATTER supportsType] nodeName="Date", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Date
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=Date | null
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Date | null
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="UserProfile", isWrapperContext=false, type=UserProfile
[CT-FORMATTER supportsType] nodeName="UserProfile", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=UserProfile
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Date", isWrapperContext=false, type=Date
[CT-FORMATTER supportsType] nodeName="Date", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Date
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=Date | null
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Date | null
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ timezone: string; updatedAt: Date; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ timezone: string; updatedAt: Date; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Date", isWrapperContext=false, type=Date
[CT-FORMATTER supportsType] nodeName="Date", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Date
[WRAPPER-CHECK] typeNodeName="EventLog", isWrapperContext=false, type=EventLog
[CT-FORMATTER supportsType] nodeName="EventLog", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=EventLog
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Date
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="Date", isWrapperContext=false, type=Date
[CT-FORMATTER supportsType] nodeName="Date", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Date
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Document", isWrapperContext=false, type=Document
[CT-FORMATTER supportsType] nodeName="Document", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Document
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Date", isWrapperContext=false, type=Date
[CT-FORMATTER supportsType] nodeName="Date", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Date
[WRAPPER-CHECK] typeNodeName="Date", isWrapperContext=false, type=Date
[CT-FORMATTER supportsType] nodeName="Date", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Date
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=Date | null
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Date | null
[0m[38;5;245m----- post-test output end -----[0m
  date-types ... [0m[32mok[0m [0m[38;5;245m(32ms)[0m
  default-array-recursive ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=RecursiveItem[]
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="Array", isWrapperContext=false, type=RecursiveItem[]
[CT-FORMATTER supportsType] nodeName="Array", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=RecursiveItem[]
[WRAPPER-CHECK] typeNodeName="RecursiveItem", isWrapperContext=false, type=RecursiveItem
[CT-FORMATTER supportsType] nodeName="RecursiveItem", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=RecursiveItem
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=RecursiveItem[]
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=RecursiveItem[]
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="Array", isWrapperContext=false, type=RecursiveItem[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=RecursiveItem[]
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="Array", isWrapperContext=false, type=RecursiveItem[]
[CT-FORMATTER supportsType] nodeName="Array", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=RecursiveItem[]
[WRAPPER-CHECK] typeNodeName="RecursiveItem", isWrapperContext=false, type=RecursiveItem
[CT-FORMATTER supportsType] nodeName="RecursiveItem", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=RecursiveItem
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=RecursiveItem[]
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=RecursiveItem[]
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="Array", isWrapperContext=false, type=RecursiveItem[]
[0m[38;5;245m----- post-test output end -----[0m
  default-array-recursive ... [0m[32mok[0m [0m[38;5;245m(34ms)[0m
  default-nullable-null ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=string | null
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string | null
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string | null
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=string | null
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string | null
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string | null
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  default-nullable-null ... [0m[32mok[0m [0m[38;5;245m(28ms)[0m
  default-type ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="UserSettings", isWrapperContext=false, type=UserSettings
[CT-FORMATTER supportsType] nodeName="UserSettings", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=UserSettings
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=string
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=number
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=boolean
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=boolean
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=boolean
[WRAPPER-CHECK] typeNodeName="AppConfig", isWrapperContext=false, type=AppConfig
[CT-FORMATTER supportsType] nodeName="AppConfig", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=AppConfig
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ name: string; settings: { language: string; timezone: string; }; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ name: string; settings: { language: string; timezone: string; }; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ language: string; timezone: string; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ language: string; timezone: string; }
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=string
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=string
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ darkMode: boolean; autoSave: boolean; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ darkMode: boolean; autoSave: boolean; }
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=boolean
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=boolean
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=boolean
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=boolean
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=boolean
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=boolean
[WRAPPER-CHECK] typeNodeName="ListConfig", isWrapperContext=false, type=ListConfig
[CT-FORMATTER supportsType] nodeName="ListConfig", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=ListConfig
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=string[]
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=number[]
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="ComplexDefault", isWrapperContext=false, type=ComplexDefault
[CT-FORMATTER supportsType] nodeName="ComplexDefault", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=ComplexDefault
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type={ version: number; author: string; }
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ version: number; author: string; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ version: number; author: string; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type={ enabled: boolean; value: number; }
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ enabled: boolean; value: number; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ enabled: boolean; value: number; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=boolean
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=boolean
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="CellDefaults", isWrapperContext=false, type=CellDefaults
[CT-FORMATTER supportsType] nodeName="CellDefaults", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=CellDefaults
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<number>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<number>
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=number
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<string[]>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<string[]>
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=string[]
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="OptionalWithDefaults", isWrapperContext=false, type=OptionalWithDefaults
[CT-FORMATTER supportsType] nodeName="OptionalWithDefaults", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=OptionalWithDefaults
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=string
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ value?: number | undefined; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ value?: number | undefined; }
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=number
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="UserSettings", isWrapperContext=false, type=UserSettings
[CT-FORMATTER supportsType] nodeName="UserSettings", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=UserSettings
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=string
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=number
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=boolean
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=boolean
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=boolean
[WRAPPER-CHECK] typeNodeName="AppConfig", isWrapperContext=false, type=AppConfig
[CT-FORMATTER supportsType] nodeName="AppConfig", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=AppConfig
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ name: string; settings: { language: string; timezone: string; }; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ name: string; settings: { language: string; timezone: string; }; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ language: string; timezone: string; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ language: string; timezone: string; }
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=string
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=string
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ darkMode: boolean; autoSave: boolean; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ darkMode: boolean; autoSave: boolean; }
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=boolean
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=boolean
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=boolean
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=boolean
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=boolean
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=boolean
[WRAPPER-CHECK] typeNodeName="ListConfig", isWrapperContext=false, type=ListConfig
[CT-FORMATTER supportsType] nodeName="ListConfig", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=ListConfig
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=string[]
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=number[]
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="ComplexDefault", isWrapperContext=false, type=ComplexDefault
[CT-FORMATTER supportsType] nodeName="ComplexDefault", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=ComplexDefault
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type={ version: number; author: string; }
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ version: number; author: string; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ version: number; author: string; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type={ enabled: boolean; value: number; }
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ enabled: boolean; value: number; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ enabled: boolean; value: number; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=boolean
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=boolean
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="CellDefaults", isWrapperContext=false, type=CellDefaults
[CT-FORMATTER supportsType] nodeName="CellDefaults", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=CellDefaults
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<number>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<number>
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=number
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<string[]>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<string[]>
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=string[]
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="OptionalWithDefaults", isWrapperContext=false, type=OptionalWithDefaults
[CT-FORMATTER supportsType] nodeName="OptionalWithDefaults", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=OptionalWithDefaults
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=string
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ value?: number | undefined; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ value?: number | undefined; }
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=number
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
  default-type ... [0m[32mok[0m [0m[38;5;245m(33ms)[0m
  defaults-complex-array ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=TodoItem[]
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=TodoItem[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=TodoItem[]
[WRAPPER-CHECK] typeNodeName="TodoItem", isWrapperContext=false, type=TodoItem
[CT-FORMATTER supportsType] nodeName="TodoItem", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=TodoItem
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=boolean
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=boolean
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=string[]
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=number[][]
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number[][]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number[][]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=TodoItem[]
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=TodoItem[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=TodoItem[]
[WRAPPER-CHECK] typeNodeName="TodoItem", isWrapperContext=false, type=TodoItem
[CT-FORMATTER supportsType] nodeName="TodoItem", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=TodoItem
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=boolean
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=boolean
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=string[]
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=number[][]
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number[][]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number[][]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
  defaults-complex-array ... [0m[32mok[0m [0m[38;5;245m(31ms)[0m
  defaults-complex-object ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type={ theme: string; count: number; }
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ theme: string; count: number; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ theme: string; count: number; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type={ name: string; settings: { notifications: boolean; email: string; }; }
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ name: string; settings: { notifications: boolean; email: string; }; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ name: string; settings: { notifications: boolean; email: string; }; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ notifications: boolean; email: string; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ notifications: boolean; email: string; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=boolean
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=boolean
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type={ theme: string; count: number; }
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ theme: string; count: number; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ theme: string; count: number; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type={ name: string; settings: { notifications: boolean; email: string; }; }
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ name: string; settings: { notifications: boolean; email: string; }; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ name: string; settings: { notifications: boolean; email: string; }; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ notifications: boolean; email: string; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ notifications: boolean; email: string; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=boolean
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=boolean
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  defaults-complex-object ... [0m[32mok[0m [0m[38;5;245m(29ms)[0m
  descriptions-array-doc ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  descriptions-array-doc ... [0m[32mok[0m [0m[38;5;245m(31ms)[0m
  descriptions-basic ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  descriptions-basic ... [0m[32mok[0m [0m[38;5;245m(28ms)[0m
  descriptions-extends ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  descriptions-extends ... [0m[32mok[0m [0m[38;5;245m(34ms)[0m
  descriptions-index ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
  descriptions-index ... [0m[32mok[0m [0m[38;5;245m(29ms)[0m
  descriptions-index-ambiguous ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WARN][schema-generator.object::20:48:34.690] JSDoc conflict for index signatures; using first doc
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WARN][schema-generator.object::20:48:34.705] JSDoc conflict for index signatures; using first doc
[0m[38;5;245m----- post-test output end -----[0m
  descriptions-index-ambiguous ... [0m[32mok[0m [0m[38;5;245m(27ms)[0m
  descriptions-intersection-concat ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=TypeA
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=TypeA
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=TypeB
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=TypeB
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=TypeA
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=TypeA
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=TypeB
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=TypeB
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
  descriptions-intersection-concat ... [0m[32mok[0m [0m[38;5;245m(28ms)[0m
  descriptions-intersection-conflict ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=C
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=C
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=D
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=D
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WARN][schema-generator.intersection::20:48:34.745] Intersection doc conflict for 'name'; using first
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=C
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=C
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=D
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=D
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WARN][schema-generator.intersection::20:48:34.759] Intersection doc conflict for 'name'; using first
[0m[38;5;245m----- post-test output end -----[0m
  descriptions-intersection-conflict ... [0m[32mok[0m [0m[38;5;245m(27ms)[0m
  descriptions-intersection-missing ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=TypeA
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=TypeA
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ bar: number; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ bar: number; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=TypeA
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=TypeA
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ bar: number; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ bar: number; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
  descriptions-intersection-missing ... [0m[32mok[0m [0m[38;5;245m(29ms)[0m
  descriptions-intersection-none ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ foo: string; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ foo: string; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ bar: number; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ bar: number; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ foo: string; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ foo: string; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ bar: number; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ bar: number; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
  descriptions-intersection-none ... [0m[32mok[0m [0m[38;5;245m(27ms)[0m
  descriptions-intersection-same ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=A
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=A
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=B
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=B
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=A
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=A
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=B
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=B
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
  descriptions-intersection-same ... [0m[32mok[0m [0m[38;5;245m(29ms)[0m
  descriptions-nested ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=ChildNode[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=ChildNode[]
[WRAPPER-CHECK] typeNodeName="ChildNode", isWrapperContext=false, type=ChildNode
[CT-FORMATTER supportsType] nodeName="ChildNode", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=ChildNode
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=any[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=any[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=any[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=any[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=any[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=any[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=ChildNode[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=ChildNode[]
[WRAPPER-CHECK] typeNodeName="ChildNode", isWrapperContext=false, type=ChildNode
[CT-FORMATTER supportsType] nodeName="ChildNode", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=ChildNode
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=any[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=any[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=any[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=any[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=any[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=any[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
  descriptions-nested ... [0m[32mok[0m [0m[38;5;245m(28ms)[0m
  descriptions-optional-union ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=boolean | undefined
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=boolean | undefined
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=boolean | undefined
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=boolean | undefined
[0m[38;5;245m----- post-test output end -----[0m
  descriptions-optional-union ... [0m[32mok[0m [0m[38;5;245m(28ms)[0m
  descriptions-property-multiline ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  descriptions-property-multiline ... [0m[32mok[0m [0m[38;5;245m(26ms)[0m
  descriptions-record-alias ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
  descriptions-record-alias ... [0m[32mok[0m [0m[38;5;245m(26ms)[0m
  descriptions-recursive ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot[]
[WRAPPER-CHECK] typeNodeName="SchemaRoot", isWrapperContext=false, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot[]
[WRAPPER-CHECK] typeNodeName="SchemaRoot", isWrapperContext=false, type=SchemaRoot
[0m[38;5;245m----- post-test output end -----[0m
  descriptions-recursive ... [0m[32mok[0m [0m[38;5;245m(27ms)[0m
  descriptions-root-alias ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="BaseRoot", isWrapperContext=false, type=BaseRoot
[CT-FORMATTER supportsType] nodeName="BaseRoot", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=BaseRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="BaseRoot", isWrapperContext=false, type=BaseRoot
[CT-FORMATTER supportsType] nodeName="BaseRoot", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=BaseRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  descriptions-root-alias ... [0m[32mok[0m [0m[38;5;245m(26ms)[0m
  descriptions-root-with-tags ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
  descriptions-root-with-tags ... [0m[32mok[0m [0m[38;5;245m(30ms)[0m
  descriptions-union-literals ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type="open" | "closed" | "pending"
[CT-FORMATTER supportsType] wrapperInfo=undefined, type="open" | "closed" | "pending"
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type="open" | "closed" | "pending"
[CT-FORMATTER supportsType] wrapperInfo=undefined, type="open" | "closed" | "pending"
[0m[38;5;245m----- post-test output end -----[0m
  descriptions-union-literals ... [0m[32mok[0m [0m[38;5;245m(27ms)[0m
  descriptions-wrappers ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<string[]>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<string[]>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Stream", isWrapperContext=true, type=Stream<number>
[CT-FORMATTER supportsType] nodeName="Stream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=Stream<number>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=number
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<string[]>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<string[]>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Stream", isWrapperContext=true, type=Stream<number>
[CT-FORMATTER supportsType] nodeName="Stream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=Stream<number>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=number
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
  descriptions-wrappers ... [0m[32mok[0m [0m[38;5;245m(27ms)[0m
  multi-hop-circular ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="A", isWrapperContext=false, type=A
[CT-FORMATTER supportsType] nodeName="A", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=A
[WRAPPER-CHECK] typeNodeName="B", isWrapperContext=false, type=B
[CT-FORMATTER supportsType] nodeName="B", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=B
[WRAPPER-CHECK] typeNodeName="C", isWrapperContext=false, type=C
[CT-FORMATTER supportsType] nodeName="C", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=C
[WRAPPER-CHECK] typeNodeName="A", isWrapperContext=false, type=A
[WRAPPER-CHECK] typeNodeName="A", isWrapperContext=false, type=A
[CT-FORMATTER supportsType] nodeName="A", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=A
[WRAPPER-CHECK] typeNodeName="B", isWrapperContext=false, type=B
[CT-FORMATTER supportsType] nodeName="B", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=B
[WRAPPER-CHECK] typeNodeName="C", isWrapperContext=false, type=C
[CT-FORMATTER supportsType] nodeName="C", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=C
[WRAPPER-CHECK] typeNodeName="A", isWrapperContext=false, type=A
[0m[38;5;245m----- post-test output end -----[0m
  multi-hop-circular ... [0m[32mok[0m [0m[38;5;245m(28ms)[0m
  mutually-recursive ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="NodeA", isWrapperContext=false, type=NodeA
[CT-FORMATTER supportsType] nodeName="NodeA", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=NodeA
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="NodeB", isWrapperContext=false, type=NodeB
[CT-FORMATTER supportsType] nodeName="NodeB", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=NodeB
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="NodeA", isWrapperContext=false, type=NodeA
[WRAPPER-CHECK] typeNodeName="NodeA", isWrapperContext=false, type=NodeA
[CT-FORMATTER supportsType] nodeName="NodeA", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=NodeA
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="NodeB", isWrapperContext=false, type=NodeB
[CT-FORMATTER supportsType] nodeName="NodeB", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=NodeB
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="NodeA", isWrapperContext=false, type=NodeA
[0m[38;5;245m----- post-test output end -----[0m
  mutually-recursive ... [0m[32mok[0m [0m[38;5;245m(28ms)[0m
  nested-default-aliases ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=string
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="UserDefault", isWrapperContext=false, type=string
[CT-FORMATTER supportsType] nodeName="UserDefault", isDefault=false, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="MyDefault", isWrapperContext=false, type=string
[CT-FORMATTER supportsType] nodeName="MyDefault", isDefault=false, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=string
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="UserDefault", isWrapperContext=false, type=string
[CT-FORMATTER supportsType] nodeName="UserDefault", isDefault=false, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="MyDefault", isWrapperContext=false, type=string
[CT-FORMATTER supportsType] nodeName="MyDefault", isDefault=false, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  nested-default-aliases ... [0m[32mok[0m [0m[38;5;245m(35ms)[0m
  nested-recursive ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ node?: SchemaRoot | undefined; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ node?: SchemaRoot | undefined; }
[WRAPPER-CHECK] typeNodeName="SchemaRoot", isWrapperContext=false, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ node?: SchemaRoot | undefined; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ node?: SchemaRoot | undefined; }
[WRAPPER-CHECK] typeNodeName="SchemaRoot", isWrapperContext=false, type=SchemaRoot
[0m[38;5;245m----- post-test output end -----[0m
  nested-recursive ... [0m[32mok[0m [0m[38;5;245m(26ms)[0m
  nested-recursive-tree ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="TreeNode", isWrapperContext=false, type=TreeNode
[CT-FORMATTER supportsType] nodeName="TreeNode", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=TreeNode
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="TreeBranch", isWrapperContext=false, type=TreeBranch
[CT-FORMATTER supportsType] nodeName="TreeBranch", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=TreeBranch
[WRAPPER-CHECK] typeNodeName="TreeNode", isWrapperContext=false, type=TreeNode
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="TreeBranch", isWrapperContext=false, type=TreeBranch
[WRAPPER-CHECK] typeNodeName="TreeNode", isWrapperContext=false, type=TreeNode
[CT-FORMATTER supportsType] nodeName="TreeNode", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=TreeNode
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="TreeBranch", isWrapperContext=false, type=TreeBranch
[CT-FORMATTER supportsType] nodeName="TreeBranch", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=TreeBranch
[WRAPPER-CHECK] typeNodeName="TreeNode", isWrapperContext=false, type=TreeNode
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="TreeBranch", isWrapperContext=false, type=TreeBranch
[0m[38;5;245m----- post-test output end -----[0m
  nested-recursive-tree ... [0m[32mok[0m [0m[38;5;245m(27ms)[0m
  recipe-with-types-input ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="InputSchemaInterface", isWrapperContext=false, type=InputSchemaInterface
[CT-FORMATTER supportsType] nodeName="InputSchemaInterface", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=InputSchemaInterface
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<string, "untitled">
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<Item[], []>
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=Item[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Item[]
[WRAPPER-CHECK] typeNodeName="Item", isWrapperContext=false, type=Item
[CT-FORMATTER supportsType] nodeName="Item", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Item
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<string, "">
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="InputSchemaInterface", isWrapperContext=false, type=InputSchemaInterface
[CT-FORMATTER supportsType] nodeName="InputSchemaInterface", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=InputSchemaInterface
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<string, "untitled">
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<Item[], []>
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=Item[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Item[]
[WRAPPER-CHECK] typeNodeName="Item", isWrapperContext=false, type=Item
[CT-FORMATTER supportsType] nodeName="Item", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Item
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<string, "">
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  recipe-with-types-input ... [0m[32mok[0m [0m[38;5;245m(30ms)[0m
  recipe-with-types-output ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="OutputSchemaInterface", isWrapperContext=false, type=OutputSchemaInterface
[CT-FORMATTER supportsType] nodeName="OutputSchemaInterface", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=OutputSchemaInterface
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<string, "untitled">
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<Item[], []>
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=Item[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Item[]
[WRAPPER-CHECK] typeNodeName="Item", isWrapperContext=false, type=Item
[CT-FORMATTER supportsType] nodeName="Item", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Item
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<string, "">
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="OutputSchemaInterface", isWrapperContext=false, type=OutputSchemaInterface
[CT-FORMATTER supportsType] nodeName="OutputSchemaInterface", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=OutputSchemaInterface
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<string, "untitled">
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<Item[], []>
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=Item[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Item[]
[WRAPPER-CHECK] typeNodeName="Item", isWrapperContext=false, type=Item
[CT-FORMATTER supportsType] nodeName="Item", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Item
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=Default<string, "">
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  recipe-with-types-output ... [0m[32mok[0m [0m[38;5;245m(28ms)[0m
  recursion-basic ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="SchemaRoot", isWrapperContext=false, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="SchemaRoot", isWrapperContext=false, type=SchemaRoot
[0m[38;5;245m----- post-test output end -----[0m
  recursion-basic ... [0m[32mok[0m [0m[38;5;245m(26ms)[0m
  recursion-children-array ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot[]
[WRAPPER-CHECK] typeNodeName="SchemaRoot", isWrapperContext=false, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot[]
[WRAPPER-CHECK] typeNodeName="SchemaRoot", isWrapperContext=false, type=SchemaRoot
[0m[38;5;245m----- post-test output end -----[0m
  recursion-children-array ... [0m[32mok[0m [0m[38;5;245m(27ms)[0m
  recursive-type ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="LinkedList", isWrapperContext=false, type=LinkedList
[CT-FORMATTER supportsType] nodeName="LinkedList", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=LinkedList
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="LinkedList", isWrapperContext=false, type=LinkedList
[WRAPPER-CHECK] typeNodeName="LinkedList", isWrapperContext=false, type=LinkedList
[CT-FORMATTER supportsType] nodeName="LinkedList", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=LinkedList
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="LinkedList", isWrapperContext=false, type=LinkedList
[0m[38;5;245m----- post-test output end -----[0m
  recursive-type ... [0m[32mok[0m [0m[38;5;245m(25ms)[0m
  recursive-type-nested ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="RootType", isWrapperContext=false, type=RootType
[CT-FORMATTER supportsType] nodeName="RootType", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=RootType
[WRAPPER-CHECK] typeNodeName="LinkedList", isWrapperContext=false, type=LinkedList
[CT-FORMATTER supportsType] nodeName="LinkedList", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=LinkedList
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="LinkedList", isWrapperContext=false, type=LinkedList
[WRAPPER-CHECK] typeNodeName="RootType", isWrapperContext=false, type=RootType
[CT-FORMATTER supportsType] nodeName="RootType", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=RootType
[WRAPPER-CHECK] typeNodeName="LinkedList", isWrapperContext=false, type=LinkedList
[CT-FORMATTER supportsType] nodeName="LinkedList", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=LinkedList
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="LinkedList", isWrapperContext=false, type=LinkedList
[0m[38;5;245m----- post-test output end -----[0m
  recursive-type-nested ... [0m[32mok[0m [0m[38;5;245m(27ms)[0m
  shared-type ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Shared", isWrapperContext=false, type=Shared
[CT-FORMATTER supportsType] nodeName="Shared", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Shared
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Shared", isWrapperContext=false, type=Shared
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Shared", isWrapperContext=false, type=Shared
[CT-FORMATTER supportsType] nodeName="Shared", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Shared
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Shared", isWrapperContext=false, type=Shared
[0m[38;5;245m----- post-test output end -----[0m
  shared-type ... [0m[32mok[0m [0m[38;5;245m(27ms)[0m
  simple-interface ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
  simple-interface ... [0m[32mok[0m [0m[38;5;245m(28ms)[0m
  stream-of-cell-number ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Stream", isWrapperContext=true, type=Stream<Cell<number>>
[CT-FORMATTER supportsType] nodeName="Stream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=Stream<Cell<number>>
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<number>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<number>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Stream", isWrapperContext=true, type=Stream<Cell<number>>
[CT-FORMATTER supportsType] nodeName="Stream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=Stream<Cell<number>>
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<number>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<number>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
  stream-of-cell-number ... [0m[32mok[0m [0m[38;5;245m(27ms)[0m
  stream-type ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Stream", isWrapperContext=true, type=Stream<string>
[CT-FORMATTER supportsType] nodeName="Stream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=Stream<string>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Stream", isWrapperContext=true, type=Stream<string>
[CT-FORMATTER supportsType] nodeName="Stream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=Stream<string>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  stream-type ... [0m[32mok[0m [0m[38;5;245m(27ms)[0m
  type-aliases ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="MyCell", isWrapperContext=false, type=MyCell<number>
[CT-FORMATTER supportsType] nodeName="MyCell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=MyCell<number>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="MyStream", isWrapperContext=false, type=MyStream<MyCell<string>>
[CT-FORMATTER supportsType] nodeName="MyStream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=MyStream<MyCell<string>>
[WRAPPER-CHECK] typeNodeName="MyCell", isWrapperContext=false, type=MyCell<string>
[CT-FORMATTER supportsType] nodeName="MyCell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=MyCell<string>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="MyDefault", isWrapperContext=false, type=string
[CT-FORMATTER supportsType] nodeName="MyDefault", isDefault=false, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="MyCell", isWrapperContext=false, type=MyCell<number>
[CT-FORMATTER supportsType] nodeName="MyCell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=MyCell<number>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="MyStream", isWrapperContext=false, type=MyStream<MyCell<string>>
[CT-FORMATTER supportsType] nodeName="MyStream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=MyStream<MyCell<string>>
[WRAPPER-CHECK] typeNodeName="MyCell", isWrapperContext=false, type=MyCell<string>
[CT-FORMATTER supportsType] nodeName="MyCell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=MyCell<string>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="MyDefault", isWrapperContext=false, type=string
[CT-FORMATTER supportsType] nodeName="MyDefault", isDefault=false, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  type-aliases ... [0m[32mok[0m [0m[38;5;245m(27ms)[0m
  wrapper-aliases ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=RecursiveItem[]
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=RecursiveItem[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=RecursiveItem[]
[WRAPPER-CHECK] typeNodeName="RecursiveItem", isWrapperContext=false, type=RecursiveItem
[CT-FORMATTER supportsType] nodeName="RecursiveItem", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=RecursiveItem
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=RecursiveItem[]
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<RecursiveItem[]>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<RecursiveItem[]>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=RecursiveItem[]
[WRAPPER-CHECK] typeNodeName="Stream", isWrapperContext=true, type=Stream<RecursiveItem[]>
[CT-FORMATTER supportsType] nodeName="Stream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=Stream<RecursiveItem[]>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=RecursiveItem[]
[WRAPPER-CHECK] typeNodeName="OpaqueRef", isWrapperContext=true, type=OpaqueRef<RecursiveItem[]>
[CT-FORMATTER supportsType] nodeName="OpaqueRef", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=OpaqueRef<RecursiveItem[]>
[WRAPPER-CHECK] typeNodeName="MyDefault", isWrapperContext=false, type=RecursiveItem[]
[WRAPPER-CHECK] typeNodeName="MyCell", isWrapperContext=false, type=MyCell<RecursiveItem[]>
[CT-FORMATTER supportsType] nodeName="MyCell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=MyCell<RecursiveItem[]>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=RecursiveItem[]
[WRAPPER-CHECK] typeNodeName="MyStream", isWrapperContext=false, type=MyStream<RecursiveItem[]>
[CT-FORMATTER supportsType] nodeName="MyStream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=MyStream<RecursiveItem[]>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=RecursiveItem[]
[WRAPPER-CHECK] typeNodeName="MyOpaqueRef", isWrapperContext=false, type=MyOpaqueRef<RecursiveItem[]>
[CT-FORMATTER supportsType] nodeName="MyOpaqueRef", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=MyOpaqueRef<RecursiveItem[]>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=RecursiveItem[]
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=RecursiveItem[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=RecursiveItem[]
[WRAPPER-CHECK] typeNodeName="RecursiveItem", isWrapperContext=false, type=RecursiveItem
[CT-FORMATTER supportsType] nodeName="RecursiveItem", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=RecursiveItem
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=RecursiveItem[]
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<RecursiveItem[]>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<RecursiveItem[]>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=RecursiveItem[]
[WRAPPER-CHECK] typeNodeName="Stream", isWrapperContext=true, type=Stream<RecursiveItem[]>
[CT-FORMATTER supportsType] nodeName="Stream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=Stream<RecursiveItem[]>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=RecursiveItem[]
[WRAPPER-CHECK] typeNodeName="OpaqueRef", isWrapperContext=true, type=OpaqueRef<RecursiveItem[]>
[CT-FORMATTER supportsType] nodeName="OpaqueRef", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=OpaqueRef<RecursiveItem[]>
[WRAPPER-CHECK] typeNodeName="MyDefault", isWrapperContext=false, type=RecursiveItem[]
[WRAPPER-CHECK] typeNodeName="MyCell", isWrapperContext=false, type=MyCell<RecursiveItem[]>
[CT-FORMATTER supportsType] nodeName="MyCell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=MyCell<RecursiveItem[]>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=RecursiveItem[]
[WRAPPER-CHECK] typeNodeName="MyStream", isWrapperContext=false, type=MyStream<RecursiveItem[]>
[CT-FORMATTER supportsType] nodeName="MyStream", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Stream, type=MyStream<RecursiveItem[]>
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=RecursiveItem[]
[WRAPPER-CHECK] typeNodeName="MyOpaqueRef", isWrapperContext=false, type=MyOpaqueRef<RecursiveItem[]>
[CT-FORMATTER supportsType] nodeName="MyOpaqueRef", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=MyOpaqueRef<RecursiveItem[]>
[0m[38;5;245m----- post-test output end -----[0m
  wrapper-aliases ... [0m[31mFAILED[0m [0m[38;5;245m(30ms)[0m
  wrappers-nested ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<string>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<string>
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=string
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=string[]
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=SchemaRoot
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=SchemaRoot
[WRAPPER-CHECK] typeNodeName="Cell", isWrapperContext=true, type=Cell<string>
[CT-FORMATTER supportsType] nodeName="Cell", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=Cell, type=Cell<string>
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=string
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="Default", isWrapperContext=true, type=string[]
[CT-FORMATTER supportsType] nodeName="Default", isDefault=true, isAliasToDefault=true
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string[]
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
  wrappers-nested ... [0m[32mok[0m [0m[38;5;245m(27ms)[0m
Schema fixtures ... [0m[31mFAILED[0m (due to 1 failed step) [0m[38;5;245m(1s)[0m
[0m[38;5;245mrunning 1 test from ./test/intersection-formatter.test.ts[0m
IntersectionFormatter ...
  successful intersections ...
    should merge simple object intersection ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=ItemWithIndex
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=ItemWithIndex
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=ItemBase
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=ItemBase
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=WithIndex
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=WithIndex
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
    should merge simple object intersection ... [0m[32mok[0m [0m[38;5;245m(53ms)[0m
    should merge complex nested intersection ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=ListStateWithIndex
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=ListStateWithIndex
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=ListState
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=ListState
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=Item[]
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Item[]
[WRAPPER-CHECK] typeNodeName="Item", isWrapperContext=false, type=Item
[CT-FORMATTER supportsType] nodeName="Item", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Item
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ index: number; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ index: number; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
    should merge complex nested intersection ... [0m[32mok[0m [0m[38;5;245m(25ms)[0m
    should handle optional properties in intersection ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=Combined
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Combined
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=RequiredFields
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=RequiredFields
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=OptionalFields
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=OptionalFields
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
    should handle optional properties in intersection ... [0m[32mok[0m [0m[38;5;245m(20ms)[0m
  successful intersections ... [0m[32mok[0m [0m[38;5;245m(98ms)[0m
  intersections with call/construct signatures ...
    should merge intersection with call signature ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=IntersectionWithCall
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=IntersectionWithCall
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=Base
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Base
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=WithCallSig
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=WithCallSig
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
    should merge intersection with call signature ... [0m[32mok[0m [0m[38;5;245m(22ms)[0m
    should merge intersection with construct signature ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=IntersectionWithConstruct
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=IntersectionWithConstruct
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=Base
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Base
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=WithConstructSig
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=WithConstructSig
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
    should merge intersection with construct signature ... [0m[32mok[0m [0m[38;5;245m(15ms)[0m
  intersections with call/construct signatures ... [0m[32mok[0m [0m[38;5;245m(38ms)[0m
  unsupported intersections ...
    should reject intersection with index signature ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=BadIntersection
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=BadIntersection
[0m[38;5;245m----- post-test output end -----[0m
    should reject intersection with index signature ... [0m[32mok[0m [0m[38;5;245m(15ms)[0m
    should reject intersection with non-object types ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=BadIntersection
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=BadIntersection
[0m[38;5;245m----- post-test output end -----[0m
    should reject intersection with non-object types ... [0m[32mok[0m [0m[38;5;245m(18ms)[0m
  unsupported intersections ... [0m[32mok[0m [0m[38;5;245m(34ms)[0m
  edge cases ...
    should handle multiple interfaces with overlapping properties ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=Combined
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Combined
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=A
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=A
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=B
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=B
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=boolean
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=boolean
[0m[38;5;245m----- post-test output end -----[0m
    should handle multiple interfaces with overlapping properties ... [0m[32mok[0m [0m[38;5;245m(18ms)[0m
    should handle three-way intersection ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=Triple
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Triple
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=A
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=A
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=B
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=B
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=C
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=C
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=boolean
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=boolean
[0m[38;5;245m----- post-test output end -----[0m
    should handle three-way intersection ... [0m[32mok[0m [0m[38;5;245m(14ms)[0m
  edge cases ... [0m[32mok[0m [0m[38;5;245m(32ms)[0m
IntersectionFormatter ... [0m[32mok[0m [0m[38;5;245m(202ms)[0m
[0m[38;5;245mrunning 1 test from ./test/native-type-parameters.test.ts[0m
Native type parameters ...
  unwraps Uint8Array with defaulted typed buffer ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=Wrapper
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Wrapper
[WRAPPER-CHECK] typeNodeName="Uint8Array", isWrapperContext=false, type=Uint8Array<ArrayBufferLike>
[CT-FORMATTER supportsType] nodeName="Uint8Array", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Uint8Array<ArrayBufferLike>
[WRAPPER-CHECK] typeNodeName="Uint8Array", isWrapperContext=false, type=Uint8Array<ArrayBufferLike & { foo?: number | undefined; }>
[CT-FORMATTER supportsType] nodeName="Uint8Array", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Uint8Array<ArrayBufferLike & { foo?: number | undefined; }>
[0m[38;5;245m----- post-test output end -----[0m
  unwraps Uint8Array with defaulted typed buffer ... [0m[32mok[0m [0m[38;5;245m(58ms)[0m
Native type parameters ... [0m[32mok[0m [0m[38;5;245m(58ms)[0m
[0m[38;5;245mrunning 1 test from ./test/plugin.test.ts[0m
Plugin Interface ...
  should create a transformer function with the correct signature ... [0m[32mok[0m [0m[38;5;245m(0ms)[0m
  transforms a simple object via plugin ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=MyObject
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=MyObject
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
  transforms a simple object via plugin ... [0m[32mok[0m [0m[38;5;245m(54ms)[0m
Plugin Interface ... [0m[32mok[0m [0m[38;5;245m(54ms)[0m
[0m[38;5;245mrunning 1 test from ./test/schema-generator.test.ts[0m
SchemaGenerator ...
  formatter chain ...
    should route primitive types to PrimitiveFormatter ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
    should route primitive types to PrimitiveFormatter ... [0m[32mok[0m [0m[38;5;245m(51ms)[0m
    should route object types to ObjectFormatter ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=MyObject
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=MyObject
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=number
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=number
[0m[38;5;245m----- post-test output end -----[0m
    should route object types to ObjectFormatter ... [0m[32mok[0m [0m[38;5;245m(25ms)[0m
    should route array types to ArrayFormatter ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=MyArray
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=MyArray
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
    should route array types to ArrayFormatter ... [0m[32mok[0m [0m[38;5;245m(22ms)[0m
  formatter chain ... [0m[32mok[0m [0m[38;5;245m(98ms)[0m
  jsdoc integration ...
    prefers the comment closest to the type declaration ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=CalculatorRequest
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=CalculatorRequest
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
    prefers the comment closest to the type declaration ... [0m[32mok[0m [0m[38;5;245m(24ms)[0m
  jsdoc integration ... [0m[32mok[0m [0m[38;5;245m(24ms)[0m
  error handling ...
    should handle unknown types gracefully ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=unknown
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=unknown
[0m[38;5;245m----- post-test output end -----[0m
    should handle unknown types gracefully ... [0m[32mok[0m [0m[38;5;245m(16ms)[0m
  error handling ... [0m[32mok[0m [0m[38;5;245m(16ms)[0m
  anonymous recursion ...
    hoists anonymous recursive types with synthetic definitions ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=Wrapper
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Wrapper
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ value: string; next?: ... | undefined; }
[CT-FORMATTER supportsType] wrapperInfo=undefined, type={ value: string; next?: ... | undefined; }
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type={ value: string; next?: ... | undefined; }
[0m[38;5;245m----- post-test output end -----[0m
    hoists anonymous recursive types with synthetic definitions ... [0m[32mok[0m [0m[38;5;245m(19ms)[0m
  anonymous recursion ... [0m[32mok[0m [0m[38;5;245m(19ms)[0m
  built-in mappings ...
    formats Date as string with date-time format without hoisting ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=HasDate
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=HasDate
[WRAPPER-CHECK] typeNodeName="Date", isWrapperContext=false, type=Date
[CT-FORMATTER supportsType] nodeName="Date", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Date
[0m[38;5;245m----- post-test output end -----[0m
    formats Date as string with date-time format without hoisting ... [0m[32mok[0m [0m[38;5;245m(19ms)[0m
    formats URL as string with uri format without hoisting ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=HasUrl
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=HasUrl
[WRAPPER-CHECK] typeNodeName="URL", isWrapperContext=false, type=URL
[CT-FORMATTER supportsType] nodeName="URL", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=URL
[0m[38;5;245m----- post-test output end -----[0m
    formats URL as string with uri format without hoisting ... [0m[32mok[0m [0m[38;5;245m(19ms)[0m
    formats Uint8Array as permissive true schema ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=BinaryHolder
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=BinaryHolder
[WRAPPER-CHECK] typeNodeName="Uint8Array", isWrapperContext=false, type=Uint8Array<ArrayBufferLike>
[CT-FORMATTER supportsType] nodeName="Uint8Array", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=Uint8Array<ArrayBufferLike>
[0m[38;5;245m----- post-test output end -----[0m
    formats Uint8Array as permissive true schema ... [0m[32mok[0m [0m[38;5;245m(14ms)[0m
    formats ArrayBuffer as permissive true schema ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=BufferHolder
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=BufferHolder
[WRAPPER-CHECK] typeNodeName="ArrayBuffer", isWrapperContext=false, type=ArrayBuffer
[CT-FORMATTER supportsType] nodeName="ArrayBuffer", isDefault=false, isAliasToDefault=false
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=ArrayBuffer
[0m[38;5;245m----- post-test output end -----[0m
    formats ArrayBuffer as permissive true schema ... [0m[32mok[0m [0m[38;5;245m(17ms)[0m
    collapses unions of native binary types ...
[0m[38;5;245m------- post-test output -------[0m
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=HasImage
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=HasImage
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string | ArrayBuffer | Uint8Array<ArrayBufferLike> | URL
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string | ArrayBuffer | Uint8Array<ArrayBufferLike> | URL
[WRAPPER-CHECK] typeNodeName="undefined", isWrapperContext=undefined, type=string
[CT-FORMATTER supportsType] wrapperInfo=undefined, type=string
[0m[38;5;245m----- post-test output end -----[0m
    collapses unions of native binary types ... [0m[32mok[0m [0m[38;5;245m(14ms)[0m
  built-in mappings ... [0m[32mok[0m [0m[38;5;245m(84ms)[0m
SchemaGenerator ... [0m[32mok[0m [0m[38;5;245m(241ms)[0m

[0m[1m[37m[41m ERRORS [0m

Schema fixtures ... wrapper-aliases [0m[38;5;245m=> https://jsr.io/@std/testing/1.0.15/_test_suite.ts:394:15[0m
[0m[1m[31merror[0m: NotFound: No such file or directory (os error 2): readfile '/Users/gideonwald/coding/common_tools_2/labs/packages/schema-generator/test/fixtures/schema/wrapper-aliases.expected.json'
    return await Deno.readTextFile(fixture.expectedPath);
[0m[31m                      ^[0m
    at [0m[1m[3mObject.readTextFile[0m ([0m[36mext:deno_fs/30_fs.js[0m:[0m[33m784[0m:[0m[33m24[0m)
    at [0m[1m[3mloadExpected[0m ([0m[36mfile:///Users/gideonwald/coding/common_tools_2/labs/packages/schema-generator/test/fixtures-runner.test.ts[0m:[0m[33m27[0m:[0m[33m23[0m)
    at [0m[1m[3mObject.<anonymous>[0m ([0m[36mfile:///Users/gideonwald/coding/common_tools_2/labs/packages/test-support/src/fixture-runner.ts[0m:[0m[33m240[0m:[0m[33m32[0m)
    at [0m[1m[3meventLoopTick[0m ([0m[36mext:core/01_core.js[0m:[0m[33m179[0m:[0m[33m7[0m)
    at async [0m[1m[3mTestSuiteInternal.runTest[0m ([0m[36mhttps://jsr.io/@std/testing/1.0.15/_test_suite.ts[0m:[0m[33m429[0m:[0m[33m7[0m)
    at async [0m[1m[3mTestSuiteInternal.runTest[0m ([0m[36mhttps://jsr.io/@std/testing/1.0.15/_test_suite.ts[0m:[0m[33m417[0m:[0m[33m9[0m)
    at async [0m[1m[3mfn[0m ([0m[36mhttps://jsr.io/@std/testing/1.0.15/_test_suite.ts[0m:[0m[33m378[0m:[0m[33m13[0m)

[0m[1m[37m[41m FAILURES [0m

Schema fixtures ... wrapper-aliases [0m[38;5;245m=> https://jsr.io/@std/testing/1.0.15/_test_suite.ts:394:15[0m

[0m[31mFAILED[0m | 16 passed (121 steps) | 1 failed (1 step) [0m[38;5;245m(5s)[0m

[0m[1m[31merror[0m: Test failed
