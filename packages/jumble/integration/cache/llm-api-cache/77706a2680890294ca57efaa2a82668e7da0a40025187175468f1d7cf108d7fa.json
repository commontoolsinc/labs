{
  "model": "anthropic:claude-3-7-sonnet-20250219",
  "system": "# React Component Builder\n\nCreate an interactive React component that fulfills the user's request. Focus on\ndelivering a clean, useful implementation with appropriate features.\n\n<meta>\n**This task is part of a 2-Phase Process.**\n\n1. First phase (already completed):\n   - Analyzed the user's request\n   - Created a detailed specification\n   - Generated a structured data schema\n\n2. Your job (second phase):\n   - Create a reactive UI component based on the provided specification and\n     schema\n   - Implement the UI exactly according to the specification\n   - Strictly adhere to the data schema provided\n     </meta>\n\n<requirements>\n- Define a title with `const title = 'Your App Name';`\n- Implement both `onLoad` and `onReady` functions\n- Use Tailwind CSS for styling with tasteful defaults\n- Do not write <svg> inline, use emoji for icons\n- Carefully avoid infinite loops and recursion that may cause performance issues\n</requirements>\n\n<code_structure>\n\n- React and ReactDOM are pre-imported - don't import them again\n- All React hooks must be namespaced (e.g., `React.useState`, `React.useEffect`)\n- Follow React hooks rules - never nest or conditionally call hooks\n- For form handling, use `onClick` handlers instead of `onSubmit`\n  </code_structure>\n\n<charm_api>\n\n- **useReactiveCell(keyPath: string[])** - Persistent data storage with reactive\n  updates\n- **generateText({ system, messages })** - Generate text via Large Language\n  Model\n- **generateObject({ system, messages })** - Generate JSON object via Large\n  Language Model\n- **readWebpage(url)** - Fetch and parse external web content\n- **generateImage(prompt)** - Create AI-generated images\n\n  <use_reactive_cell>\n  ## Important Note About useReactiveCell(keyPath: string[])\n  - **useReactiveCell is a React Hook** and must follow all React hook rules\n  - It should only be used for persistent state and must draw from the provided\n    schema\n    - For any ephemeral state, use `React.useState`\n  - Only call useReactiveCell at the top level of your React function components\n    or custom hooks\n  - Do not call useReactiveCell inside loops, conditions, or nested functions\n  - Do not call useReactiveCell directly inside the onReady function - it can\n    only be used inside React components\n  - The onReady function itself is not a React component and cannot use React\n    hooks directly\n  - Example of correct usage:\n    ```jsx\n    function onReady(mount, sourceData, modules) {\n      // This is NOT a React component, so do NOT use hooks here!\n\n      // Create a React component to use hooks properly:\n      function MyApp() {\n        // React hooks can be used here\n        const [data, setData] = useReactiveCell(\"myData\", defaultValue);\n        return <div>{/* your JSX */}</div>;\n      }\n\n      // Render the React component to the mount point\n      const root = ReactDOM.createRoot(mount);\n      root.render(<MyApp />);\n    }\n    ```\n  </use_reactive_cell> </charm_api>\n\n<importing_libraries>\n\n- Request additional libraries in `onLoad` by returning an array of module names\n- Available libraries:\n- imports : [object Object]\n- Only use the explicitly provided libraries </importing_libraries>\n\n<security>\n\n- Do not use browser dialog functions (`prompt()`, `alert()`, `confirm()`)\n- Avoid any methods that could compromise security or user experience\n\n</security>\n\n<schema description=\"The pre-generated schema this Charm operates on.\">\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"board\": {\n      \"type\": \"array\",\n      \"title\": \"Game Board\",\n      \"description\": \"4x4 grid representing the game board\",\n      \"default\": [\n        [\n          0,\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          0,\n          0,\n          0\n        ]\n      ],\n      \"items\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"integer\",\n          \"minimum\": 0\n        }\n      }\n    },\n    \"score\": {\n      \"type\": \"integer\",\n      \"title\": \"Current Score\",\n      \"description\": \"Player's current score in the game\",\n      \"default\": 0,\n      \"minimum\": 0\n    },\n    \"highScore\": {\n      \"type\": \"integer\",\n      \"title\": \"High Score\",\n      \"description\": \"Highest score achieved\",\n      \"default\": 0,\n      \"minimum\": 0\n    },\n    \"gameState\": {\n      \"type\": \"string\",\n      \"title\": \"Game State\",\n      \"description\": \"Current state of the game\",\n      \"default\": \"playing\",\n      \"enum\": [\n        \"playing\",\n        \"won\",\n        \"lost\"\n      ]\n    },\n    \"moves\": {\n      \"type\": \"integer\",\n      \"title\": \"Moves Count\",\n      \"description\": \"Number of moves made in the current game\",\n      \"default\": 0,\n      \"minimum\": 0\n    }\n  },\n  \"title\": \"2048 Game Board\",\n  \"description\": \"A game charm to play the classic 2048 sliding tile puzzle.\"\n}\n</schema>\n\n<guide>\n# SDK Usage Guide\n\n<persistent-reactive-state>\n## 1. `useReactiveCell` Hook\n\nThe `useReactiveCell` hook binds to a reactive cell given a key path and returns\na tuple `[doc, setDoc]`:\n\nAny keys from the view-model-schema are valid for useReactiveCell, any other\nkeys will fail. Provide a default as the second argument, **do not set an\ninitial value explicitly**.\n\nFor this schema:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"counter\": {\n      \"type\": \"number\"\n    },\n    \"title\": {\n      \"type\": \"string\",\n      \"default\": \"My Counter App\"\n    }\n  }\n}\n```\n\n```jsx\nfunction CounterComponent() {\n  // Correct: useReactiveCell called at top level of component\n  const [counter, setCounter] = useReactiveCell(\"counter\");\n  const [maxValue, setMaxValue] = useReactiveCell([\"settings\", \"maxValue\"]);\n\n  const onIncrement = useCallback(() => {\n    // writing to the cell automatically triggers a re-render\n    setCounter(counter + 1);\n  }, [counter]);\n\n  return (\n    <button onClick={onIncrement}>\n      Increment\n    </button>\n  );\n}\n```\n\n</persistent-reactive-state>\n\n<generating_content> Several APIs exist for generating text, JSON or image urls.\n\n<text>\n`generateText({ system, messages}): Promise<string>`\n\n```jsx\nasync function fetchLLMResponse() {\n  const result = await generateText({\n    system: \"Translate all the messages to emojis, reply in JSON.\",\n    messages: [\"Hi\", \"How can I help you today?\", \"tell me a joke\"],\n  });\n  console.log(\"LLM responded:\", result);\n}\n```\n\n</text>\n\n<json>\n\n`window.generateObject({ system, messages }): Promise<object>`\n\nYou must give the exact schema of the response in the prompt.\n\nFor example: \"Generate a traditional Vietnamese recipe in JSON format, with the\nfollowing properties: name (string), ingredients (array of strings),\ninstructions (array of strings)\"\n\n`generateObject` returns a parsed object already, or `undefined`. Be defensive\nworking with the response, the LLM may make mistakes.\n\n<example>\n```jsx\nconst promptPayload = ;\nconst result = await generateObject({\n  system: 'Translate all the messages to emojis, reply in JSON with the following properties: an array of objects, each with original_text (string), emoji_translation (string)',\n  messages: ['Hi', 'How can I help you today?', 'tell me a joke'],\n});\nconsole.log('JSON response from llm:', result);\n\n// [ // { // \"original_text\": \"Hi\", // \"emoji_translation\": \"üëã\" // }, // { //\n\"original_text\": \"How can I help you today?\", // \"emoji_translation\":\n\"ü§î‚ùìüôã‚Äç‚ôÇÔ∏èüìÖ\" // }, // { // \"original_text\": \"tell me a joke\", //\n\"emoji_translation\": \"üó£Ô∏èüëâüòÇ\" // } // ]\n\n````\n</example>\n\n<example>\nNOTE: Language model requests are globally cached based on your prompt.\nThis means that identical requests will return the same result. If your llm use\nrequires unique results on every request, make sure to introduce a cache-breaking\nstring such as a timestamp or incrementing number/id.\n\n```jsx\n// To avoid the cache we'll use a cache-busting string.\nconst cacheBreaker = Date.now();\n\nconst result = await generateObject({\n  system: \"You are a professional chef specializing in Mexican cuisine. Generate a detailed, authentic Mexican recipe in JSON format with the following properties: title (string), ingredients (array of strings), instructions (array of strings), prepTime (integer in minutes), cookTime (integer in minutes)\",\n  messages: [\"give me something spicy!\" + \" \" + cacheBreaker],\n});\nconsole.log('JSON response from llm:', result);\n\n// {\n//     \"title\": \"Camarones a la Diabla (Devil Shrimp)\",\n//     \"ingredients\": [\n//         \"1.5 lbs Large Shrimp, peeled and deveined\",\n//         \"4 tbsp Olive Oil\",\n//         \"1 medium White Onion, finely chopped\",\n//         \"4 cloves Garlic, minced\",\n//         \"2-3 Habanero Peppers, finely chopped (adjust to your spice preference, remove seeds for less heat)\",\n//         \"1 (28 oz) can Crushed Tomatoes\",\n//         \"1/2 cup Chicken Broth\",\n//         \"2 tbsp Tomato Paste\",\n//         \"1 tbsp Apple Cider Vinegar\",\n//         \"1 tbsp Dried Oregano\",\n//         \"1 tsp Cumin\",\n//         \"1/2 tsp Smoked Paprika\",\n//         \"1/4 tsp Ground Cloves\",\n//         \"Salt and Black Pepper to taste\",\n//         \"Fresh Cilantro, chopped, for garnish\",\n//         \"Lime wedges, for serving\"\n//     ],\n//     \"instructions\": [\n//         \"In a large bowl, toss the shrimp with salt and pepper.\",\n//         \"Heat the olive oil in a large skillet or Dutch oven over medium-high heat.\",\n//         \"Add the onion and cook until softened, about 5 minutes.\",\n//         \"Add the garlic and habanero peppers and cook for 1 minute more, until fragrant.\",\n//         \"Stir in the crushed tomatoes, chicken broth, tomato paste, apple cider vinegar, oregano, cumin, smoked paprika, and cloves.\",\n//         \"Bring the sauce to a simmer and cook for 15 minutes, stirring occasionally, until slightly thickened.\",\n//         \"Add the shrimp to the sauce and cook for 3-5 minutes, or until the shrimp are pink and cooked through.\",\n//         \"Taste and adjust seasoning with salt and pepper as needed.\",\n//         \"Garnish with fresh cilantro and serve immediately with lime wedges. Serve with rice or tortillas.\"\n//     ],\n//     \"prepTime\": 20,\n//     \"cookTime\": 30\n// }\n````\n\n</example>\n\n</json>\n\n<images>\n\nSynchronous, generates a URL that will load the image.\n\n```jsx\nfunction ImageComponent() {\n  return (\n    <img\n      src={generateImageUrl(\"A beautiful sunset over mountains\")}\n      alt=\"Generated landscape\"\n    />\n  );\n}\n```\n\n</images>\n</generating_content>\n\n<fetching_content> `readWebpage(url: string): Promise<string>` Returns markdown\nformat.\n\n```jsx\nasync function fetchFromUrl() {\n  const url = \"https://twopm.studio\";\n  const result = await readWebpage(url);\n  console.log(\"Markdown:\", result.content);\n}\n```\n\n</fetching_content>\n\n<code_structure> All generated code must follow this pattern:\n\n```jsx\n// Import from modern ESM libraries:\n////   - react\n//   - react-dom\n//   - react-dom/client\n//   - d3\n//   - moment\n//   - marked\n//   - @react-spring/web\n//   - @use-gesture/react\n//   - uuid\n//   - tone\nfunction onLoad() {\n  return [\"@react-spring/web\"]; // Request the modules you need\n}\n\nconst title = \"My ESM App\";\nfunction ImageComponent({ url }) {\n  return <img src={url} alt=\"Generated landscape\" />;\n}\n\nfunction MyComponent({ label, description }) {\n  return (\n    <div>\n      <h2>{label}</h2>\n      <p>{description}</p>\n      <ImageComponent\n        url={generateImage(\"A beautiful sunset over mountains\")}\n      />\n    </div>\n  );\n}\n\nfunction TodoItem({ todo, onToggle, onDelete }) {\n  return (\n    <div className=\"flex items-center p-2 border-b\">\n      <input\n        type=\"checkbox\"\n        checked={todo.completed}\n        onChange={onToggle}\n        className=\"mr-2\"\n      />\n      <span\n        className={`flex-grow \\${todo.completed ? 'line-through text-gray-500' : ''}`}\n      >\n        {todo.text}\n      </span>\n      <button\n        onClick={onDelete}\n        className=\"px-2 py-1 bg-red-500 text-white rounded\"\n      >\n        Delete\n      </button>\n    </div>\n  );\n}\n\nfunction TodoList({ todo, setTodos }) {\n  const [newTodo, setNewTodo] = React.useState(\"\");\n\n  const addTodo = () => {\n    if (newTodo.trim() === \"\") return;\n\n    const newTodoItem = {\n      id: Date.now(),\n      text: newTodo,\n      completed: false,\n    };\n\n    setTodos([...todos, newTodoItem]);\n    setNewTodo(\"\");\n  };\n\n  const toggleTodo = (id) => {\n    setTodos(\n      todos.map((todo) =>\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\n      ),\n    );\n  };\n\n  const deleteTodo = (id) => {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto mt-4 p-4 bg-white rounded shadow\">\n      <h2 className=\"text-xl font-bold mb-4\">Todo List</h2>\n\n      <div className=\"flex mb-4\">\n        <input\n          type=\"text\"\n          value={newTodo}\n          onChange={(e) => setNewTodo(e.target.value)}\n          placeholder=\"Add a new todo\"\n          className=\"flex-grow p-2 border rounded-l\"\n        />\n        <button\n          onClick={addTodo}\n          className=\"px-4 py-2 bg-blue-500 text-white rounded-r\"\n        >\n          Add\n        </button>\n      </div>\n\n      <div className=\"border rounded\">\n        {todos.length > 0\n          ? (\n            todos.map((todo) => (\n              <TodoItem\n                key={todo.id}\n                todo={todo}\n                onToggle={() => toggleTodo(todo.id)}\n                onDelete={() => deleteTodo(todo.id)}\n              />\n            ))\n          )\n          : <p className=\"p-2 text-center text-gray-500\">No todos yet!</p>}\n      </div>\n    </div>\n  );\n}\n\n// Main application code with modules passed as third parameter\nfunction onReady(mount, sourceData, libs) {\n  const { useState, useEffect } = React; // React is available globally\n  const { useSpring, animated } = libs[\"@react-spring/web\"]; // Access imported module\n\n  function MyApp() {\n    const [count, setCount] = useReactiveCell(\"count\");\n    const [todos, setTodos] = useReactiveCell(\"todos\");\n\n    const props = useSpring({\n      from: { opacity: 0 },\n      to: { opacity: 1 },\n    });\n\n    return (\n      <div className=\"p-4\">\n        <animated.div style={props}>\n          <button\n            className=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded\"\n            onClick={() => setCount(count + 1)}\n          >\n            Clicks: {count}\n          </button>\n        </animated.div>\n        <TodoList todos={todos} setTodos={setTodos} />\n      </div>\n    );\n  }\n\n  // Use the client API for React 18\n  const root = ReactDOM.createRoot(mount);\n  root.render(<MyApp />);\n}\n```\n\n</guide>\n",
  "messages": [
    {
      "role": "user",
      "content": "The user asked you to create the source code with the following specification:\n```\n<REQUEST>\n<goal>2048 game</goal>\n\n<description>Create a üéÆ 2048 game charm with a grid-based UI, sliding tile mechanics, and score tracking. The charm will need a game board, tile merging logic, and win/lose conditions. Could add üèÜ high score tracking and üîÑ game reset functionality.</description>\n</REQUEST>\n<PLAN>1. Implement the game board with a 4x4 grid and initialize with two random tiles (value 2 or 4).\n2. Create sliding and merging logic for the four directional moves.\n3. Add score tracking, win/lose detection, and game reset functionality.</PLAN>\n<SPEC>The 2048 game features a 4x4 grid where tiles with powers of 2 can be slid and merged. Players can move tiles in four directions (up, down, left, right), with identical tiles merging into a tile of double value when they collide. The game tracks the current score, which increases when tiles merge, and ends when either a 2048 tile is created (win) or no more moves are possible (lose).</SPEC>\n```"
    },
    {
      "role": "assistant",
      "content": "\nfunction onLoad() {\n  return [];\n}\n\nconst title = '2048 Game';\n\n// Game logic utilities\nconst getEmptyPositions = (board) => {\n  const emptyPositions = [];\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (board[i][j] === 0) {\n        emptyPositions.push({ row: i, col: j });\n      }\n    }\n  }\n  return emptyPositions;\n};\n\nconst addRandomTile = (board) => {\n  const newBoard = JSON.parse(JSON.stringify(board));\n  const emptyPositions = getEmptyPositions(newBoard);\n  \n  if (emptyPositions.length > 0) {\n    const { row, col } = emptyPositions[Math.floor(Math.random() * emptyPositions.length)];\n    newBoard[row][col] = Math.random() < 0.9 ? 2 : 4;\n  }\n  \n  return newBoard;\n};\n\nconst initializeBoard = () => {\n  let board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0]\n  ];\n  \n  board = addRandomTile(board);\n  board = addRandomTile(board);\n  \n  return board;\n};\n\nconst moveLeft = (board) => {\n  const newBoard = JSON.parse(JSON.stringify(board));\n  let score = 0;\n  let moved = false;\n  \n  for (let i = 0; i < 4; i++) {\n    let row = newBoard[i].filter(cell => cell !== 0);\n    let j = 0;\n    \n    while (j < row.length - 1) {\n      if (row[j] === row[j + 1]) {\n        row[j] *= 2;\n        score += row[j];\n        row.splice(j + 1, 1);\n        moved = true;\n      }\n      j++;\n    }\n    \n    // Pad with zeros\n    while (row.length < 4) {\n      row.push(0);\n    }\n    \n    // Check if the row has changed\n    if (JSON.stringify(newBoard[i]) !== JSON.stringify(row)) {\n      moved = true;\n    }\n    \n    newBoard[i] = row;\n  }\n  \n  return { board: newBoard, score, moved };\n};\n\nconst moveRight = (board) => {\n  const newBoard = JSON.parse(JSON.stringify(board));\n  let score = 0;\n  let moved = false;\n  \n  for (let i = 0; i < 4; i++) {\n    let row = newBoard[i].filter(cell => cell !== 0);\n    let j = row.length - 1;\n    \n    while (j > 0) {\n      if (row[j] === row[j - 1]) {\n        row[j] *= 2;\n        score += row[j];\n        row.splice(j - 1, 1);\n        moved = true;\n        j--;\n      }\n      j--;\n    }\n    \n    // Pad with zeros\n    while (row.length < 4) {\n      row.unshift(0);\n    }\n    \n    // Check if the row has changed\n    if (JSON.stringify(newBoard[i]) !== JSON.stringify(row)) {\n      moved = true;\n    }\n    \n    newBoard[i] = row;\n  }\n  \n  return { board: newBoard, score, moved };\n};\n\nconst moveUp = (board) => {\n  const newBoard = JSON.parse(JSON.stringify(board));\n  let score = 0;\n  let moved = false;\n  \n  for (let j = 0; j < 4; j++) {\n    let column = [];\n    for (let i = 0; i < 4; i++) {\n      if (newBoard[i][j] !== 0) {\n        column.push(newBoard[i][j]);\n      }\n    }\n    \n    let i = 0;\n    while (i < column.length - 1) {\n      if (column[i] === column[i + 1]) {\n        column[i] *= 2;\n        score += column[i];\n        column.splice(i + 1, 1);\n        moved = true;\n      }\n      i++;\n    }\n    \n    // Pad with zeros\n    while (column.length < 4) {\n      column.push(0);\n    }\n    \n    // Check if the column has changed\n    let originalColumn = [];\n    for (let i = 0; i < 4; i++) {\n      originalColumn.push(newBoard[i][j]);\n    }\n    \n    if (JSON.stringify(originalColumn) !== JSON.stringify(column)) {\n      moved = true;\n    }\n    \n    // Update the board\n    for (let i = 0; i < 4; i++) {\n      newBoard[i][j] = column[i];\n    }\n  }\n  \n  return { board: newBoard, score, moved };\n};\n\nconst moveDown = (board) => {\n  const newBoard = JSON.parse(JSON.stringify(board));\n  let score = 0;\n  let moved = false;\n  \n  for (let j = 0; j < 4; j++) {\n    let column = [];\n    for (let i = 0; i < 4; i++) {\n      if (newBoard[i][j] !== 0) {\n        column.push(newBoard[i][j]);\n      }\n    }\n    \n    let i = column.length - 1;\n    while (i > 0) {\n      if (column[i] === column[i - 1]) {\n        column[i] *= 2;\n        score += column[i];\n        column.splice(i - 1, 1);\n        moved = true;\n        i--;\n      }\n      i--;\n    }\n    \n    // Pad with zeros\n    while (column.length < 4) {\n      column.unshift(0);\n    }\n    \n    // Check if the column has changed\n    let originalColumn = [];\n    for (let i = 0; i < 4; i++) {\n      originalColumn.push(newBoard[i][j]);\n    }\n    \n    if (JSON.stringify(originalColumn) !== JSON.stringify(column)) {\n      moved = true;\n    }\n    \n    // Update the board\n    for (let i = 0; i < 4; i++) {\n      newBoard[i][j] = column[i];\n    }\n  }\n  \n  return { board: newBoard, score, moved };\n};\n\nconst hasWon = (board) => {\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (board[i][j] === 2048) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nconst canMove = (board) => {\n  // Check for empty cells\n  if (getEmptyPositions(board).length > 0) {\n    return true;\n  }\n  \n  // Check for possible merges horizontally\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 3; j++) {\n      if (board[i][j] === board[i][j + 1]) {\n        return true;\n      }\n    }\n  }\n  \n  // Check for possible merges vertically\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (board[i][j] === board[i + 1][j]) {\n        return true;\n      }\n    }\n  }\n  \n  return false;\n};\n\n// React Components\nfunction Tile({ value }) {\n  const tileColors = {\n    0: 'bg-gray-200',\n    2: 'bg-gray-100 text-gray-800',\n    4: 'bg-yellow-100 text-gray-800',\n    8: 'bg-yellow-200 text-white',\n    16: 'bg-yellow-300 text-white',\n    32: 'bg-orange-300 text-white',\n    64: 'bg-orange-400 text-white',\n    128: 'bg-orange-500 text-white',\n    256: 'bg-red-400 text-white',\n    512: 'bg-red-500 text-white',\n    1024: 'bg-red-600 text-white',\n    2048: 'bg-yellow-500 text-white',\n  };\n  \n  const fontSize = value > 512 ? 'text-xl' : value > 64 ? 'text-2xl' : 'text-3xl';\n  \n  return (\n    <div className={`flex items-center justify-center w-16 h-16 rounded-md font-bold ${fontSize} ${tileColors[value] || 'bg-gray-800 text-white'}`}>\n      {value !== 0 ? value : ''}\n    </div>\n  );\n}\n\nfunction GameBoard({ board }) {\n  return (\n    <div className=\"grid grid-cols-4 gap-2 bg-gray-300 p-2 rounded-md\">\n      {board.flat().map((value, index) => (\n        <Tile key={index} value={value} />\n      ))}\n    </div>\n  );\n}\n\nfunction GameControls({ onNewGame }) {\n  return (\n    <div className=\"flex justify-between items-center mb-4\">\n      <h1 className=\"text-3xl font-bold\">2048</h1>\n      <button \n        onClick={onNewGame}\n        className=\"px-4 py-2 bg-orange-500 text-white rounded-md hover:bg-orange-600 transition-colors\"\n      >\n        New Game üîÑ\n      </button>\n    </div>\n  );\n}\n\nfunction ScoreBoard({ score, highScore, moves }) {\n  return (\n    <div className=\"flex justify-between mb-4\">\n      <div className=\"bg-gray-200 rounded-md p-2 w-28 text-center\">\n        <div className=\"text-sm text-gray-600\">SCORE</div>\n        <div className=\"text-xl font-bold\">{score}</div>\n      </div>\n      <div className=\"bg-gray-200 rounded-md p-2 w-28 text-center\">\n        <div className=\"text-sm text-gray-600\">BEST</div>\n        <div className=\"text-xl font-bold\">{highScore}</div>\n      </div>\n      <div className=\"bg-gray-200 rounded-md p-2 w-28 text-center\">\n        <div className=\"text-sm text-gray-600\">MOVES</div>\n        <div className=\"text-xl font-bold\">{moves}</div>\n      </div>\n    </div>\n  );\n}\n\nfunction GameOverModal({ gameState, score, onNewGame }) {\n  if (gameState === 'playing') return null;\n  \n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-10\">\n      <div className=\"bg-white p-6 rounded-lg text-center max-w-sm\">\n        <h2 className=\"text-2xl font-bold mb-4\">\n          {gameState === 'won' ? 'üéâ You Won!' : 'üò¢ Game Over!'}\n        </h2>\n        <p className=\"mb-4\">Your score: <span className=\"font-bold\">{score}</span></p>\n        <button \n          onClick={onNewGame}\n          className=\"px-4 py-2 bg-orange-500 text-white rounded-md hover:bg-orange-600 transition-colors\"\n        >\n          Play Again\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction Instructions() {\n  return (\n    <div className=\"mt-4 text-gray-600\">\n      <p className=\"mb-2\"><strong>How to play:</strong> Use arrow keys to move tiles. When two tiles with the same number touch, they merge into one!</p>\n      <div className=\"flex justify-center space-x-2 mt-2\">\n        <div className=\"bg-gray-200 p-2 rounded\">‚¨ÜÔ∏è</div>\n        <div className=\"bg-gray-200 p-2 rounded\">‚¨ÖÔ∏è</div>\n        <div className=\"bg-gray-200 p-2 rounded\">‚¨áÔ∏è</div>\n        <div className=\"bg-gray-200 p-2 rounded\">‚û°Ô∏è</div>\n      </div>\n    </div>\n  );\n}\n\nfunction Game2048() {\n  const [board, setBoard] = useReactiveCell(['board']);\n  const [score, setScore] = useReactiveCell(['score']);\n  const [highScore, setHighScore] = useReactiveCell(['highScore']);\n  const [gameState, setGameState] = useReactiveCell(['gameState']);\n  const [moves, setMoves] = useReactiveCell(['moves']);\n  \n  const handleKeyDown = React.useCallback((e) => {\n    if (gameState !== 'playing') return;\n    \n    let result;\n    \n    switch (e.key) {\n      case 'ArrowLeft':\n        result = moveLeft(board);\n        break;\n      case 'ArrowRight':\n        result = moveRight(board);\n        break;\n      case 'ArrowUp':\n        result = moveUp(board);\n        break;\n      case 'ArrowDown':\n        result = moveDown(board);\n        break;\n      default:\n        return;\n    }\n    \n    if (result.moved) {\n      const newBoard = addRandomTile(result.board);\n      setBoard(newBoard);\n      setScore(score + result.score);\n      setMoves(moves + 1);\n      \n      if (score + result.score > highScore) {\n        setHighScore(score + result.score);\n      }\n      \n      if (hasWon(newBoard)) {\n        setGameState('won');\n      } else if (!canMove(newBoard)) {\n        setGameState('lost');\n      }\n    }\n  }, [board, score, highScore, gameState, moves, setBoard, setScore, setHighScore, setGameState, setMoves]);\n  \n  React.useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n  \n  const startNewGame = () => {\n    setBoard(initializeBoard());\n    setScore(0);\n    setMoves(0);\n    setGameState('playing');\n  };\n  \n  // Initialize the game if the board is empty\n  React.useEffect(() => {\n    if (board.flat().every(cell => cell === 0)) {\n      startNewGame();\n    }\n  }, [board]);\n  \n  return (\n    <div className=\"max-w-md mx-auto p-4\">\n      <GameControls onNewGame={startNewGame} />\n      <ScoreBoard score={score} highScore={highScore} moves={moves} />\n      <GameBoard board={board} />\n      <Instructions />\n      <GameOverModal gameState={gameState} score={score} onNewGame={startNewGame} />\n    </div>\n  );\n}\n\nfunction onReady(mount, sourceData) {\n  const root = ReactDOM.createRoot(mount);\n  root.render(<Game2048 />);\n}\n```"
    }
  ],
  "stop": "\n```",
  "maxTokens": 64000
}