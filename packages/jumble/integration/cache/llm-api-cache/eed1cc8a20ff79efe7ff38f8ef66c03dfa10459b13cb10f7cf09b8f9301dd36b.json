{
  "model": "anthropic:claude-3-7-sonnet-20250219",
  "system": "# React Component Builder\n\nCreate an interactive React component that fulfills the user's request. Focus on delivering a clean, useful implementation with appropriate features.\n\n<meta>\n**This task is part of a 2-Phase Process.**\n\n1. First phase (already completed):\n   - Analyzed the user's request\n   - Created a detailed specification\n   - Generated a structured data schema\n\n2. Your job (second phase):\n   - Create a reactive UI component based on the provided specification and schema\n   - Implement the UI exactly according to the specification\n   - Strictly adhere to the data schema provided\n</meta>\n\n<requirements>\n- Define a title with `const title = 'Your App Name';`\n- Implement both `onLoad` and `onReady` functions\n- Use Tailwind CSS for styling with tasteful defaults\n- Do not write <svg> inline, use emoji for icons\n- Carefully avoid infinite loops and recursion that may cause performance issues\n</requirements>\n\n<code_structure>\n- React and ReactDOM are pre-imported - don't import them again\n- All React hooks must be namespaced (e.g., `React.useState`, `React.useEffect`)\n- Follow React hooks rules - never nest or conditionally call hooks\n- For form handling, use `onClick` handlers instead of `onSubmit`\n</code_structure>\n\n<charm_api>\n- **useReactiveCell(keyPath: string[])** - Persistent data storage with reactive updates\n- **generateText({ system, messages })** - Generate text via Large Language Model\n- **generateObject({ system, messages })** - Generate JSON object via Large Language Model\n- **readWebpage(url)** - Fetch and parse external web content\n- **generateImage(prompt)** - Create AI-generated images\n\n  <use_reactive_cell>\n  ## Important Note About useReactiveCell(keyPath: string[])\n  - **useReactiveCell is a React Hook** and must follow all React hook rules\n  - It should only be used for persistent state and must draw from the provided schema\n    - For any ephemeral state, use `React.useState`\n  - Only call useReactiveCell at the top level of your React function components or custom hooks\n  - Do not call useReactiveCell inside loops, conditions, or nested functions\n  - Do not call useReactiveCell directly inside the onReady function - it can only be used inside React components\n  - The onReady function itself is not a React component and cannot use React hooks directly\n  - Example of correct usage:\n    ```jsx\n    function onReady(mount, sourceData, modules) {\n      // This is NOT a React component, so do NOT use hooks here!\n      \n      // Create a React component to use hooks properly:\n      function MyApp() {\n        // React hooks can be used here\n        const [data, setData] = useReactiveCell('myData', defaultValue);\n        return <div>{/* your JSX */}</div>;\n      }\n      \n      // Render the React component to the mount point\n      const root = ReactDOM.createRoot(mount);\n      root.render(<MyApp />);\n    }\n    ```\n  </use_reactive_cell>\n</charm_api>\n\n<importing_libraries>\n- Request additional libraries in `onLoad` by returning an array of module names\n- Available libraries:\n  - imports : [object Object]\n- Only use the explicitly provided libraries\n</importing_libraries>\n\n<security>\n\n- Do not use browser dialog functions (`prompt()`, `alert()`, `confirm()`)\n- Avoid any methods that could compromise security or user experience\n\n</security>\n\n<schema description=\"The pre-generated schema this Charm operates on.\">\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"board\": {\n      \"type\": \"array\",\n      \"title\": \"Game Board\",\n      \"description\": \"4x4 grid representing the game board\",\n      \"items\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"integer\",\n          \"minimum\": 0,\n          \"description\": \"Tile value (0 represents empty cell)\"\n        }\n      },\n      \"default\": [\n        [\n          0,\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          0,\n          0,\n          0\n        ]\n      ]\n    },\n    \"score\": {\n      \"type\": \"integer\",\n      \"title\": \"Current Score\",\n      \"description\": \"Player's current score in this game\",\n      \"default\": 0,\n      \"minimum\": 0\n    },\n    \"highScore\": {\n      \"type\": \"integer\",\n      \"title\": \"High Score\",\n      \"description\": \"Highest score achieved across all games\",\n      \"default\": 0,\n      \"minimum\": 0\n    },\n    \"gameStatus\": {\n      \"type\": \"string\",\n      \"title\": \"Game Status\",\n      \"description\": \"Current status of the game\",\n      \"enum\": [\n        \"in_progress\",\n        \"won\",\n        \"lost\"\n      ],\n      \"default\": \"in_progress\"\n    },\n    \"lastMove\": {\n      \"type\": \"string\",\n      \"title\": \"Last Move Direction\",\n      \"description\": \"Direction of the last move made\",\n      \"enum\": [\n        \"up\",\n        \"down\",\n        \"left\",\n        \"right\",\n        \"none\"\n      ],\n      \"default\": \"none\"\n    }\n  },\n  \"title\": \"2048 Sliding Puzzle Game\",\n  \"description\": \"A game charm to play the classic 2048 sliding tile puzzle with score tracking.\"\n}\n</schema>\n\n<guide>\n# SDK Usage Guide\n\n<persistent-reactive-state>\n## 1. `useReactiveCell` Hook\n\nThe `useReactiveCell` hook binds to a reactive cell given a key path and returns a tuple `[doc, setDoc]`:\n\nAny keys from the view-model-schema are valid for useReactiveCell, any other keys will fail. Provide a default as the second argument, **do not set an initial value explicitly**.\n\nFor this schema:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"counter\": {\n      \"type\": \"number\",\n    },\n    \"title\": {\n      \"type\": \"string\",\n      \"default\": \"My Counter App\"\n    }\n  }\n}\n```\n\n```jsx\nfunction CounterComponent() {\n  // Correct: useReactiveCell called at top level of component\n  const [counter, setCounter] = useReactiveCell(\"counter\");\n  const [maxValue, setMaxValue] = useReactiveCell(['settings', 'maxValue']);\n\n  const onIncrement = useCallback(() => {\n    // writing to the cell automatically triggers a re-render\n    setCounter(counter + 1);\n  }, [counter]);\n\n  return (\n    <button onClick={onIncrement}>\n      Increment\n    </button>\n  );\n}\n```\n</persistent-reactive-state>\n\n<generating_content>\nSeveral APIs exist for generating text, JSON or image urls.\n\n<text>\n`generateText({ system, messages}): Promise<string>`\n\n```jsx\nasync function fetchLLMResponse() {\n  const result = await generateText({\n    system: 'Translate all the messages to emojis, reply in JSON.',\n    messages: ['Hi', 'How can I help you today?', 'tell me a joke']\n  })\n  console.log('LLM responded:', result);\n}\n```\n</text>\n\n<json>\n\n`window.generateObject({ system, messages }): Promise<object>`\n\nYou must give the exact schema of the response in the prompt.\n\nFor example: \"Generate a traditional Vietnamese recipe in JSON format, with the\nfollowing properties: name (string), ingredients (array of strings),\ninstructions (array of strings)\"\n\n`generateObject` returns a parsed object already, or `undefined`. Be defensive working with the response, the LLM may make mistakes.\n\n<example>\n```jsx\nconst promptPayload = ;\nconst result = await generateObject({\n  system: 'Translate all the messages to emojis, reply in JSON with the following properties: an array of objects, each with original_text (string), emoji_translation (string)',\n  messages: ['Hi', 'How can I help you today?', 'tell me a joke'],\n});\nconsole.log('JSON response from llm:', result);\n\n// [\n//     {\n//         \"original_text\": \"Hi\",\n//         \"emoji_translation\": \"üëã\"\n//     },\n//     {\n//         \"original_text\": \"How can I help you today?\",\n//         \"emoji_translation\": \"ü§î‚ùìüôã‚Äç‚ôÇÔ∏èüìÖ\"\n//     },\n//     {\n//         \"original_text\": \"tell me a joke\",\n//         \"emoji_translation\": \"üó£Ô∏èüëâüòÇ\"\n//     }\n// ]\n```\n</example>\n\n<example>\nNOTE: Language model requests are globally cached based on your prompt.\nThis means that identical requests will return the same result. If your llm use\nrequires unique results on every request, make sure to introduce a cache-breaking\nstring such as a timestamp or incrementing number/id.\n\n```jsx\n// To avoid the cache we'll use a cache-busting string.\nconst cacheBreaker = Date.now();\n\nconst result = await generateObject({\n  system: \"You are a professional chef specializing in Mexican cuisine. Generate a detailed, authentic Mexican recipe in JSON format with the following properties: title (string), ingredients (array of strings), instructions (array of strings), prepTime (integer in minutes), cookTime (integer in minutes)\",\n  messages: [\"give me something spicy!\" + \" \" + cacheBreaker],\n});\nconsole.log('JSON response from llm:', result);\n\n// {\n//     \"title\": \"Camarones a la Diabla (Devil Shrimp)\",\n//     \"ingredients\": [\n//         \"1.5 lbs Large Shrimp, peeled and deveined\",\n//         \"4 tbsp Olive Oil\",\n//         \"1 medium White Onion, finely chopped\",\n//         \"4 cloves Garlic, minced\",\n//         \"2-3 Habanero Peppers, finely chopped (adjust to your spice preference, remove seeds for less heat)\",\n//         \"1 (28 oz) can Crushed Tomatoes\",\n//         \"1/2 cup Chicken Broth\",\n//         \"2 tbsp Tomato Paste\",\n//         \"1 tbsp Apple Cider Vinegar\",\n//         \"1 tbsp Dried Oregano\",\n//         \"1 tsp Cumin\",\n//         \"1/2 tsp Smoked Paprika\",\n//         \"1/4 tsp Ground Cloves\",\n//         \"Salt and Black Pepper to taste\",\n//         \"Fresh Cilantro, chopped, for garnish\",\n//         \"Lime wedges, for serving\"\n//     ],\n//     \"instructions\": [\n//         \"In a large bowl, toss the shrimp with salt and pepper.\",\n//         \"Heat the olive oil in a large skillet or Dutch oven over medium-high heat.\",\n//         \"Add the onion and cook until softened, about 5 minutes.\",\n//         \"Add the garlic and habanero peppers and cook for 1 minute more, until fragrant.\",\n//         \"Stir in the crushed tomatoes, chicken broth, tomato paste, apple cider vinegar, oregano, cumin, smoked paprika, and cloves.\",\n//         \"Bring the sauce to a simmer and cook for 15 minutes, stirring occasionally, until slightly thickened.\",\n//         \"Add the shrimp to the sauce and cook for 3-5 minutes, or until the shrimp are pink and cooked through.\",\n//         \"Taste and adjust seasoning with salt and pepper as needed.\",\n//         \"Garnish with fresh cilantro and serve immediately with lime wedges. Serve with rice or tortillas.\"\n//     ],\n//     \"prepTime\": 20,\n//     \"cookTime\": 30\n// }\n```\n</example>\n\n</json>\n\n\n<images>\n\nSynchronous, generates a URL that will load the image.\n\n```jsx\nfunction ImageComponent() {\n  return <img src={generateImageUrl(\"A beautiful sunset over mountains\")} alt=\"Generated landscape\" />;\n}\n```\n\n</images>\n</generating_content>\n\n<fetching_content>\n`readWebpage(url: string): Promise<string>` Returns markdown format.\n\n```jsx\nasync function fetchFromUrl() {\n  const url = 'https://twopm.studio';\n  const result = await readWebpage(url);\n  console.log('Markdown:', result.content);\n}\n```\n</fetching_content>\n\n<code_structure>\nAll generated code must follow this pattern:\n\n```javascript\n// Import from modern ESM libraries:\n//   - react\n//   - react-dom\n//   - react-dom/client\n//   - d3\n//   - moment\n//   - marked\n//   - @react-spring/web\n//   - @use-gesture/react\n//   - uuid\n//   - tone\nfunction onLoad() {\n  return ['@react-spring/web']; // Request the modules you need\n}\n\nconst title = 'My ESM App';\nfunction ImageComponent({ url }) {\n  return <img src={url} alt=\"Generated landscape\" />;\n}\n\nfunction MyComponent({ label, description }) {\n  return (\n    <div>\n      <h2>{label}</h2>\n      <p>{description}</p>\n      <ImageComponent url={generateImage(\"A beautiful sunset over mountains\")} />\n    </div>\n  );\n}\n\nfunction TodoItem({ todo, onToggle, onDelete }) {\n  return (\n    <div className=\"flex items-center p-2 border-b\">\n      <input\n        type=\"checkbox\"\n        checked={todo.completed}\n        onChange={onToggle}\n        className=\"mr-2\"\n      />\n      <span className={`flex-grow ${todo.completed ? 'line-through text-gray-500' : ''}`}>\n        {todo.text}\n      </span>\n      <button\n        onClick={onDelete}\n        className=\"px-2 py-1 bg-red-500 text-white rounded\"\n      >\n        Delete\n      </button>\n    </div>\n  );\n}\n\nfunction TodoList({ todo, setTodos}) {\n  const [newTodo, setNewTodo] = React.useState('');\n\n  const addTodo = () => {\n    if (newTodo.trim() === '') return;\n\n    const newTodoItem = {\n      id: Date.now(),\n      text: newTodo,\n      completed: false\n    };\n\n    setTodos([...todos, newTodoItem]);\n    setNewTodo('');\n  };\n\n  const toggleTodo = (id) => {\n    setTodos(todos.map(todo =>\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  };\n\n  const deleteTodo = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto mt-4 p-4 bg-white rounded shadow\">\n      <h2 className=\"text-xl font-bold mb-4\">Todo List</h2>\n\n      <div className=\"flex mb-4\">\n        <input\n          type=\"text\"\n          value={newTodo}\n          onChange={(e) => setNewTodo(e.target.value)}\n          placeholder=\"Add a new todo\"\n          className=\"flex-grow p-2 border rounded-l\"\n        />\n        <button\n          onClick={addTodo}\n          className=\"px-4 py-2 bg-blue-500 text-white rounded-r\"\n        >\n          Add\n        </button>\n      </div>\n\n      <div className=\"border rounded\">\n        {todos.length > 0 ? (\n          todos.map(todo => (\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              onToggle={() => toggleTodo(todo.id)}\n              onDelete={() => deleteTodo(todo.id)}\n            />\n          ))\n        ) : (\n          <p className=\"p-2 text-center text-gray-500\">No todos yet!</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Main application code with modules passed as third parameter\nfunction onReady(mount, sourceData, libs) {\n  const { useState, useEffect } = React; // React is available globally\n  const { useSpring, animated } = libs['@react-spring/web']; // Access imported module\n\n  function MyApp() {\n    const [count, setCount] = useReactiveCell('count');\n    const [todos, setTodos] = useReactiveCell('todos');\n\n    const props = useSpring({\n      from: { opacity: 0 },\n      to: { opacity: 1 }\n    });\n\n    return (\n      <div className=\"p-4\">\n        <animated.div style={props}>\n          <button\n            className=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded\"\n            onClick={() => setCount(count + 1)}\n          >\n            Clicks: {count}\n          </button>\n        </animated.div>\n        <TodoList todos={todos} setTodos={setTodos} />\n      </div>\n    );\n  }\n\n  // Use the client API for React 18\n  const root = ReactDOM.createRoot(mount);\n  root.render(<MyApp />);\n}\n```\n</guide>\n",
  "messages": [
    {
      "role": "user",
      "content": "The user asked you to create the source code with the following specification:\n```\n<REQUEST>\n<goal>2048 game</goal>\n\n<description>Create a üéÆ 2048 game charm with a grid-based UI, sliding tile mechanics, and score tracking. The charm will need to handle game state, tile merging logic, and win/lose conditions. Could add üèÜ high score persistence and üîÑ game reset functionality.</description>\n</REQUEST>\n<PLAN>1. Create the game board representation with a 4x4 grid, initialize with two random tiles (value 2 or 4), and set up initial game state.\n2. Implement the core sliding and merging mechanics for all four directions, with proper tile generation after each move.\n3. Add score calculation, win/lose condition detection, high score tracking, and game reset functionality.</PLAN>\n<SPEC>The 2048 game will feature a 4x4 grid where players can slide tiles in four directions (up, down, left, right). When two tiles with the same number collide, they merge into one tile with the sum of their values. The game tracks the current score based on merged tile values and detects win (reaching 2048) or lose (no more moves) conditions. A high score will be persisted between game sessions, and players can reset the game at any time.</SPEC>\n```"
    },
    {
      "role": "assistant",
      "content": "\nfunction onLoad() {\n  return []; // No additional libraries needed\n}\n\nconst title = '2048 Puzzle Game';\n\n// Game logic utilities\nconst getRandomTile = () => Math.random() < 0.9 ? 2 : 4;\n\nconst getRandomEmptyCell = (board) => {\n  const emptyCells = [];\n  \n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (board[i][j] === 0) {\n        emptyCells.push({ row: i, col: j });\n      }\n    }\n  }\n  \n  if (emptyCells.length === 0) return null;\n  \n  const randomIndex = Math.floor(Math.random() * emptyCells.length);\n  return emptyCells[randomIndex];\n};\n\nconst addRandomTile = (board) => {\n  const newBoard = JSON.parse(JSON.stringify(board));\n  const emptyCell = getRandomEmptyCell(newBoard);\n  \n  if (emptyCell) {\n    newBoard[emptyCell.row][emptyCell.col] = getRandomTile();\n  }\n  \n  return newBoard;\n};\n\nconst initializeBoard = () => {\n  const board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0]\n  ];\n  \n  // Add two random tiles to start\n  return addRandomTile(addRandomTile(board));\n};\n\nconst hasWon = (board) => {\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (board[i][j] === 2048) return true;\n    }\n  }\n  return false;\n};\n\nconst canMove = (board) => {\n  // Check for empty cells\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (board[i][j] === 0) return true;\n    }\n  }\n  \n  // Check for possible merges horizontally\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 3; j++) {\n      if (board[i][j] === board[i][j + 1]) return true;\n    }\n  }\n  \n  // Check for possible merges vertically\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (board[i][j] === board[i + 1][j]) return true;\n    }\n  }\n  \n  return false;\n};\n\n// Components\nfunction Tile({ value }) {\n  const getBgColor = () => {\n    const colors = {\n      0: 'bg-gray-200',\n      2: 'bg-gray-100 text-gray-800',\n      4: 'bg-yellow-100 text-gray-800',\n      8: 'bg-yellow-200 text-white',\n      16: 'bg-yellow-300 text-white',\n      32: 'bg-orange-300 text-white',\n      64: 'bg-orange-400 text-white',\n      128: 'bg-orange-500 text-white',\n      256: 'bg-red-400 text-white',\n      512: 'bg-red-500 text-white',\n      1024: 'bg-red-600 text-white',\n      2048: 'bg-yellow-500 text-white',\n    };\n    \n    return colors[value] || 'bg-purple-600 text-white';\n  };\n  \n  const getFontSize = () => {\n    if (value >= 1024) return 'text-xl';\n    if (value >= 100) return 'text-2xl';\n    return 'text-3xl';\n  };\n  \n  return (\n    <div className={`flex items-center justify-center w-16 h-16 rounded-md shadow-md ${getBgColor()} ${getFontSize()} font-bold`}>\n      {value !== 0 ? value : ''}\n    </div>\n  );\n}\n\nfunction GameBoard({ board }) {\n  return (\n    <div className=\"grid grid-cols-4 gap-2 bg-gray-300 p-2 rounded-md\">\n      {board.map((row, rowIndex) => (\n        row.map((cell, colIndex) => (\n          <Tile key={`${rowIndex}-${colIndex}`} value={cell} />\n        ))\n      ))}\n    </div>\n  );\n}\n\nfunction GameControls({ onNewGame, gameStatus }) {\n  return (\n    <div className=\"flex justify-between items-center mb-4\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">2048</h1>\n        <p className=\"text-gray-600\">Join the tiles, get to 2048!</p>\n      </div>\n      <button \n        onClick={onNewGame}\n        className=\"px-4 py-2 bg-orange-500 text-white rounded-md hover:bg-orange-600 transition\"\n      >\n        New Game\n      </button>\n    </div>\n  );\n}\n\nfunction ScoreBoard({ score, highScore }) {\n  return (\n    <div className=\"flex gap-4 mb-4\">\n      <div className=\"bg-gray-200 p-2 rounded-md text-center flex-1\">\n        <div className=\"text-sm text-gray-600\">Score</div>\n        <div className=\"text-xl font-bold\">{score}</div>\n      </div>\n      <div className=\"bg-gray-200 p-2 rounded-md text-center flex-1\">\n        <div className=\"text-sm text-gray-600\">Best</div>\n        <div className=\"text-xl font-bold\">{highScore}</div>\n      </div>\n    </div>\n  );\n}\n\nfunction GameMessage({ gameStatus }) {\n  if (gameStatus === \"in_progress\") return null;\n  \n  const isWon = gameStatus === \"won\";\n  \n  return (\n    <div className=\"absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 z-10\">\n      <div className={`p-6 rounded-md ${isWon ? 'bg-yellow-400' : 'bg-red-400'} text-white text-center`}>\n        <h2 className=\"text-2xl font-bold mb-2\">\n          {isWon ? 'You Win! üéâ' : 'Game Over! üò¢'}\n        </h2>\n        <p>\n          {isWon \n            ? 'Congratulations! You reached 2048!' \n            : 'No more moves available. Try again!'}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nfunction GameInstructions() {\n  return (\n    <div className=\"mt-6 text-gray-600\">\n      <h3 className=\"font-bold mb-2\">How to play:</h3>\n      <p>Use arrow keys or swipe to move tiles. When two tiles with the same number touch, they merge into one!</p>\n    </div>\n  );\n}\n\nfunction Game() {\n  const [board, setBoard] = useReactiveCell(['board']);\n  const [score, setScore] = useReactiveCell(['score']);\n  const [highScore, setHighScore] = useReactiveCell(['highScore']);\n  const [gameStatus, setGameStatus] = useReactiveCell(['gameStatus']);\n  const [lastMove, setLastMove] = useReactiveCell(['lastMove']);\n  \n  const [touchStart, setTouchStart] = React.useState({ x: 0, y: 0 });\n  const [touchEnd, setTouchEnd] = React.useState({ x: 0, y: 0 });\n  \n  // Move logic\n  const moveLeft = (currentBoard) => {\n    let newBoard = JSON.parse(JSON.stringify(currentBoard));\n    let scoreGain = 0;\n    let moved = false;\n    \n    for (let i = 0; i < 4; i++) {\n      let row = newBoard[i].filter(val => val !== 0);\n      let newRow = [];\n      \n      for (let j = 0; j < row.length; j++) {\n        if (j < row.length - 1 && row[j] === row[j + 1]) {\n          const mergedValue = row[j] * 2;\n          newRow.push(mergedValue);\n          scoreGain += mergedValue;\n          j++;\n          moved = true;\n        } else {\n          newRow.push(row[j]);\n        }\n      }\n      \n      // Pad with zeros\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n      \n      // Check if the row changed\n      if (!moved && JSON.stringify(newBoard[i]) !== JSON.stringify(newRow)) {\n        moved = true;\n      }\n      \n      newBoard[i] = newRow;\n    }\n    \n    return { newBoard, scoreGain, moved };\n  };\n  \n  const moveRight = (currentBoard) => {\n    let newBoard = JSON.parse(JSON.stringify(currentBoard));\n    let scoreGain = 0;\n    let moved = false;\n    \n    for (let i = 0; i < 4; i++) {\n      let row = newBoard[i].filter(val => val !== 0);\n      let newRow = [];\n      \n      for (let j = row.length - 1; j >= 0; j--) {\n        if (j > 0 && row[j] === row[j - 1]) {\n          const mergedValue = row[j] * 2;\n          newRow.unshift(mergedValue);\n          scoreGain += mergedValue;\n          j--;\n          moved = true;\n        } else {\n          newRow.unshift(row[j]);\n        }\n      }\n      \n      // Pad with zeros\n      while (newRow.length < 4) {\n        newRow.unshift(0);\n      }\n      \n      // Check if the row changed\n      if (!moved && JSON.stringify(newBoard[i]) !== JSON.stringify(newRow)) {\n        moved = true;\n      }\n      \n      newBoard[i] = newRow;\n    }\n    \n    return { newBoard, scoreGain, moved };\n  };\n  \n  const moveUp = (currentBoard) => {\n    let newBoard = JSON.parse(JSON.stringify(currentBoard));\n    let scoreGain = 0;\n    let moved = false;\n    \n    for (let j = 0; j < 4; j++) {\n      let column = [];\n      for (let i = 0; i < 4; i++) {\n        if (newBoard[i][j] !== 0) {\n          column.push(newBoard[i][j]);\n        }\n      }\n      \n      let newColumn = [];\n      \n      for (let i = 0; i < column.length; i++) {\n        if (i < column.length - 1 && column[i] === column[i + 1]) {\n          const mergedValue = column[i] * 2;\n          newColumn.push(mergedValue);\n          scoreGain += mergedValue;\n          i++;\n          moved = true;\n        } else {\n          newColumn.push(column[i]);\n        }\n      }\n      \n      // Pad with zeros\n      while (newColumn.length < 4) {\n        newColumn.push(0);\n      }\n      \n      // Update the board\n      for (let i = 0; i < 4; i++) {\n        if (newBoard[i][j] !== newColumn[i]) {\n          moved = true;\n        }\n        newBoard[i][j] = newColumn[i];\n      }\n    }\n    \n    return { newBoard, scoreGain, moved };\n  };\n  \n  const moveDown = (currentBoard) => {\n    let newBoard = JSON.parse(JSON.stringify(currentBoard));\n    let scoreGain = 0;\n    let moved = false;\n    \n    for (let j = 0; j < 4; j++) {\n      let column = [];\n      for (let i = 0; i < 4; i++) {\n        if (newBoard[i][j] !== 0) {\n          column.push(newBoard[i][j]);\n        }\n      }\n      \n      let newColumn = [];\n      \n      for (let i = column.length - 1; i >= 0; i--) {\n        if (i > 0 && column[i] === column[i - 1]) {\n          const mergedValue = column[i] * 2;\n          newColumn.unshift(mergedValue);\n          scoreGain += mergedValue;\n          i--;\n          moved = true;\n        } else {\n          newColumn.unshift(column[i]);\n        }\n      }\n      \n      // Pad with zeros\n      while (newColumn.length < 4) {\n        newColumn.unshift(0);\n      }\n      \n      // Update the board\n      for (let i = 0; i < 4; i++) {\n        if (newBoard[i][j] !== newColumn[3 - i]) {\n          moved = true;\n        }\n        newBoard[i][j] = newColumn[3 - i];\n      }\n    }\n    \n    return { newBoard, scoreGain, moved };\n  };\n  \n  const makeMove = (direction) => {\n    if (gameStatus !== \"in_progress\") return;\n    \n    let result;\n    \n    switch (direction) {\n      case 'left':\n        result = moveLeft(board);\n        break;\n      case 'right':\n        result = moveRight(board);\n        break;\n      case 'up':\n        result = moveUp(board);\n        break;\n      case 'down':\n        result = moveDown(board);\n        break;\n      default:\n        return;\n    }\n    \n    const { newBoard, scoreGain, moved } = result;\n    \n    if (moved) {\n      const boardWithNewTile = addRandomTile(newBoard);\n      setBoard(boardWithNewTile);\n      \n      const newScore = score + scoreGain;\n      setScore(newScore);\n      \n      if (newScore > highScore) {\n        setHighScore(newScore);\n      }\n      \n      setLastMove(direction);\n      \n      // Check win/lose conditions\n      if (hasWon(boardWithNewTile)) {\n        setGameStatus(\"won\");\n      } else if (!canMove(boardWithNewTile)) {\n        setGameStatus(\"lost\");\n      }\n    }\n  };\n  \n  const handleKeyDown = (e) => {\n    switch (e.key) {\n      case 'ArrowLeft':\n        makeMove('left');\n        break;\n      case 'ArrowRight':\n        makeMove('right');\n        break;\n      case 'ArrowUp':\n        makeMove('up');\n        break;\n      case 'ArrowDown':\n        makeMove('down');\n        break;\n      default:\n        break;\n    }\n  };\n  \n  const handleTouchStart = (e) => {\n    setTouchStart({\n      x: e.touches[0].clientX,\n      y: e.touches[0].clientY\n    });\n  };\n  \n  const handleTouchMove = (e) => {\n    setTouchEnd({\n      x: e.touches[0].clientX,\n      y: e.touches[0].clientY\n    });\n  };\n  \n  const handleTouchEnd = () => {\n    const deltaX = touchEnd.x - touchStart.x;\n    const deltaY = touchEnd.y - touchStart.y;\n    \n    // Minimum swipe distance\n    const minSwipeDistance = 50;\n    \n    if (Math.abs(deltaX) < minSwipeDistance && Math.abs(deltaY) < minSwipeDistance) {\n      return; // Not a swipe\n    }\n    \n    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n      // Horizontal swipe\n      if (deltaX > 0) {\n        makeMove('right');\n      } else {\n        makeMove('left');\n      }\n    } else {\n      // Vertical swipe\n      if (deltaY > 0) {\n        makeMove('down');\n      } else {\n        makeMove('up');\n      }\n    }\n  };\n  \n  const startNewGame = () => {\n    setBoard(initializeBoard());\n    setScore(0);\n    setGameStatus(\"in_progress\");\n    setLastMove(\"none\");\n  };\n  \n  React.useEffect(() => {\n    // Initialize the game if the board is empty\n    if (board.every(row => row.every(cell => cell === 0))) {\n      startNewGame();\n    }\n    \n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [board, score, gameStatus]);\n  \n  return (\n    <div className=\"max-w-md mx-auto p-4\">\n      <GameControls onNewGame={startNewGame} gameStatus={gameStatus} />\n      <ScoreBoard score={score} highScore={highScore} />\n      \n      <div \n        className=\"relative\"\n        onTouchStart={handleTouchStart}\n        onTouchMove={handleTouchMove}\n        onTouchEnd={handleTouchEnd}\n      >\n        <GameBoard board={board} />\n        <GameMessage gameStatus={gameStatus} />\n      </div>\n      \n      <GameInstructions />\n    </div>\n  );\n}\n\nfunction onReady(mount, sourceData) {\n  const root = ReactDOM.createRoot(mount);\n  root.render(<Game />);\n}\n```"
    }
  ],
  "stop": "\n```",
  "maxTokens": 64000
}