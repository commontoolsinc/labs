{
  "model": "anthropic:claude-3-7-sonnet-20250219",
  "system": "# React Component Builder\n\nCreate an interactive React component that fulfills the user's request. Focus on delivering a clean, useful implementation with appropriate features.\n\n<meta>\n**This task is part of a 2-Phase Process.**\n\n1. First phase (already completed):\n   - Analyzed the user's request\n   - Created a detailed specification\n   - Generated a structured data schema\n\n2. Your job (second phase):\n   - Create a reactive UI component based on the provided specification and schema\n   - Implement the UI exactly according to the specification\n   - Strictly adhere to the data schema provided\n</meta>\n\n<requirements>\n- Define a title with `const title = 'Your App Name';`\n- Implement both `onLoad` and `onReady` functions\n- Use Tailwind CSS for styling with tasteful defaults\n- Do not write <svg> inline, use emoji for icons\n- Carefully avoid infinite loops and recursion that may cause performance issues\n</requirements>\n\n<code_structure>\n- React and ReactDOM are pre-imported - don't import them again\n- All React hooks must be namespaced (e.g., `React.useState`, `React.useEffect`)\n- Follow React hooks rules - never nest or conditionally call hooks\n- For form handling, use `onClick` handlers instead of `onSubmit`\n</code_structure>\n\n<charm_api>\n- **useReactiveCell(keyPath: string[])** - Persistent data storage with reactive updates\n- **generateText({ system, messages })** - Generate text via Large Language Model\n- **generateObject({ system, messages })** - Generate JSON object via Large Language Model\n- **readWebpage(url)** - Fetch and parse external web content\n- **generateImage(prompt)** - Create AI-generated images\n\n  <use_reactive_cell>\n  ## Important Note About useReactiveCell(keyPath: string[])\n  - **useReactiveCell is a React Hook** and must follow all React hook rules\n  - It should only be used for persistent state and must draw from the provided schema\n    - For any ephemeral state, use `React.useState`\n  - Only call useReactiveCell at the top level of your React function components or custom hooks\n  - Do not call useReactiveCell inside loops, conditions, or nested functions\n  - Do not call useReactiveCell directly inside the onReady function - it can only be used inside React components\n  - The onReady function itself is not a React component and cannot use React hooks directly\n  - Example of correct usage:\n    ```jsx\n    function onReady(mount, sourceData, modules) {\n      // This is NOT a React component, so do NOT use hooks here!\n      \n      // Create a React component to use hooks properly:\n      function MyApp() {\n        // React hooks can be used here\n        const [data, setData] = useReactiveCell('myData', defaultValue);\n        return <div>{/* your JSX */}</div>;\n      }\n      \n      // Render the React component to the mount point\n      const root = ReactDOM.createRoot(mount);\n      root.render(<MyApp />);\n    }\n    ```\n  </use_reactive_cell>\n</charm_api>\n\n<importing_libraries>\n- Request additional libraries in `onLoad` by returning an array of module names\n- Available libraries:\n  - imports : [object Object]\n- Only use the explicitly provided libraries\n</importing_libraries>\n\n<security>\n\n- Do not use browser dialog functions (`prompt()`, `alert()`, `confirm()`)\n- Avoid any methods that could compromise security or user experience\n\n</security>\n\n<schema description=\"The pre-generated schema this Charm operates on.\">\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"board\": {\n      \"type\": \"array\",\n      \"title\": \"Game Board\",\n      \"description\": \"4x4 grid representing the game board\",\n      \"default\": [\n        [\n          0,\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          0,\n          0,\n          0\n        ]\n      ],\n      \"items\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"integer\",\n          \"minimum\": 0\n        }\n      }\n    },\n    \"score\": {\n      \"type\": \"integer\",\n      \"title\": \"Current Score\",\n      \"description\": \"Player's current score in this game\",\n      \"default\": 0,\n      \"minimum\": 0\n    },\n    \"highScore\": {\n      \"type\": \"integer\",\n      \"title\": \"High Score\",\n      \"description\": \"Highest score achieved across all games\",\n      \"default\": 0,\n      \"minimum\": 0\n    },\n    \"gameStatus\": {\n      \"type\": \"string\",\n      \"title\": \"Game Status\",\n      \"description\": \"Current status of the game\",\n      \"enum\": [\n        \"in-progress\",\n        \"won\",\n        \"lost\"\n      ],\n      \"default\": \"in-progress\"\n    },\n    \"moves\": {\n      \"type\": \"integer\",\n      \"title\": \"Moves Count\",\n      \"description\": \"Number of moves made in the current game\",\n      \"default\": 0,\n      \"minimum\": 0\n    }\n  },\n  \"title\": \"2048 Sliding Puzzle Game\",\n  \"description\": \"A game charm to play the classic 2048 sliding tile puzzle with score tracking.\"\n}\n</schema>\n\n<guide>\n# SDK Usage Guide\n\n<persistent-reactive-state>\n## 1. `useReactiveCell` Hook\n\nThe `useReactiveCell` hook binds to a reactive cell given a key path and returns a tuple `[doc, setDoc]`:\n\nAny keys from the view-model-schema are valid for useReactiveCell, any other keys will fail. Provide a default as the second argument, **do not set an initial value explicitly**.\n\nFor this schema:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"counter\": {\n      \"type\": \"number\",\n    },\n    \"title\": {\n      \"type\": \"string\",\n      \"default\": \"My Counter App\"\n    }\n  }\n}\n```\n\n```jsx\nfunction CounterComponent() {\n  // Correct: useReactiveCell called at top level of component\n  const [counter, setCounter] = useReactiveCell(\"counter\");\n  const [maxValue, setMaxValue] = useReactiveCell(['settings', 'maxValue']);\n\n  const onIncrement = useCallback(() => {\n    // writing to the cell automatically triggers a re-render\n    setCounter(counter + 1);\n  }, [counter]);\n\n  return (\n    <button onClick={onIncrement}>\n      Increment\n    </button>\n  );\n}\n```\n</persistent-reactive-state>\n\n<generating_content>\nSeveral APIs exist for generating text, JSON or image urls.\n\n<text>\n`generateText({ system, messages}): Promise<string>`\n\n```jsx\nasync function fetchLLMResponse() {\n  const result = await generateText({\n    system: 'Translate all the messages to emojis, reply in JSON.',\n    messages: ['Hi', 'How can I help you today?', 'tell me a joke']\n  })\n  console.log('LLM responded:', result);\n}\n```\n</text>\n\n<json>\n\n`window.generateObject({ system, messages }): Promise<object>`\n\nYou must give the exact schema of the response in the prompt.\n\nFor example: \"Generate a traditional Vietnamese recipe in JSON format, with the\nfollowing properties: name (string), ingredients (array of strings),\ninstructions (array of strings)\"\n\n`generateObject` returns a parsed object already, or `undefined`. Be defensive working with the response, the LLM may make mistakes.\n\n<example>\n```jsx\nconst promptPayload = ;\nconst result = await generateObject({\n  system: 'Translate all the messages to emojis, reply in JSON with the following properties: an array of objects, each with original_text (string), emoji_translation (string)',\n  messages: ['Hi', 'How can I help you today?', 'tell me a joke'],\n});\nconsole.log('JSON response from llm:', result);\n\n// [\n//     {\n//         \"original_text\": \"Hi\",\n//         \"emoji_translation\": \"üëã\"\n//     },\n//     {\n//         \"original_text\": \"How can I help you today?\",\n//         \"emoji_translation\": \"ü§î‚ùìüôã‚Äç‚ôÇÔ∏èüìÖ\"\n//     },\n//     {\n//         \"original_text\": \"tell me a joke\",\n//         \"emoji_translation\": \"üó£Ô∏èüëâüòÇ\"\n//     }\n// ]\n```\n</example>\n\n<example>\nNOTE: Language model requests are globally cached based on your prompt.\nThis means that identical requests will return the same result. If your llm use\nrequires unique results on every request, make sure to introduce a cache-breaking\nstring such as a timestamp or incrementing number/id.\n\n```jsx\n// To avoid the cache we'll use a cache-busting string.\nconst cacheBreaker = Date.now();\n\nconst result = await generateObject({\n  system: \"You are a professional chef specializing in Mexican cuisine. Generate a detailed, authentic Mexican recipe in JSON format with the following properties: title (string), ingredients (array of strings), instructions (array of strings), prepTime (integer in minutes), cookTime (integer in minutes)\",\n  messages: [\"give me something spicy!\" + \" \" + cacheBreaker],\n});\nconsole.log('JSON response from llm:', result);\n\n// {\n//     \"title\": \"Camarones a la Diabla (Devil Shrimp)\",\n//     \"ingredients\": [\n//         \"1.5 lbs Large Shrimp, peeled and deveined\",\n//         \"4 tbsp Olive Oil\",\n//         \"1 medium White Onion, finely chopped\",\n//         \"4 cloves Garlic, minced\",\n//         \"2-3 Habanero Peppers, finely chopped (adjust to your spice preference, remove seeds for less heat)\",\n//         \"1 (28 oz) can Crushed Tomatoes\",\n//         \"1/2 cup Chicken Broth\",\n//         \"2 tbsp Tomato Paste\",\n//         \"1 tbsp Apple Cider Vinegar\",\n//         \"1 tbsp Dried Oregano\",\n//         \"1 tsp Cumin\",\n//         \"1/2 tsp Smoked Paprika\",\n//         \"1/4 tsp Ground Cloves\",\n//         \"Salt and Black Pepper to taste\",\n//         \"Fresh Cilantro, chopped, for garnish\",\n//         \"Lime wedges, for serving\"\n//     ],\n//     \"instructions\": [\n//         \"In a large bowl, toss the shrimp with salt and pepper.\",\n//         \"Heat the olive oil in a large skillet or Dutch oven over medium-high heat.\",\n//         \"Add the onion and cook until softened, about 5 minutes.\",\n//         \"Add the garlic and habanero peppers and cook for 1 minute more, until fragrant.\",\n//         \"Stir in the crushed tomatoes, chicken broth, tomato paste, apple cider vinegar, oregano, cumin, smoked paprika, and cloves.\",\n//         \"Bring the sauce to a simmer and cook for 15 minutes, stirring occasionally, until slightly thickened.\",\n//         \"Add the shrimp to the sauce and cook for 3-5 minutes, or until the shrimp are pink and cooked through.\",\n//         \"Taste and adjust seasoning with salt and pepper as needed.\",\n//         \"Garnish with fresh cilantro and serve immediately with lime wedges. Serve with rice or tortillas.\"\n//     ],\n//     \"prepTime\": 20,\n//     \"cookTime\": 30\n// }\n```\n</example>\n\n</json>\n\n\n<images>\n\nSynchronous, generates a URL that will load the image.\n\n```jsx\nfunction ImageComponent() {\n  return <img src={generateImageUrl(\"A beautiful sunset over mountains\")} alt=\"Generated landscape\" />;\n}\n```\n\n</images>\n</generating_content>\n\n<fetching_content>\n`readWebpage(url: string): Promise<string>` Returns markdown format.\n\n```jsx\nasync function fetchFromUrl() {\n  const url = 'https://twopm.studio';\n  const result = await readWebpage(url);\n  console.log('Markdown:', result.content);\n}\n```\n</fetching_content>\n\n<code_structure>\nAll generated code must follow this pattern:\n\n```javascript\n// Import from modern ESM libraries:\n//   - react\n//   - react-dom\n//   - react-dom/client\n//   - d3\n//   - moment\n//   - marked\n//   - @react-spring/web\n//   - @use-gesture/react\n//   - uuid\n//   - tone\nfunction onLoad() {\n  return ['@react-spring/web']; // Request the modules you need\n}\n\nconst title = 'My ESM App';\nfunction ImageComponent({ url }) {\n  return <img src={url} alt=\"Generated landscape\" />;\n}\n\nfunction MyComponent({ label, description }) {\n  return (\n    <div>\n      <h2>{label}</h2>\n      <p>{description}</p>\n      <ImageComponent url={generateImage(\"A beautiful sunset over mountains\")} />\n    </div>\n  );\n}\n\nfunction TodoItem({ todo, onToggle, onDelete }) {\n  return (\n    <div className=\"flex items-center p-2 border-b\">\n      <input\n        type=\"checkbox\"\n        checked={todo.completed}\n        onChange={onToggle}\n        className=\"mr-2\"\n      />\n      <span className={`flex-grow ${todo.completed ? 'line-through text-gray-500' : ''}`}>\n        {todo.text}\n      </span>\n      <button\n        onClick={onDelete}\n        className=\"px-2 py-1 bg-red-500 text-white rounded\"\n      >\n        Delete\n      </button>\n    </div>\n  );\n}\n\nfunction TodoList({ todo, setTodos}) {\n  const [newTodo, setNewTodo] = React.useState('');\n\n  const addTodo = () => {\n    if (newTodo.trim() === '') return;\n\n    const newTodoItem = {\n      id: Date.now(),\n      text: newTodo,\n      completed: false\n    };\n\n    setTodos([...todos, newTodoItem]);\n    setNewTodo('');\n  };\n\n  const toggleTodo = (id) => {\n    setTodos(todos.map(todo =>\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  };\n\n  const deleteTodo = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto mt-4 p-4 bg-white rounded shadow\">\n      <h2 className=\"text-xl font-bold mb-4\">Todo List</h2>\n\n      <div className=\"flex mb-4\">\n        <input\n          type=\"text\"\n          value={newTodo}\n          onChange={(e) => setNewTodo(e.target.value)}\n          placeholder=\"Add a new todo\"\n          className=\"flex-grow p-2 border rounded-l\"\n        />\n        <button\n          onClick={addTodo}\n          className=\"px-4 py-2 bg-blue-500 text-white rounded-r\"\n        >\n          Add\n        </button>\n      </div>\n\n      <div className=\"border rounded\">\n        {todos.length > 0 ? (\n          todos.map(todo => (\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              onToggle={() => toggleTodo(todo.id)}\n              onDelete={() => deleteTodo(todo.id)}\n            />\n          ))\n        ) : (\n          <p className=\"p-2 text-center text-gray-500\">No todos yet!</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Main application code with modules passed as third parameter\nfunction onReady(mount, sourceData, libs) {\n  const { useState, useEffect } = React; // React is available globally\n  const { useSpring, animated } = libs['@react-spring/web']; // Access imported module\n\n  function MyApp() {\n    const [count, setCount] = useReactiveCell('count');\n    const [todos, setTodos] = useReactiveCell('todos');\n\n    const props = useSpring({\n      from: { opacity: 0 },\n      to: { opacity: 1 }\n    });\n\n    return (\n      <div className=\"p-4\">\n        <animated.div style={props}>\n          <button\n            className=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded\"\n            onClick={() => setCount(count + 1)}\n          >\n            Clicks: {count}\n          </button>\n        </animated.div>\n        <TodoList todos={todos} setTodos={setTodos} />\n      </div>\n    );\n  }\n\n  // Use the client API for React 18\n  const root = ReactDOM.createRoot(mount);\n  root.render(<MyApp />);\n}\n```\n</guide>\n",
  "messages": [
    {
      "role": "user",
      "content": "The user asked you to create the source code with the following specification:\n```\n<REQUEST>\n<goal>2048 game</goal>\n\n<description>Create a üéÆ 2048 game charm with a grid-based UI, sliding tile mechanics, and score tracking. The charm will need a game board, tile merging logic, and win/lose conditions. Could add üèÜ high score tracking and üîÑ game reset functionality.</description>\n</REQUEST>\n<PLAN>1. Create the game board with initial tiles (two random \"2\" or \"4\" tiles) and implement the UI grid display.\n2. Implement sliding mechanics in all four directions with tile merging logic and score calculation.\n3. Add game status tracking (in-progress, win, lose), high score persistence, and reset functionality.</PLAN>\n<SPEC>The 2048 game will feature a 4x4 grid where numbered tiles can be slid in four directions (up, down, left, right). When two tiles with the same number collide, they merge into one tile with the sum of their values. The game tracks the current score based on merged tile values and determines win/lose conditions. The player wins upon creating a 2048 tile and loses when no more moves are possible.</SPEC>\n```"
    },
    {
      "role": "assistant",
      "content": "\nfunction onLoad() {\n  return [];\n}\n\nconst title = '2048 Puzzle Game';\n\n// Game logic utilities\nconst GameUtils = {\n  // Create a new board with two random tiles\n  initializeBoard: () => {\n    const board = Array(4).fill().map(() => Array(4).fill(0));\n    // Add two random tiles\n    GameUtils.addRandomTile(board);\n    GameUtils.addRandomTile(board);\n    return board;\n  },\n\n  // Add a random tile (2 or 4) to an empty cell\n  addRandomTile: (board) => {\n    const emptyCells = [];\n    \n    // Find all empty cells\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (board[i][j] === 0) {\n          emptyCells.push({ row: i, col: j });\n        }\n      }\n    }\n    \n    if (emptyCells.length > 0) {\n      // Choose a random empty cell\n      const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n      // 90% chance for a 2, 10% chance for a 4\n      board[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;\n    }\n    \n    return board;\n  },\n\n  // Check if the game is over (no empty cells and no possible merges)\n  isGameOver: (board) => {\n    // Check for empty cells\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (board[i][j] === 0) {\n          return false;\n        }\n      }\n    }\n    \n    // Check for possible merges horizontally\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (board[i][j] === board[i][j + 1]) {\n          return false;\n        }\n      }\n    }\n    \n    // Check for possible merges vertically\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (board[i][j] === board[i + 1][j]) {\n          return false;\n        }\n      }\n    }\n    \n    return true;\n  },\n\n  // Check if the player has won (has a 2048 tile)\n  hasWon: (board) => {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (board[i][j] === 2048) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n\n  // Move tiles in a specific direction and merge same-value tiles\n  moveTiles: (board, direction, updateScore) => {\n    let moved = false;\n    let newScore = 0;\n    const newBoard = JSON.parse(JSON.stringify(board)); // Deep copy\n    \n    const moveLeft = () => {\n      for (let i = 0; i < 4; i++) {\n        let row = newBoard[i].filter(val => val !== 0); // Remove zeros\n        let resultRow = [];\n        \n        // Merge tiles\n        for (let j = 0; j < row.length; j++) {\n          if (j < row.length - 1 && row[j] === row[j + 1]) {\n            const mergedValue = row[j] * 2;\n            resultRow.push(mergedValue);\n            newScore += mergedValue;\n            j++; // Skip the next tile\n          } else {\n            resultRow.push(row[j]);\n          }\n        }\n        \n        // Pad with zeros\n        while (resultRow.length < 4) {\n          resultRow.push(0);\n        }\n        \n        // Check if the row changed\n        if (!newBoard[i].every((val, index) => val === resultRow[index])) {\n          moved = true;\n        }\n        \n        newBoard[i] = resultRow;\n      }\n    };\n    \n    const moveRight = () => {\n      for (let i = 0; i < 4; i++) {\n        let row = newBoard[i].filter(val => val !== 0); // Remove zeros\n        let resultRow = [];\n        \n        // Merge tiles (from right to left)\n        for (let j = row.length - 1; j >= 0; j--) {\n          if (j > 0 && row[j] === row[j - 1]) {\n            const mergedValue = row[j] * 2;\n            resultRow.unshift(mergedValue);\n            newScore += mergedValue;\n            j--; // Skip the next tile\n          } else {\n            resultRow.unshift(row[j]);\n          }\n        }\n        \n        // Pad with zeros\n        while (resultRow.length < 4) {\n          resultRow.unshift(0);\n        }\n        \n        // Check if the row changed\n        if (!newBoard[i].every((val, index) => val === resultRow[index])) {\n          moved = true;\n        }\n        \n        newBoard[i] = resultRow;\n      }\n    };\n    \n    const moveUp = () => {\n      for (let j = 0; j < 4; j++) {\n        let column = [];\n        for (let i = 0; i < 4; i++) {\n          if (newBoard[i][j] !== 0) {\n            column.push(newBoard[i][j]);\n          }\n        }\n        \n        let resultColumn = [];\n        \n        // Merge tiles\n        for (let i = 0; i < column.length; i++) {\n          if (i < column.length - 1 && column[i] === column[i + 1]) {\n            const mergedValue = column[i] * 2;\n            resultColumn.push(mergedValue);\n            newScore += mergedValue;\n            i++; // Skip the next tile\n          } else {\n            resultColumn.push(column[i]);\n          }\n        }\n        \n        // Pad with zeros\n        while (resultColumn.length < 4) {\n          resultColumn.push(0);\n        }\n        \n        // Check if the column changed and update the board\n        for (let i = 0; i < 4; i++) {\n          if (newBoard[i][j] !== resultColumn[i]) {\n            moved = true;\n          }\n          newBoard[i][j] = resultColumn[i];\n        }\n      }\n    };\n    \n    const moveDown = () => {\n      for (let j = 0; j < 4; j++) {\n        let column = [];\n        for (let i = 0; i < 4; i++) {\n          if (newBoard[i][j] !== 0) {\n            column.push(newBoard[i][j]);\n          }\n        }\n        \n        let resultColumn = [];\n        \n        // Merge tiles (from bottom to top)\n        for (let i = column.length - 1; i >= 0; i--) {\n          if (i > 0 && column[i] === column[i - 1]) {\n            const mergedValue = column[i] * 2;\n            resultColumn.unshift(mergedValue);\n            newScore += mergedValue;\n            i--; // Skip the next tile\n          } else {\n            resultColumn.unshift(column[i]);\n          }\n        }\n        \n        // Pad with zeros\n        while (resultColumn.length < 4) {\n          resultColumn.unshift(0);\n        }\n        \n        // Check if the column changed and update the board\n        for (let i = 0; i < 4; i++) {\n          if (newBoard[i][j] !== resultColumn[i]) {\n            moved = true;\n          }\n          newBoard[i][j] = resultColumn[i];\n        }\n      }\n    };\n    \n    // Execute the move based on direction\n    if (direction === 'left') {\n      moveLeft();\n    } else if (direction === 'right') {\n      moveRight();\n    } else if (direction === 'up') {\n      moveUp();\n    } else if (direction === 'down') {\n      moveDown();\n    }\n    \n    // Update score if there was a move\n    if (moved && newScore > 0) {\n      updateScore(newScore);\n    }\n    \n    return { board: newBoard, moved };\n  }\n};\n\n// Tile component\nfunction Tile({ value }) {\n  // Define background colors based on tile value\n  const getTileColor = () => {\n    const colors = {\n      0: 'bg-gray-200',\n      2: 'bg-gray-100 text-gray-800',\n      4: 'bg-yellow-100 text-gray-800',\n      8: 'bg-orange-200 text-white',\n      16: 'bg-orange-300 text-white',\n      32: 'bg-orange-400 text-white',\n      64: 'bg-orange-500 text-white',\n      128: 'bg-yellow-300 text-white',\n      256: 'bg-yellow-400 text-white',\n      512: 'bg-yellow-500 text-white',\n      1024: 'bg-yellow-600 text-white',\n      2048: 'bg-yellow-700 text-white',\n    };\n    \n    return colors[value] || 'bg-gray-800 text-white';\n  };\n  \n  // Define font size based on tile value\n  const getFontSize = () => {\n    if (value >= 1000) return 'text-xl';\n    if (value >= 100) return 'text-2xl';\n    return 'text-3xl';\n  };\n  \n  return (\n    <div className={`flex items-center justify-center w-16 h-16 rounded-md shadow-md ${getTileColor()} font-bold ${getFontSize()}`}>\n      {value !== 0 ? value : ''}\n    </div>\n  );\n}\n\n// Game component\nfunction Game2048() {\n  const [board, setBoard] = useReactiveCell(['board']);\n  const [score, setScore] = useReactiveCell(['score']);\n  const [highScore, setHighScore] = useReactiveCell(['highScore']);\n  const [gameStatus, setGameStatus] = useReactiveCell(['gameStatus']);\n  const [moves, setMoves] = useReactiveCell(['moves']);\n  \n  // Handle keyboard events\n  React.useEffect(() => {\n    const handleKeyDown = (e) => {\n      if (gameStatus !== 'in-progress') return;\n      \n      let direction = null;\n      \n      switch (e.key) {\n        case 'ArrowLeft':\n          direction = 'left';\n          break;\n        case 'ArrowRight':\n          direction = 'right';\n          break;\n        case 'ArrowUp':\n          direction = 'up';\n          break;\n        case 'ArrowDown':\n          direction = 'down';\n          break;\n        default:\n          return;\n      }\n      \n      e.preventDefault();\n      handleMove(direction);\n    };\n    \n    window.addEventListener('keydown', handleKeyDown);\n    \n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [board, gameStatus]);\n  \n  // Update score and check for game status changes\n  const updateScore = (points) => {\n    const newScore = score + points;\n    setScore(newScore);\n    \n    if (newScore > highScore) {\n      setHighScore(newScore);\n    }\n  };\n  \n  // Handle a move in a specific direction\n  const handleMove = (direction) => {\n    const { board: newBoard, moved } = GameUtils.moveTiles(board, direction, updateScore);\n    \n    if (moved) {\n      // Add a new random tile\n      const boardWithNewTile = GameUtils.addRandomTile(newBoard);\n      setBoard(boardWithNewTile);\n      setMoves(moves + 1);\n      \n      // Check for win/lose conditions\n      if (GameUtils.hasWon(boardWithNewTile)) {\n        setGameStatus('won');\n      } else if (GameUtils.isGameOver(boardWithNewTile)) {\n        setGameStatus('lost');\n      }\n    }\n  };\n  \n  // Reset the game\n  const resetGame = () => {\n    setBoard(GameUtils.initializeBoard());\n    setScore(0);\n    setMoves(0);\n    setGameStatus('in-progress');\n  };\n  \n  // Handle touch events for mobile\n  const [touchStart, setTouchStart] = React.useState(null);\n  \n  const handleTouchStart = (e) => {\n    if (gameStatus !== 'in-progress') return;\n    const touch = e.touches[0];\n    setTouchStart({ x: touch.clientX, y: touch.clientY });\n  };\n  \n  const handleTouchEnd = (e) => {\n    if (!touchStart || gameStatus !== 'in-progress') return;\n    \n    const touch = e.changedTouches[0];\n    const deltaX = touch.clientX - touchStart.x;\n    const deltaY = touch.clientY - touchStart.y;\n    \n    // Determine the direction of the swipe\n    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n      // Horizontal swipe\n      if (Math.abs(deltaX) > 30) { // Minimum swipe distance\n        handleMove(deltaX > 0 ? 'right' : 'left');\n      }\n    } else {\n      // Vertical swipe\n      if (Math.abs(deltaY) > 30) { // Minimum swipe distance\n        handleMove(deltaY > 0 ? 'down' : 'up');\n      }\n    }\n    \n    setTouchStart(null);\n  };\n  \n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4\">\n      <h1 className=\"text-4xl font-bold text-gray-800 mb-4\">2048</h1>\n      \n      <div className=\"flex justify-between w-full max-w-md mb-4\">\n        <div className=\"bg-gray-300 rounded-md p-2 text-center w-24\">\n          <div className=\"text-sm text-gray-700\">SCORE</div>\n          <div className=\"font-bold text-xl\">{score}</div>\n        </div>\n        \n        <div className=\"bg-gray-300 rounded-md p-2 text-center w-24\">\n          <div className=\"text-sm text-gray-700\">BEST</div>\n          <div className=\"font-bold text-xl\">{highScore}</div>\n        </div>\n      </div>\n      \n      <div className=\"flex flex-col items-center mb-4\">\n        <button \n          onClick={resetGame}\n          className=\"bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded mb-2\"\n        >\n          New Game üîÑ\n        </button>\n        \n        <div className=\"text-gray-600 mb-2\">\n          <p>Moves: {moves}</p>\n        </div>\n        \n        <div className=\"text-sm text-gray-600 mb-4\">\n          <p>Use arrow keys or swipe to move tiles</p>\n        </div>\n      </div>\n      \n      {/* Game board */}\n      <div \n        className=\"bg-gray-400 p-3 rounded-md shadow-lg\"\n        onTouchStart={handleTouchStart}\n        onTouchEnd={handleTouchEnd}\n      >\n        {board.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"flex mb-2 last:mb-0\">\n            {row.map((value, colIndex) => (\n              <div key={`${rowIndex}-${colIndex}`} className=\"mr-2 last:mr-0\">\n                <Tile value={value} />\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n      \n      {/* Game status messages */}\n      {gameStatus === 'won' && (\n        <div className=\"mt-4 p-3 bg-green-100 text-green-800 rounded-md text-center\">\n          <p className=\"text-xl font-bold\">üéâ You Won! üéâ</p>\n          <p>You reached 2048!</p>\n          <button \n            onClick={resetGame}\n            className=\"mt-2 bg-green-500 hover:bg-green-600 text-white font-bold py-1 px-3 rounded\"\n          >\n            Play Again\n          </button>\n        </div>\n      )}\n      \n      {gameStatus === 'lost' && (\n        <div className=\"mt-4 p-3 bg-red-100 text-red-800 rounded-md text-center\">\n          <p className=\"text-xl font-bold\">Game Over!</p>\n          <p>No more moves available.</p>\n          <button \n            onClick={resetGame}\n            className=\"mt-2 bg-red-500 hover:bg-red-600 text-white font-bold py-1 px-3 rounded\"\n          >\n            Try Again\n          </button>\n        </div>\n      )}\n      \n      <div className=\"mt-4 text-sm text-gray-600\">\n        <p>Join tiles with the same number to get to 2048!</p>\n      </div>\n    </div>\n  );\n}\n\nfunction onReady(mount, sourceData) {\n  // Initialize the game if it's a new session\n  function initializeGameState() {\n    const root = ReactDOM.createRoot(mount);\n    root.render(<Game2048 />);\n  }\n  \n  initializeGameState();\n}\n```"
    }
  ],
  "stop": "\n```",
  "maxTokens": 64000
}