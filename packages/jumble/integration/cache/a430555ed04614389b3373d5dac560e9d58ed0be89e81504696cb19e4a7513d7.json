{
  "model": "anthropic:claude-3-7-sonnet-latest",
  "system": "# React Component Builder\n\nCreate an interactive React component that fulfills the user's request. Focus on\ndelivering a clean, useful implementation with appropriate features.\n\n<meta>\n**This task is part of a 2-Phase Process.**\n\n1. First phase (already completed):\n   - Analyzed the user's request\n   - Created a detailed specification\n   - Generated a structured data schema\n\n2. Your job (second phase):\n   - Create a reactive UI component based on the provided specification and\n     schema\n   - Implement the UI exactly according to the specification\n   - Strictly adhere to the data schema provided\n     </meta>\n\n<requirements>\n- Define a title with `const title = 'Your App Name';`\n- Implement both `onLoad` and `onReady` functions\n- Use Tailwind CSS for styling with tasteful defaults\n- Do not write <svg> inline, use emoji for icons\n- Carefully avoid infinite loops and recursion that may cause performance issues\n</requirements>\n\n<code_structure>\n\n- React and ReactDOM are pre-imported - don't import them again\n- All React hooks must be namespaced (e.g., `React.useState`, `React.useEffect`)\n- Follow React hooks rules - never nest or conditionally call hooks\n- For form handling, use `onClick` handlers instead of `onSubmit`\n  </code_structure>\n\n<charm_api>\n\n- **useReactiveCell(keyPath: string[])** - Persistent data storage with reactive\n  updates\n- **generateText({ system, messages })** - Generate text via Large Language\n  Model\n- **generateObject({ system, messages })** - Generate JSON object via Large\n  Language Model\n- **readWebpage(url)** - Fetch and parse external web content\n- **generateImage(prompt)** - Create AI-generated images\n\n  <use_reactive_cell>\n  ## Important Note About useReactiveCell(keyPath: string[])\n  - **useReactiveCell is a React Hook** and must follow all React hook rules\n  - It should only be used for persistent state and must draw from the provided\n    schema\n    - For any ephemeral state, use `React.useState`\n  - Only call useReactiveCell at the top level of your React function components\n    or custom hooks\n  - Do not call useReactiveCell inside loops, conditions, or nested functions\n  - Do not call useReactiveCell directly inside the onReady function - it can\n    only be used inside React components\n  - The onReady function itself is not a React component and cannot use React\n    hooks directly\n  - Example of correct usage:\n    ```jsx\n    function onReady(mount, sourceData, modules) {\n      // This is NOT a React component, so do NOT use hooks here!\n\n      // Create a React component to use hooks properly:\n      function MyApp() {\n        // React hooks can be used here\n        const [data, setData] = useReactiveCell(\"myData\", defaultValue);\n        return <div>{/* your JSX */}</div>;\n      }\n\n      // Render the React component to the mount point\n      const root = ReactDOM.createRoot(mount);\n      root.render(<MyApp />);\n    }\n    ```\n  </use_reactive_cell> </charm_api>\n\n<importing_libraries>\n\n- Request additional libraries in `onLoad` by returning an array of module names\n- Available libraries:\n- imports : [object Object]\n- Only use the explicitly provided libraries </importing_libraries>\n\n<security>\n\n- Do not use browser dialog functions (`prompt()`, `alert()`, `confirm()`)\n- Avoid any methods that could compromise security or user experience\n\n</security>\n\n<schema description=\"The pre-generated schema this Charm operates on.\">\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"simplevalue2\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"values\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"title\": \"SimpleValue2 Viewer\",\n  \"description\": \"A viewer to display the current values stored in the simpleValue2 charm.\"\n}\n</schema>\n\n<guide>\n# SDK Usage Guide\n\n<persistent-reactive-state>\n## 1. `useReactiveCell` Hook\n\nThe `useReactiveCell` hook binds to a reactive cell given a key path and returns\na tuple `[doc, setDoc]`:\n\nAny keys from the view-model-schema are valid for useReactiveCell, any other\nkeys will fail. Provide a default as the second argument, **do not set an\ninitial value explicitly**.\n\nFor this schema:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"counter\": {\n      \"type\": \"number\"\n    },\n    \"title\": {\n      \"type\": \"string\",\n      \"default\": \"My Counter App\"\n    }\n  }\n}\n```\n\n```jsx\nfunction CounterComponent() {\n  // Correct: useReactiveCell called at top level of component\n  const [counter, setCounter] = useReactiveCell(\"counter\");\n  const [maxValue, setMaxValue] = useReactiveCell([\"settings\", \"maxValue\"]);\n\n  const onIncrement = useCallback(() => {\n    // writing to the cell automatically triggers a re-render\n    setCounter(counter + 1);\n  }, [counter]);\n\n  return (\n    <button onClick={onIncrement}>\n      Increment\n    </button>\n  );\n}\n```\n\n</persistent-reactive-state>\n\n<generating_content> Several APIs exist for generating text, JSON or image urls.\n\n<text>\n`generateText({ system, messages}): Promise<string>`\n\n```jsx\nasync function fetchLLMResponse() {\n  const result = await generateText({\n    system: \"Translate all the messages to emojis, reply in JSON.\",\n    messages: [\"Hi\", \"How can I help you today?\", \"tell me a joke\"],\n  });\n  console.log(\"LLM responded:\", result);\n}\n```\n\n</text>\n\n<json>\n\n`window.generateObject({ system, messages }): Promise<object>`\n\nYou must give the exact schema of the response in the prompt.\n\nFor example: \"Generate a traditional Vietnamese recipe in JSON format, with the\nfollowing properties: name (string), ingredients (array of strings),\ninstructions (array of strings)\"\n\n`generateObject` returns a parsed object already, or `undefined`. Be defensive\nworking with the response, the LLM may make mistakes.\n\n<example>\n```jsx\nconst promptPayload = ;\nconst result = await generateObject({\n  system: 'Translate all the messages to emojis, reply in JSON with the following properties: an array of objects, each with original_text (string), emoji_translation (string)',\n  messages: ['Hi', 'How can I help you today?', 'tell me a joke'],\n});\nconsole.log('JSON response from llm:', result);\n\n// [ // { // \"original_text\": \"Hi\", // \"emoji_translation\": \"üëã\" // }, // { //\n\"original_text\": \"How can I help you today?\", // \"emoji_translation\":\n\"ü§î‚ùìüôã‚Äç‚ôÇÔ∏èüìÖ\" // }, // { // \"original_text\": \"tell me a joke\", //\n\"emoji_translation\": \"üó£Ô∏èüëâüòÇ\" // } // ]\n\n````\n</example>\n\n<example>\nNOTE: Language model requests are globally cached based on your prompt.\nThis means that identical requests will return the same result. If your llm use\nrequires unique results on every request, make sure to introduce a cache-breaking\nstring such as a timestamp or incrementing number/id.\n\n```jsx\n// To avoid the cache we'll use a cache-busting string.\nconst cacheBreaker = Date.now();\n\nconst result = await generateObject({\n  system: \"You are a professional chef specializing in Mexican cuisine. Generate a detailed, authentic Mexican recipe in JSON format with the following properties: title (string), ingredients (array of strings), instructions (array of strings), prepTime (integer in minutes), cookTime (integer in minutes)\",\n  messages: [\"give me something spicy!\" + \" \" + cacheBreaker],\n});\nconsole.log('JSON response from llm:', result);\n\n// {\n//     \"title\": \"Camarones a la Diabla (Devil Shrimp)\",\n//     \"ingredients\": [\n//         \"1.5 lbs Large Shrimp, peeled and deveined\",\n//         \"4 tbsp Olive Oil\",\n//         \"1 medium White Onion, finely chopped\",\n//         \"4 cloves Garlic, minced\",\n//         \"2-3 Habanero Peppers, finely chopped (adjust to your spice preference, remove seeds for less heat)\",\n//         \"1 (28 oz) can Crushed Tomatoes\",\n//         \"1/2 cup Chicken Broth\",\n//         \"2 tbsp Tomato Paste\",\n//         \"1 tbsp Apple Cider Vinegar\",\n//         \"1 tbsp Dried Oregano\",\n//         \"1 tsp Cumin\",\n//         \"1/2 tsp Smoked Paprika\",\n//         \"1/4 tsp Ground Cloves\",\n//         \"Salt and Black Pepper to taste\",\n//         \"Fresh Cilantro, chopped, for garnish\",\n//         \"Lime wedges, for serving\"\n//     ],\n//     \"instructions\": [\n//         \"In a large bowl, toss the shrimp with salt and pepper.\",\n//         \"Heat the olive oil in a large skillet or Dutch oven over medium-high heat.\",\n//         \"Add the onion and cook until softened, about 5 minutes.\",\n//         \"Add the garlic and habanero peppers and cook for 1 minute more, until fragrant.\",\n//         \"Stir in the crushed tomatoes, chicken broth, tomato paste, apple cider vinegar, oregano, cumin, smoked paprika, and cloves.\",\n//         \"Bring the sauce to a simmer and cook for 15 minutes, stirring occasionally, until slightly thickened.\",\n//         \"Add the shrimp to the sauce and cook for 3-5 minutes, or until the shrimp are pink and cooked through.\",\n//         \"Taste and adjust seasoning with salt and pepper as needed.\",\n//         \"Garnish with fresh cilantro and serve immediately with lime wedges. Serve with rice or tortillas.\"\n//     ],\n//     \"prepTime\": 20,\n//     \"cookTime\": 30\n// }\n````\n\n</example>\n\n</json>\n\n<images>\n\nSynchronous, generates a URL that will load the image.\n\n```jsx\nfunction ImageComponent() {\n  return (\n    <img\n      src={generateImageUrl(\"A beautiful sunset over mountains\")}\n      alt=\"Generated landscape\"\n    />\n  );\n}\n```\n\n</images>\n</generating_content>\n\n<fetching_content> `readWebpage(url: string): Promise<string>` Returns markdown\nformat.\n\n```jsx\nasync function fetchFromUrl() {\n  const url = \"https://twopm.studio\";\n  const result = await readWebpage(url);\n  console.log(\"Markdown:\", result.content);\n}\n```\n\n</fetching_content>\n\n<code_structure> All generated code must follow this pattern:\n\n```jsx\n// Import from modern ESM libraries:\n////   - react\n//   - react-dom\n//   - react-dom/client\n//   - d3\n//   - moment\n//   - marked\n//   - @react-spring/web\n//   - @use-gesture/react\n//   - uuid\n//   - tone\nfunction onLoad() {\n  return [\"@react-spring/web\"]; // Request the modules you need\n}\n\nconst title = \"My ESM App\";\nfunction ImageComponent({ url }) {\n  return <img src={url} alt=\"Generated landscape\" />;\n}\n\nfunction MyComponent({ label, description }) {\n  return (\n    <div>\n      <h2>{label}</h2>\n      <p>{description}</p>\n      <ImageComponent\n        url={generateImage(\"A beautiful sunset over mountains\")}\n      />\n    </div>\n  );\n}\n\nfunction TodoItem({ todo, onToggle, onDelete }) {\n  return (\n    <div className=\"flex items-center p-2 border-b\">\n      <input\n        type=\"checkbox\"\n        checked={todo.completed}\n        onChange={onToggle}\n        className=\"mr-2\"\n      />\n      <span\n        className={`flex-grow \\${todo.completed ? 'line-through text-gray-500' : ''}`}\n      >\n        {todo.text}\n      </span>\n      <button\n        onClick={onDelete}\n        className=\"px-2 py-1 bg-red-500 text-white rounded\"\n      >\n        Delete\n      </button>\n    </div>\n  );\n}\n\nfunction TodoList({ todo, setTodos }) {\n  const [newTodo, setNewTodo] = React.useState(\"\");\n\n  const addTodo = () => {\n    if (newTodo.trim() === \"\") return;\n\n    const newTodoItem = {\n      id: Date.now(),\n      text: newTodo,\n      completed: false,\n    };\n\n    setTodos([...todos, newTodoItem]);\n    setNewTodo(\"\");\n  };\n\n  const toggleTodo = (id) => {\n    setTodos(\n      todos.map((todo) =>\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\n      ),\n    );\n  };\n\n  const deleteTodo = (id) => {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto mt-4 p-4 bg-white rounded shadow\">\n      <h2 className=\"text-xl font-bold mb-4\">Todo List</h2>\n\n      <div className=\"flex mb-4\">\n        <input\n          type=\"text\"\n          value={newTodo}\n          onChange={(e) => setNewTodo(e.target.value)}\n          placeholder=\"Add a new todo\"\n          className=\"flex-grow p-2 border rounded-l\"\n        />\n        <button\n          onClick={addTodo}\n          className=\"px-4 py-2 bg-blue-500 text-white rounded-r\"\n        >\n          Add\n        </button>\n      </div>\n\n      <div className=\"border rounded\">\n        {todos.length > 0\n          ? (\n            todos.map((todo) => (\n              <TodoItem\n                key={todo.id}\n                todo={todo}\n                onToggle={() => toggleTodo(todo.id)}\n                onDelete={() => deleteTodo(todo.id)}\n              />\n            ))\n          )\n          : <p className=\"p-2 text-center text-gray-500\">No todos yet!</p>}\n      </div>\n    </div>\n  );\n}\n\n// Main application code with modules passed as third parameter\nfunction onReady(mount, sourceData, libs) {\n  const { useState, useEffect } = React; // React is available globally\n  const { useSpring, animated } = libs[\"@react-spring/web\"]; // Access imported module\n\n  function MyApp() {\n    const [count, setCount] = useReactiveCell(\"count\");\n    const [todos, setTodos] = useReactiveCell(\"todos\");\n\n    const props = useSpring({\n      from: { opacity: 0 },\n      to: { opacity: 1 },\n    });\n\n    return (\n      <div className=\"p-4\">\n        <animated.div style={props}>\n          <button\n            className=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded\"\n            onClick={() => setCount(count + 1)}\n          >\n            Clicks: {count}\n          </button>\n        </animated.div>\n        <TodoList todos={todos} setTodos={setTodos} />\n      </div>\n    );\n  }\n\n  // Use the client API for React 18\n  const root = ReactDOM.createRoot(mount);\n  root.render(<MyApp />);\n}\n```\n\n</guide>\n",
  "messages": [
    {
      "role": "user",
      "content": "The user asked you to create the source code with the following specification:\n```\n<REQUEST>\n<goal>show the data from `simpleValue2`</goal>\n\n<description>Show the data from the `simpleValue2` charm, displaying its current value and any associated metadata.</description>\n</REQUEST>\n<PLAN>1. Fetch the current data from the simplevalue2.values array\n2. Render each string value as a list item in the UI\n3. Implement a refresh mechanism to update the display when data changes</PLAN>\n<SPEC>The SimpleValue2 Viewer will display all string values stored in the \"values\" array of the simplevalue2 object. It will present the values in a clean, readable list format. The viewer will automatically update when the underlying data changes.</SPEC>\n```"
    },
    {
      "role": "assistant",
      "content": "\nfunction onLoad() {\n  return []; // No additional libraries needed\n}\n\nconst title = 'SimpleValue2 Viewer';\n\nfunction SimpleValue2Viewer() {\n  // Get the values array from the reactive cell\n  const [valuesData, setValuesData] = useReactiveCell([\"simplevalue2\", \"values\"], []);\n  \n  // State for tracking when data was last refreshed\n  const [lastRefreshed, setLastRefreshed] = React.useState(new Date());\n  \n  // Function to manually refresh the view\n  const handleRefresh = () => {\n    setLastRefreshed(new Date());\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto p-6 bg-white rounded-lg shadow-md\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-800\">{title}</h1>\n        <button \n          onClick={handleRefresh}\n          className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors flex items-center\"\n        >\n          <span className=\"mr-2\">üîÑ</span> Refresh\n        </button>\n      </div>\n      \n      <div className=\"mb-4\">\n        <p className=\"text-sm text-gray-500\">\n          Last refreshed: {lastRefreshed.toLocaleTimeString()}\n        </p>\n      </div>\n      \n      <div className=\"border rounded-lg overflow-hidden\">\n        <div className=\"bg-gray-100 px-4 py-2 border-b\">\n          <h2 className=\"font-semibold\">Values</h2>\n        </div>\n        \n        {valuesData && valuesData.length > 0 ? (\n          <ul className=\"divide-y\">\n            {valuesData.map((value, index) => (\n              <li key={index} className=\"px-4 py-3 hover:bg-gray-50\">\n                <div className=\"flex items-center\">\n                  <span className=\"w-8 h-8 flex items-center justify-center bg-blue-100 text-blue-800 rounded-full mr-3\">\n                    {index + 1}\n                  </span>\n                  <span className=\"text-gray-800\">{value}</span>\n                </div>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <div className=\"p-8 text-center text-gray-500\">\n            <p>No values found in the simplevalue2 data.</p>\n            <p className=\"text-sm mt-2\">Values will appear here when added.</p>\n          </div>\n        )}\n      </div>\n      \n      <div className=\"mt-4 text-sm text-gray-500\">\n        <p>Total values: {valuesData ? valuesData.length : 0}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction onReady(mount, sourceData) {\n  const root = ReactDOM.createRoot(mount);\n  root.render(<SimpleValue2Viewer />);\n}\n```"
    }
  ],
  "stop": "\n```",
  "maxTokens": 64000
}