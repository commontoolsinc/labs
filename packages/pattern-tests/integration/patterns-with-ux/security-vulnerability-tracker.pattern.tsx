/// <cts-enable />
import {
  type Cell,
  cell,
  Default,
  h,
  handler,
  lift,
  NAME,
  recipe,
  str,
  UI,
} from "commontools";

type Severity = "critical" | "high" | "medium" | "low";
type Status = "open" | "in_progress" | "resolved";

interface VulnerabilityEntry {
  id: string;
  system: string;
  severity: Severity;
  status: Status;
  score: number;
}

interface SecurityVulnerabilityTrackerArgs {
  vulnerabilities: Default<VulnerabilityEntry[], []>;
}

interface SeverityRollup {
  critical: number;
  high: number;
  medium: number;
  low: number;
}

interface SystemRiskEntry {
  system: string;
  risk: number;
}

type AuditAction = "init" | "registered" | "updated" | "resolved";

interface VulnerabilityAudit {
  action: AuditAction;
  id: string;
  severity: Severity;
  status: Status;
  system: string;
  score: number;
}

const SEVERITY_SEQUENCE: readonly Severity[] = [
  "critical",
  "high",
  "medium",
  "low",
];

const SEVERITY_WEIGHTS: Record<Severity, number> = {
  critical: 5,
  high: 3,
  medium: 2,
  low: 1,
};

const emptySeverityRollup = (): SeverityRollup => ({
  critical: 0,
  high: 0,
  medium: 0,
  low: 0,
});

const sanitizeId = (value: unknown, fallback: string): string => {
  if (typeof value !== "string") {
    return fallback;
  }
  const trimmed = value.trim();
  return trimmed.length > 0 ? trimmed : fallback;
};

const ensureUniqueId = (
  candidate: string,
  existing: readonly VulnerabilityEntry[],
): string => {
  if (!existing.some((entry) => entry.id === candidate)) {
    return candidate;
  }
  let index = 2;
  while (existing.some((entry) => entry.id === `${candidate}-${index}`)) {
    index += 1;
  }
  return `${candidate}-${index}`;
};

const sanitizeSeverity = (value: unknown): Severity => {
  if (typeof value !== "string") {
    return "medium";
  }
  const normalized = value.toLowerCase();
  if (
    normalized === "critical" || normalized === "high" ||
    normalized === "medium" || normalized === "low"
  ) {
    return normalized as Severity;
  }
  return "medium";
};

const sanitizeStatus = (value: unknown): Status => {
  if (typeof value !== "string") {
    return "open";
  }
  const normalized = value.toLowerCase().replace(/[\s-]+/g, "_");
  if (
    normalized === "open" || normalized === "in_progress" ||
    normalized === "resolved"
  ) {
    return normalized as Status;
  }
  return "open";
};

const sanitizeSystem = (value: unknown): string => {
  if (typeof value !== "string") {
    return "unknown";
  }
  const trimmed = value.trim();
  return trimmed.length > 0 ? trimmed : "unknown";
};

const sanitizeScore = (value: unknown, severity: Severity): number => {
  if (typeof value !== "number" || !Number.isFinite(value)) {
    return SEVERITY_WEIGHTS[severity];
  }
  const normalized = Math.max(0, Math.round(value * 10) / 10);
  if (!Number.isFinite(normalized)) {
    return SEVERITY_WEIGHTS[severity];
  }
  return normalized;
};

const sanitizeVulnerability = (raw: unknown): VulnerabilityEntry => {
  const typed = typeof raw === "object" && raw !== null
    ? raw as Record<string, unknown>
    : {};
  const severity = sanitizeSeverity(typed["severity"]);
  const status = sanitizeStatus(typed["status"]);
  const system = sanitizeSystem(typed["system"]);
  const id = sanitizeId(typed["id"], "vuln-unknown");
  const score = sanitizeScore(typed["score"], severity);
  return { id, system, severity, status, score };
};

const sanitizeVulnerabilityList = (
  input: unknown,
): VulnerabilityEntry[] => {
  if (!Array.isArray(input)) {
    return [];
  }
  const sanitized: VulnerabilityEntry[] = [];
  for (const raw of input) {
    const record = sanitizeVulnerability(raw);
    const uniqueId = ensureUniqueId(record.id, sanitized);
    sanitized.push(
      uniqueId === record.id ? record : { ...record, id: uniqueId },
    );
  }
  return sanitized;
};

const summarizeBySeverity = (
  entries: readonly VulnerabilityEntry[],
): SeverityRollup => {
  const totals = emptySeverityRollup();
  for (const entry of entries) {
    totals[entry.severity] += entry.score;
  }
  return totals;
};

const summarizeBySystem = (
  entries: readonly VulnerabilityEntry[],
): Record<string, number> => {
  const totals: Record<string, number> = {};
  for (const entry of entries) {
    const current = totals[entry.system] ?? 0;
    totals[entry.system] = Math.round((current + entry.score) * 10) / 10;
  }
  return totals;
};

const buildSystemEntries = (
  totals: Record<string, number>,
): SystemRiskEntry[] => {
  const entries: SystemRiskEntry[] = [];
  for (const [system, risk] of Object.entries(totals)) {
    const numeric = typeof risk === "number" && Number.isFinite(risk)
      ? Math.round(risk * 10) / 10
      : 0;
    entries.push({ system, risk: numeric });
  }
  entries.sort((left, right) => {
    if (right.risk === left.risk) {
      return left.system.localeCompare(right.system);
    }
    return right.risk - left.risk;
  });
  return entries;
};

const toNonNegativeInteger = (value: unknown): number => {
  if (typeof value !== "number" || !Number.isFinite(value)) {
    return 0;
  }
  const normalized = Math.floor(value);
  return normalized >= 0 ? normalized : 0;
};

const recordAudit = (
  audit: Cell<VulnerabilityAudit>,
  entry: VulnerabilityAudit,
) => {
  audit.set(entry);
};

export const securityVulnerabilityTrackerUx = recipe<
  SecurityVulnerabilityTrackerArgs
>(
  "Security Vulnerability Tracker (UX)",
  ({ vulnerabilities }) => {
    const sequence = cell(0);
    const audit = cell<VulnerabilityAudit>({
      action: "init",
      id: "init",
      severity: "low",
      status: "open",
      system: "unknown",
      score: 0,
    });

    const vulnerabilitiesView = lift(sanitizeVulnerabilityList)(
      vulnerabilities,
    );
    const activeVulnerabilities = lift(
      (entries: readonly VulnerabilityEntry[]) =>
        entries.filter((entry) => entry.status !== "resolved"),
    )(vulnerabilitiesView);

    const totals = lift((entries: readonly VulnerabilityEntry[]) => {
      const plain = sanitizeVulnerabilityList(entries);
      const active = plain.filter((entry) => entry.status !== "resolved");
      const severity = summarizeBySeverity(active);
      const systems = buildSystemEntries(summarizeBySystem(active));
      const total = SEVERITY_SEQUENCE.reduce(
        (sum, key) => Math.round((sum + severity[key]) * 10) / 10,
        0,
      );
      const severityListValue = SEVERITY_SEQUENCE.map((severityKey) => ({
        severity: severityKey,
        risk: severity[severityKey],
      }));
      const activeCount = systems.length;
      const label = activeCount === 1 ? "system" : "systems";
      return {
        severity,
        systems,
        total,
        activeCount,
        severityList: severityListValue,
        label,
      };
    })(vulnerabilitiesView);

    const totalRisk = lift((value: { total: number }) => value.total)(totals);
    const activeSystems = lift((value: { activeCount: number }) =>
      value.activeCount
    )(totals);
    const systemLabel = lift((value: { label: string }) => value.label)(
      totals,
    );
    const severityList = lift((value: {
      severityList: {
        severity: Severity;
        risk: number;
      }[];
    }) => value.severityList)(totals);
    const systemSummary = lift((value: {
      systems: SystemRiskEntry[];
    }) => value.systems)(totals);

    const name =
      str`Security Tracker - Risk ${totalRisk} (${activeSystems} ${systemLabel})`;

    // Form fields
    const idField = cell<string>("");
    const systemField = cell<string>("");
    const severityField = cell<string>("medium");
    const statusField = cell<string>("open");
    const scoreField = cell<string>("");

    const updateIdField = cell<string>("");
    const updateSeverityField = cell<string>("");
    const updateStatusField = cell<string>("");
    const updateSystemField = cell<string>("");
    const updateScoreField = cell<string>("");

    const resolveIdField = cell<string>("");

    // Handlers
    const registerHandler = handler(
      (
        _event: unknown,
        context: {
          idField: Cell<string>;
          systemField: Cell<string>;
          severityField: Cell<string>;
          statusField: Cell<string>;
          scoreField: Cell<string>;
          vulnerabilities: Cell<VulnerabilityEntry[]>;
          sequence: Cell<number>;
          audit: Cell<VulnerabilityAudit>;
        },
      ) => {
        const sequenceValue = toNonNegativeInteger(context.sequence.get());
        const fallbackId = `vuln-${sequenceValue + 1}`;
        const existing = sanitizeVulnerabilityList(
          context.vulnerabilities.get(),
        );

        const idVal = context.idField.get();
        const systemVal = context.systemField.get();
        const severityVal = context.severityField.get();
        const statusVal = context.statusField.get();
        const scoreVal = context.scoreField.get();

        const severity = sanitizeSeverity(severityVal);
        const status = sanitizeStatus(statusVal);
        const system = sanitizeSystem(systemVal);
        const scoreNum = typeof scoreVal === "string" && scoreVal.trim() !== ""
          ? parseFloat(scoreVal)
          : undefined;
        const score = sanitizeScore(scoreNum, severity);
        const id = ensureUniqueId(
          sanitizeId(idVal, fallbackId),
          existing,
        );

        context.sequence.set(sequenceValue + 1);
        const record: VulnerabilityEntry = {
          id,
          system,
          severity,
          status,
          score,
        };
        const nextRecords = [...existing, record];
        context.vulnerabilities.set(nextRecords);
        recordAudit(context.audit, {
          action: "registered",
          id,
          severity,
          status,
          system,
          score,
        });

        // Clear form
        context.idField.set("");
        context.systemField.set("");
        context.severityField.set("medium");
        context.statusField.set("open");
        context.scoreField.set("");
      },
    )({
      idField,
      systemField,
      severityField,
      statusField,
      scoreField,
      vulnerabilities,
      sequence,
      audit,
    });

    const updateHandler = handler(
      (
        _event: unknown,
        context: {
          updateIdField: Cell<string>;
          updateSeverityField: Cell<string>;
          updateStatusField: Cell<string>;
          updateSystemField: Cell<string>;
          updateScoreField: Cell<string>;
          vulnerabilities: Cell<VulnerabilityEntry[]>;
          audit: Cell<VulnerabilityAudit>;
        },
      ) => {
        const idVal = context.updateIdField.get();
        const id = sanitizeId(idVal, "");
        if (id.length === 0) {
          return;
        }

        const existing = sanitizeVulnerabilityList(
          context.vulnerabilities.get(),
        );
        let updated: VulnerabilityEntry | undefined;
        const next = existing.map((entry) => {
          if (entry.id !== id) {
            return entry;
          }

          const severityVal = context.updateSeverityField.get();
          const statusVal = context.updateStatusField.get();
          const systemVal = context.updateSystemField.get();
          const scoreVal = context.updateScoreField.get();

          const severity = typeof severityVal === "string" &&
              severityVal.trim() !== ""
            ? sanitizeSeverity(severityVal)
            : entry.severity;
          const status = typeof statusVal === "string" &&
              statusVal.trim() !== ""
            ? sanitizeStatus(statusVal)
            : entry.status;
          const system = typeof systemVal === "string" &&
              systemVal.trim() !== ""
            ? sanitizeSystem(systemVal)
            : entry.system;
          const scoreNum = typeof scoreVal === "string" &&
              scoreVal.trim() !== ""
            ? parseFloat(scoreVal)
            : undefined;
          const score = scoreNum !== undefined
            ? sanitizeScore(scoreNum, severity)
            : entry.score;

          updated = { id, severity, status, system, score };
          return updated;
        });

        if (!updated) {
          return;
        }

        context.vulnerabilities.set(next);
        recordAudit(context.audit, { action: "updated", ...updated });

        // Clear form
        context.updateIdField.set("");
        context.updateSeverityField.set("");
        context.updateStatusField.set("");
        context.updateSystemField.set("");
        context.updateScoreField.set("");
      },
    )({
      updateIdField,
      updateSeverityField,
      updateStatusField,
      updateSystemField,
      updateScoreField,
      vulnerabilities,
      audit,
    });

    const resolveHandler = handler(
      (
        _event: unknown,
        context: {
          resolveIdField: Cell<string>;
          vulnerabilities: Cell<VulnerabilityEntry[]>;
          audit: Cell<VulnerabilityAudit>;
        },
      ) => {
        const idVal = context.resolveIdField.get();
        const id = sanitizeId(idVal, "");
        if (id.length === 0) {
          return;
        }

        const existing = sanitizeVulnerabilityList(
          context.vulnerabilities.get(),
        );
        let resolved: VulnerabilityEntry | undefined;
        let changed = false;
        const next = existing.map((entry) => {
          if (entry.id !== id) {
            return entry;
          }
          if (entry.status === "resolved") {
            resolved = entry;
            return entry;
          }
          resolved = { ...entry, status: "resolved", score: 0 };
          changed = true;
          return resolved;
        });

        if (!changed || !resolved) {
          return;
        }

        context.vulnerabilities.set(next);
        recordAudit(context.audit, { action: "resolved", ...resolved });

        // Clear form
        context.resolveIdField.set("");
      },
    )({ resolveIdField, vulnerabilities, audit });

    // UI elements
    const severityCards = lift(
      (list: { severity: Severity; risk: number }[]) => {
        const elements = [];
        for (const item of list) {
          const color = item.severity === "critical"
            ? "#dc2626"
            : item.severity === "high"
            ? "#ea580c"
            : item.severity === "medium"
            ? "#f59e0b"
            : "#84cc16";
          const bgColor = item.severity === "critical"
            ? "#fef2f2"
            : item.severity === "high"
            ? "#fff7ed"
            : item.severity === "medium"
            ? "#fffbeb"
            : "#f7fee7";

          const cardStyle =
            "padding: 1rem; border-radius: 8px; border: 2px solid " +
            color + "; background: " + bgColor + ";";
          const badgeStyle =
            "display: inline-block; padding: 0.25rem 0.5rem; border-radius: 4px; background: " +
            color +
            "; color: white; font-weight: bold; font-size: 0.75rem; text-transform: uppercase; margin-bottom: 0.5rem;";
          const valueStyle = "font-size: 2rem; font-weight: bold; color: " +
            color + "; font-family: monospace;";

          elements.push(
            h("div", { style: cardStyle }, [
              h("div", { style: badgeStyle }, String(item.severity)),
              h("div", { style: valueStyle }, String(item.risk)),
            ]),
          );
        }
        return h(
          "div",
          {
            style:
              "display: grid; grid-template-columns: repeat(4, 1fr); gap: 0.75rem; margin-bottom: 1.5rem;",
          },
          ...elements,
        );
      },
    )(severityList);

    const systemCards = lift((systems: SystemRiskEntry[]) => {
      if (systems.length === 0) {
        return h(
          "div",
          { style: "padding: 2rem; text-align: center; color: #10b981;" },
          "✓ No active vulnerabilities",
        );
      }

      const elements = [];
      for (const sys of systems) {
        const cardStyle =
          "padding: 1rem; background: white; border-radius: 8px; border: 1px solid #e5e7eb;";
        const systemStyle = "font-weight: 600; margin-bottom: 0.5rem;";
        const riskStyle =
          "font-size: 1.5rem; font-family: monospace; color: #dc2626;";

        elements.push(
          h("div", { style: cardStyle }, [
            h("div", { style: systemStyle }, String(sys.system)),
            h("div", { style: riskStyle }, String(sys.risk)),
          ]),
        );
      }

      return h(
        "div",
        {
          style:
            "display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 0.75rem;",
        },
        ...elements,
      );
    })(systemSummary);

    const vulnerabilityList = lift((vulns: readonly VulnerabilityEntry[]) => {
      const active = vulns.filter((v) => v.status !== "resolved");
      if (active.length === 0) {
        return h(
          "div",
          {
            style:
              "padding: 2rem; text-align: center; color: #9ca3af; border: 2px dashed #e5e7eb; border-radius: 8px;",
          },
          "No active vulnerabilities",
        );
      }

      const elements = [];
      for (const vuln of active) {
        const severityColor = vuln.severity === "critical"
          ? "#dc2626"
          : vuln.severity === "high"
          ? "#ea580c"
          : vuln.severity === "medium"
          ? "#f59e0b"
          : "#84cc16";

        const statusColor = vuln.status === "open"
          ? "#ef4444"
          : vuln.status === "in_progress"
          ? "#f59e0b"
          : "#10b981";

        const cardStyle =
          "padding: 1rem; background: white; border-radius: 8px; border-left: 4px solid " +
          severityColor + "; margin-bottom: 0.75rem;";
        const headerStyle =
          "display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;";
        const idStyle = "font-weight: 600; font-family: monospace;";
        const badgeStyle =
          "padding: 0.25rem 0.5rem; border-radius: 4px; background: " +
          statusColor +
          "; color: white; font-size: 0.75rem; font-weight: bold; text-transform: uppercase;";
        const detailStyle = "display: flex; gap: 1rem; font-size: 0.875rem;";
        const labelStyle = "color: #6b7280; font-weight: 500;";
        const valueStyle = "color: #111827; font-family: monospace;";

        elements.push(
          h("div", { style: cardStyle }, [
            h("div", { style: headerStyle }, [
              h("span", { style: idStyle }, String(vuln.id)),
              h(
                "span",
                { style: badgeStyle },
                vuln.status === "in_progress"
                  ? "IN PROGRESS"
                  : String(vuln.status).toUpperCase(),
              ),
            ]),
            h("div", { style: detailStyle }, [
              h("span", { style: labelStyle }, "System:"),
              h("span", { style: valueStyle }, String(vuln.system)),
              h("span", { style: labelStyle }, "Severity:"),
              h("span", { style: valueStyle }, String(vuln.severity)),
              h("span", { style: labelStyle }, "Score:"),
              h("span", { style: valueStyle }, String(vuln.score)),
            ]),
          ]),
        );
      }

      return h("div", {}, ...elements);
    })(vulnerabilitiesView);

    const ui = (
      <div
        style={{
          fontFamily: "system-ui, sans-serif",
          maxWidth: "1200px",
          margin: "0 auto",
          padding: "1.5rem",
          background: "linear-gradient(to bottom right, #fee2e2, #fef3c7)",
          minHeight: "100vh",
        }}
      >
        <div
          style={{
            background: "linear-gradient(135deg, #dc2626 0%, #ea580c 100%)",
            padding: "1.5rem",
            borderRadius: "12px",
            marginBottom: "1.5rem",
            color: "white",
          }}
        >
          <h1
            style={{
              margin: "0 0 0.5rem 0",
              fontSize: "2rem",
              fontWeight: "bold",
            }}
          >
            🔒 Security Vulnerability Tracker
          </h1>
          <div style={{ fontSize: "1.25rem", fontFamily: "monospace" }}>
            Total Risk: {totalRisk} across {activeSystems} {systemLabel}
          </div>
        </div>

        <div style={{ marginBottom: "1.5rem" }}>
          <h2
            style={{
              fontSize: "1.25rem",
              fontWeight: "600",
              marginBottom: "0.75rem",
            }}
          >
            Risk by Severity
          </h2>
          {severityCards}
        </div>

        <div style={{ marginBottom: "1.5rem" }}>
          <h2
            style={{
              fontSize: "1.25rem",
              fontWeight: "600",
              marginBottom: "0.75rem",
            }}
          >
            Risk by System
          </h2>
          {systemCards}
        </div>

        <div style={{ marginBottom: "1.5rem" }}>
          <h2
            style={{
              fontSize: "1.25rem",
              fontWeight: "600",
              marginBottom: "0.75rem",
            }}
          >
            Active Vulnerabilities
          </h2>
          {vulnerabilityList}
        </div>

        <div
          style={{
            display: "grid",
            gridTemplateColumns: "repeat(auto-fit, minmax(300px, 1fr))",
            gap: "1rem",
          }}
        >
          <div
            style={{
              padding: "1rem",
              background: "white",
              borderRadius: "8px",
              border: "2px solid #10b981",
            }}
          >
            <h3
              style={{
                fontSize: "1rem",
                fontWeight: "600",
                marginBottom: "0.75rem",
              }}
            >
              Register Vulnerability
            </h3>
            <div
              style={{
                display: "flex",
                flexDirection: "column",
                gap: "0.5rem",
              }}
            >
              <ct-input $value={idField} placeholder="ID (optional)" />
              <ct-input $value={systemField} placeholder="System" />
              <ct-input
                $value={severityField}
                placeholder="Severity (critical/high/medium/low)"
              />
              <ct-input
                $value={statusField}
                placeholder="Status (open/in_progress/resolved)"
              />
              <ct-input $value={scoreField} placeholder="Score (optional)" />
              <ct-button onClick={registerHandler}>Register</ct-button>
            </div>
          </div>

          <div
            style={{
              padding: "1rem",
              background: "white",
              borderRadius: "8px",
              border: "2px solid #f59e0b",
            }}
          >
            <h3
              style={{
                fontSize: "1rem",
                fontWeight: "600",
                marginBottom: "0.75rem",
              }}
            >
              Update Vulnerability
            </h3>
            <div
              style={{
                display: "flex",
                flexDirection: "column",
                gap: "0.5rem",
              }}
            >
              <ct-input $value={updateIdField} placeholder="Vulnerability ID" />
              <ct-input
                $value={updateSeverityField}
                placeholder="New Severity (optional)"
              />
              <ct-input
                $value={updateStatusField}
                placeholder="New Status (optional)"
              />
              <ct-input
                $value={updateSystemField}
                placeholder="New System (optional)"
              />
              <ct-input
                $value={updateScoreField}
                placeholder="New Score (optional)"
              />
              <ct-button onClick={updateHandler}>Update</ct-button>
            </div>
          </div>

          <div
            style={{
              padding: "1rem",
              background: "white",
              borderRadius: "8px",
              border: "2px solid #dc2626",
            }}
          >
            <h3
              style={{
                fontSize: "1rem",
                fontWeight: "600",
                marginBottom: "0.75rem",
              }}
            >
              Resolve Vulnerability
            </h3>
            <div
              style={{
                display: "flex",
                flexDirection: "column",
                gap: "0.5rem",
              }}
            >
              <ct-input
                $value={resolveIdField}
                placeholder="Vulnerability ID"
              />
              <ct-button onClick={resolveHandler}>Resolve</ct-button>
            </div>
          </div>
        </div>
      </div>
    );

    return {
      [NAME]: name,
      [UI]: ui,
      vulnerabilities,
      vulnerabilitiesView,
      activeVulnerabilities,
      totals: {
        severity: lift((value: {
          severity: SeverityRollup;
        }) => value.severity)(totals),
        system: systemSummary,
        total: totalRisk,
      },
      severityList,
      snapshot: lift((value: {
        total: number;
        severity: SeverityRollup;
        systems: SystemRiskEntry[];
      }) => ({
        total: value.total,
        bySeverity: value.severity,
        bySystem: value.systems,
      }))(totals),
      summaryLabel:
        str`Risk total ${totalRisk} across ${activeSystems} ${systemLabel}`,
      handlers: {
        register: handler(
          (
            event:
              | {
                id?: unknown;
                system?: unknown;
                severity?: unknown;
                status?: unknown;
                score?: unknown;
              }
              | undefined,
            context: {
              vulnerabilities: Cell<VulnerabilityEntry[]>;
              sequence: Cell<number>;
              audit: Cell<VulnerabilityAudit>;
            },
          ) => {
            const sequenceValue = toNonNegativeInteger(context.sequence.get());
            const fallbackId = `vuln-${sequenceValue + 1}`;
            const existing = sanitizeVulnerabilityList(
              context.vulnerabilities.get(),
            );
            const severity = sanitizeSeverity(event?.severity);
            const status = sanitizeStatus(event?.status);
            const system = sanitizeSystem(event?.system);
            const score = sanitizeScore(event?.score, severity);
            const id = ensureUniqueId(
              sanitizeId(event?.id, fallbackId),
              existing,
            );
            context.sequence.set(sequenceValue + 1);
            const record: VulnerabilityEntry = {
              id,
              system,
              severity,
              status,
              score,
            };
            const nextRecords = [...existing, record];
            context.vulnerabilities.set(nextRecords);
            recordAudit(context.audit, {
              action: "registered",
              id,
              severity,
              status,
              system,
              score,
            });
          },
        )({ vulnerabilities, sequence, audit }),
        update: handler(
          (
            event:
              | {
                id?: unknown;
                system?: unknown;
                severity?: unknown;
                status?: unknown;
                score?: unknown;
              }
              | undefined,
            context: {
              vulnerabilities: Cell<VulnerabilityEntry[]>;
              audit: Cell<VulnerabilityAudit>;
            },
          ) => {
            const id = sanitizeId(event?.id, "");
            if (id.length === 0) {
              return;
            }
            const existing = sanitizeVulnerabilityList(
              context.vulnerabilities.get(),
            );
            let updated: VulnerabilityEntry | undefined;
            const next = existing.map((entry) => {
              if (entry.id !== id) {
                return entry;
              }
              const severity = event?.severity === undefined
                ? entry.severity
                : sanitizeSeverity(event?.severity);
              const status = event?.status === undefined
                ? entry.status
                : sanitizeStatus(event?.status);
              const system = event?.system === undefined
                ? entry.system
                : sanitizeSystem(event?.system);
              const score = event?.score === undefined
                ? SEVERITY_WEIGHTS[severity]
                : sanitizeScore(event?.score, severity);
              updated = { id, severity, status, system, score };
              return updated;
            });
            if (!updated) {
              return;
            }
            context.vulnerabilities.set(next);
            recordAudit(context.audit, { action: "updated", ...updated });
          },
        )({ vulnerabilities, audit }),
        resolve: handler(
          (
            event: { id?: unknown } | undefined,
            context: {
              vulnerabilities: Cell<VulnerabilityEntry[]>;
              audit: Cell<VulnerabilityAudit>;
            },
          ) => {
            const id = sanitizeId(event?.id, "");
            if (id.length === 0) {
              return;
            }
            const existing = sanitizeVulnerabilityList(
              context.vulnerabilities.get(),
            );
            let resolved: VulnerabilityEntry | undefined;
            let changed = false;
            const next = existing.map((entry) => {
              if (entry.id !== id) {
                return entry;
              }
              if (entry.status === "resolved") {
                resolved = entry;
                return entry;
              }
              resolved = { ...entry, status: "resolved", score: 0 };
              changed = true;
              return resolved;
            });
            if (!changed || !resolved) {
              return;
            }
            context.vulnerabilities.set(next);
            recordAudit(context.audit, { action: "resolved", ...resolved });
          },
        )({ vulnerabilities, audit }),
      },
      audit: lift(
        (entry: VulnerabilityAudit | undefined) =>
          entry ?? {
            action: "init",
            id: "init",
            severity: "low",
            status: "open",
            system: "unknown",
            score: 0,
          },
      )(audit),
    };
  },
);
