import { isObject, isRecord } from "@commontools/utils/types";
import { type MemorySpace } from "@commontools/memory/interface";
import { getTopFrame } from "./builder/recipe.ts";
import {
  type Cell,
  ID,
  ID_FIELD,
  isStreamValue,
  type JSONSchema,
  type Schema,
} from "./builder/types.ts";
import { type DeepKeyLookup, type DocImpl } from "./doc.ts";
import {
  createQueryResultProxy,
  type QueryResult,
} from "./query-result-proxy.ts";
import { diffAndUpdate } from "./data-updating.ts";
import {
  resolveLinkToValue,
  resolveLinkToWriteRedirect,
} from "./link-resolution.ts";
import { txToReactivityLog } from "./scheduler.ts";
import { type Cancel, isCancel, useCancelGroup } from "./cancel.ts";
import { validateAndTransform } from "./schema.ts";
import { toURI } from "./uri-utils.ts";
import {
  type LegacyJSONCellLink,
  type SigilLink,
  type SigilWriteRedirectLink,
  type URI,
} from "./sigil-types.ts";
import { areLinksSame, isLink } from "./link-utils.ts";
import { type IRuntime } from "./runtime.ts";
import {
  createSigilLinkFromParsedLink,
  type NormalizedFullLink,
} from "./link-utils.ts";
import type {
  IExtendedStorageTransaction,
  IReadOptions,
} from "./storage/interface.ts";
import { fromURI } from "./uri-utils.ts";

/**
 * This is the regular Cell interface, generated by DocImpl.asCell().
 *
 * This abstracts away the paths behind an interface that e.g. the UX code or
 * modules that prefer cell interfaces can use.
 *
 * These methods are available in the system and in spell code:
 *
 * @method get Returns the current value of the cell.
 * @returns {T}
 *
 * @method set Alias for `send`. Sets a new value for the cell.
 * @method send Sets a new value for the cell.
 * @param {T} value - The new value to set.
 * @returns {void}
 *
 * @method update Updates multiple properties of an object cell at once.
 * @param {Partial<T>} values - The properties to update.
 * @returns {void}
 *
 * @method push Adds an item to the end of an array cell.
 * @param {U | Cell<U>} value - The value to add, where U is
 * the array element type.
 * @returns {void}
 *
 * @method equals Compares two cells for equality.
 * @param {Cell<any>} other - The cell to compare with.
 * @returns {boolean}
 *
 * @method key Returns a new cell for the specified key path.
 * @param {K} valueKey - The key to access in the cell's value.
 * @returns {Cell<T[K]>}
 *
 * Everything below is only available in the system, not in spell code:
 *
 * @method asSchema Creates a new cell with a specific schema.
 * @param {JSONSchema} schema - The schema to apply.
 * @returns {Cell<T>} - A cell with the specified schema.
 *
 * @method withTx Creates a new cell with a specific transaction.
 * @param {IExtendedStorageTransaction} tx - The transaction to use.
 * @returns {Cell<T>}
 *
 * @method sink Adds a callback that is called immediately and on cell changes.
 * @param {function} callback - The callback to be called when the cell changes.
 * @returns {function} - A function to Cleanup the callback.
 *
 * @method sync Syncs the cell to the storage.
 * @returns {Promise<void>}
 *
 * @method getAsQueryResult Returns a query result for the cell.
 * @param {Path} path - The optional path to follow.
 * @param {ReactivityLog} log - Optional reactivity log.
 * @returns {QueryResult<DeepKeyLookup<T, Path>>}
 *
 * @method getAsNormalizedFullLink Returns a normalized full link for the cell.
 * @returns {NormalizedFullLink}
 *
 * @method getAsLink Returns a cell link for the cell (new sigil format).
 * @returns {SigilLink}
 *
 * @method getRaw Raw access method, without following aliases (which would
 * write to the destination instead of the cell itself).
 * @param {IReadOptions} options - Optional read options.
 * @returns {any} - Raw document data
 *
 * @method setRaw Raw write method that bypasses Cell validation,
 * transformation, and alias resolution. Writes directly to the cell without
 * following aliases.
 * @param {any} value - Raw value to write directly to document
 *
 * @method getSourceCell Returns the source cell with optional schema.
 * @param {JSONSchema} schema - Optional schema to apply.
 * @returns {Cell<T & {[TYPE]: string | undefined} & {argument: any}>}
 *
 * @method toJSON Returns a serializable cell link (not the contents) to the
 * cell. This is used e.g. when creating merkle references that refer to cells.
 * It currentlly doesn't contain the space. We'll eventually want to get a
 * relative link here, but that will require context toJSON doesn't get.
 * @returns {{cell: {"/": string} | undefined, path: PropertyKey[]}}
 *
 * @property entityId Returns the current entity ID of the cell.
 * @returns {EntityId}
 *
 * @property sourceURI Returns the source URI of the cell.
 * @returns {URI}
 *
 * @property schema Optional schema for the cell.
 * @returns {JSONSchema | undefined}
 *
 * @property runtime The runtime that was used to create the cell.
 * @returns {IRuntime}
 *
 * @property tx The transaction that was used to create the cell.
 * @returns {IExtendedStorageTransaction}
 *
 * @property rootSchema Optional root schema for cell's schema. This differs
 * from `schema` when the cell represents a child of the original cell (e.g. via
 * `key()`). We need to keep the root schema to resolve `$ref` in the schema.
 * @returns {JSONSchema | undefined}
 *
 * The following are just for debugging and might disappear: (This allows
 * clicking on a property in the debugger and getting the value)
 *
 * @method value Returns the current value of the cell.
 * @returns {T}
 *
 * @property cellLink The cell link representing this cell.
 * @returns {LegacyDocCellLink}
 */
declare module "@commontools/api" {
  interface Cell<T> {
    get(): T;
    set(value: Cellify<T> | T): void;
    send(value: Cellify<T> | T): void;
    update<V extends Cellify<Partial<T> | Partial<T>>>(
      values: V extends object ? V : never,
    ): void;
    push(
      ...value: Array<
        | (T extends Array<infer U> ? (Cellify<U> | U | DocImpl<U>) : any)
        | Cell
      >
    ): void;
    equals(other: any): boolean;
    key<K extends T extends Cell<infer S> ? keyof S : keyof T>(
      valueKey: K,
    ): Cell<
      T extends Cell<infer S> ? S[K & keyof S] : T[K] extends never ? any : T[K]
    >;
    asSchema<S extends JSONSchema = JSONSchema>(
      schema: S,
    ): Cell<Schema<S>>;
    asSchema<T>(
      schema?: JSONSchema,
    ): Cell<T>;
    withTx(tx?: IExtendedStorageTransaction): Cell<T>;
    sink(callback: (value: T) => Cancel | undefined | void): Cancel;
    sync(): Promise<Cell<T>> | Cell<T>;
    getAsQueryResult<Path extends PropertyKey[]>(
      path?: Readonly<Path>,
      tx?: IExtendedStorageTransaction,
    ): QueryResult<DeepKeyLookup<T, Path>>;
    getAsNormalizedFullLink(): NormalizedFullLink;
    getAsLink(
      options?: {
        base?: Cell<any>;
        baseSpace?: MemorySpace;
        includeSchema?: boolean;
      },
    ): SigilLink;
    getAsWriteRedirectLink(
      options?: {
        base?: Cell<any>;
        baseSpace?: MemorySpace;
        includeSchema?: boolean;
      },
    ): SigilWriteRedirectLink;
    getDoc(): DocImpl<any>;
    getRaw(options?: IReadOptions): any;
    setRaw(value: any): void;
    getSourceCell<T>(
      schema?: JSONSchema,
    ):
      | Cell<
        & T
        // Add default types for TYPE and `argument`. A more specific type in T will
        // take precedence.
        & { [TYPE]: string | undefined }
        & ("argument" extends keyof T ? unknown : { argument: any })
      >
      | undefined;
    getSourceCell<S extends JSONSchema = JSONSchema>(
      schema: S,
    ):
      | Cell<
        & Schema<S>
        // Add default types for TYPE and `argument`. A more specific type in
        // `schema` will take precedence.
        & { [TYPE]: string | undefined }
        & ("argument" extends keyof Schema<S> ? unknown
          : { argument: any })
      >
      | undefined;
    setSourceCell(sourceCell: Cell<any>): void;
    freeze(reason: string): void;
    isFrozen(): boolean;
    toJSON(): LegacyJSONCellLink;
    runtime: IRuntime;
    tx: IExtendedStorageTransaction | undefined;
    schema?: JSONSchema;
    rootSchema?: JSONSchema;
    value: T;
    cellLink: SigilLink;
    space: MemorySpace;
    entityId: { "/": string };
    sourceURI: URI;
    path: readonly PropertyKey[];
    [isCellMarker]: true;
    copyTrap: boolean;
  }
}

export type { Cell } from "@commontools/api";

export type { MemorySpace } from "@commontools/memory/interface";

/**
 * Cellify is a type utility that allows any part of type T to be wrapped in
 * Cell<>, and allow any part of T that is currently wrapped in Cell<> to be
 * used unwrapped. This is designed for use with Cell<T> method parameters,
 * allowing flexibility in how values are passed.
 */
export type Cellify<T> =
  // Handle existing Cell<> types, allowing unwrapping
  T extends Cell<infer U> ? Cellify<U> | Cell<Cellify<U>>
    // Handle arrays
    : T extends Array<infer U> ? Array<Cellify<U>> | Cell<Array<Cellify<U>>>
    // Handle objects (excluding null), adding optional ID fields
    : T extends object ?
        | ({ [K in keyof T]: Cellify<T[K]> } & { [ID]?: any; [ID_FIELD]?: any })
        | Cell<
          { [K in keyof T]: Cellify<T[K]> } & { [ID]?: any; [ID_FIELD]?: any }
        >
    // Handle primitives
    : T | Cell<T>;

export interface Stream<T> {
  send(event: T): void;
  sink(callback: (event: T) => Cancel | undefined | void): Cancel;
  sync(): Promise<Stream<T>> | Stream<T>;
  getRaw(options?: IReadOptions): any;
  getAsNormalizedFullLink(): NormalizedFullLink;
  getDoc(): DocImpl<any>;
  withTx(tx?: IExtendedStorageTransaction): Stream<T>;
  schema?: JSONSchema;
  rootSchema?: JSONSchema;
  runtime: IRuntime;
  [isStreamMarker]: true;
}

export function createCell<T>(
  runtime: IRuntime,
  link: NormalizedFullLink,
  tx?: IExtendedStorageTransaction,
  noResolve = false,
): Cell<T> {
  let { schema, rootSchema } = link;

  // Resolve the path to check whether it's a stream. We're not logging this
  // right now. The corner case where during it's lifetime this changes from
  // non-stream to stream or vice versa will not be detected.
  const sideTx = runtime.edit();
  const resolvedLink = noResolve ? link : resolveLinkToValue(sideTx, link);
  const value = sideTx.readValueOrThrow(resolvedLink);
  sideTx.commit();

  // Use schema from alias if provided and no explicit schema was set
  if (!schema && resolvedLink.schema) {
    schema = resolvedLink.schema;
    rootSchema = resolvedLink.rootSchema || resolvedLink.schema;
  }

  if (isStreamValue(value)) {
    return createStreamCell(
      runtime,
      { ...resolvedLink, schema, rootSchema },
      tx,
    ) as unknown as Cell<T>;
  } else {
    return createRegularCell(runtime, { ...link, schema, rootSchema }, tx);
  }
}

function createStreamCell<T>(
  runtime: IRuntime,
  link: NormalizedFullLink,
  tx?: IExtendedStorageTransaction,
): Stream<T> {
  const listeners = new Set<(event: T) => Cancel | undefined>();

  let cleanup: Cancel | undefined;

  const self: Stream<T> = {
    // Implementing just the subset of Cell<T> that is needed for streams.
    send: (event: T) => {
      // Use runtime from doc if available
      runtime.scheduler.queueEvent(link, event);

      cleanup?.();
      const [cancel, addCancel] = useCancelGroup();
      cleanup = cancel;

      listeners.forEach((callback) => addCancel(callback(event)));
    },
    sink: (callback: (value: T) => Cancel | undefined): Cancel => {
      listeners.add(callback);
      return () => listeners.delete(callback);
    },
    // sync: No-op for streams, but maybe eventually it might mean wait for all
    // events to have been processed
    sync: () => self,
    getRaw: (options?: IReadOptions) =>
      (tx?.status().status === "ready" ? tx : runtime.edit())
        .readValueOrThrow(link, options),
    getAsNormalizedFullLink: () => link,
    getDoc: () => runtime.documentMap.getDocByEntityId(link.space, link.id),
    withTx: (_tx?: IExtendedStorageTransaction) => self, // No-op for streams
    schema: link.schema,
    rootSchema: link.rootSchema,
    [isStreamMarker]: true,
    runtime,
  } satisfies Stream<T>;

  return self;
}

function createRegularCell<T>(
  runtime: IRuntime,
  link: NormalizedFullLink,
  tx?: IExtendedStorageTransaction,
): Cell<T> {
  const { space, path, schema, rootSchema } = link;
  let readOnlyReason: string | undefined;

  const self = {
    get: () => validateAndTransform(runtime, tx, link),
    set: (newValue: Cellify<T>) => {
      if (!tx) throw new Error("Transaction required for set");
      // TODO(@ubik2) investigate whether i need to check classified as i walk down my own obj
      return diffAndUpdate(
        runtime,
        tx,
        resolveLinkToWriteRedirect(tx, link),
        newValue,
        getTopFrame()?.cause,
      );
    },
    send: (newValue: Cellify<T>) => self.set(newValue),
    update: (values: Cellify<Partial<T>>) => {
      if (!tx) throw new Error("Transaction required for update");
      if (!isRecord(values)) {
        throw new Error("Can't update with non-object value");
      }
      // Get current value, following aliases and references
      const resolvedLink = resolveLinkToValue(tx, link);
      const currentValue = tx.readValueOrThrow(resolvedLink);

      // If there's no current value, initialize based on schema
      if (currentValue === undefined) {
        if (schema) {
          // Check if schema allows objects
          const allowsObject = schema.type === "object" ||
            (Array.isArray(schema.type) && schema.type.includes("object")) ||
            (schema.anyOf &&
              schema.anyOf.some((s) =>
                typeof s === "object" && s.type === "object"
              ));

          if (!allowsObject) {
            throw new Error(
              "Cannot update with object value - schema does not allow objects",
            );
          }
        }
        tx.writeValueOrThrow(resolvedLink, {});
      }

      // Now update each property
      for (const [key, value] of Object.entries(values)) {
        // Workaround for type checking, since T can be Cell<> and that's fine.
        (self.key as any)(key).set(value);
      }
    },
    push: (
      ...values: Array<
        | (T extends Array<infer U> ? (Cellify<U> | U | DocImpl<U>) : any)
        | Cell
      >
    ) => {
      if (!tx) throw new Error("Transaction required for push");

      // Follow aliases and references, since we want to get to an assumed
      // existing array.
      const resolvedLink = resolveLinkToValue(tx, link);
      const currentValue = tx.readValueOrThrow(resolvedLink);
      const cause = getTopFrame()?.cause;

      let array = currentValue as unknown[];
      if (array !== undefined && !Array.isArray(array)) {
        throw new Error("Can't push into non-array value");
      }

      // If this is an object and it doesn't have an ID, add one.
      const valuesToWrite = values.map((value: any) =>
        (!isLink(value) && isObject(value) &&
            (value as { [ID]?: unknown })[ID] === undefined && getTopFrame())
          ? { [ID]: getTopFrame()!.generatedIdCounter++, ...value }
          : value
      );

      // If there is no array yet, create it first. We have to do this as a
      // separate operation, so that in the next steps [ID] is properly anchored
      // in the array.
      if (array === undefined) {
        diffAndUpdate(
          runtime,
          tx,
          resolvedLink,
          [],
          cause,
        );
        array = Array.isArray(schema?.default) ? schema.default : [];
      }

      // Append the new values to the array.
      diffAndUpdate(
        runtime,
        tx,
        resolvedLink,
        [...array, ...valuesToWrite],
        cause,
      );
    },
    equals: (other: any) => areLinksSame(self, other),
    key: <K extends T extends Cell<infer S> ? keyof S : keyof T>(
      valueKey: K,
    ): T extends Cell<infer S> ? Cell<S[K & keyof S]> : Cell<T[K]> => {
      const childSchema = runtime.cfc.getSchemaAtPath(
        schema,
        [valueKey.toString()],
        rootSchema,
      );
      return createCell(
        runtime,
        {
          ...link,
          path: [...path, valueKey.toString()],
          schema: childSchema,
        },
        tx,
      ) as T extends Cell<infer S> ? Cell<S[K & keyof S]> : Cell<T[K]>;
    },

    asSchema: (newSchema?: JSONSchema) =>
      createCell(
        runtime,
        { ...link, schema: newSchema, rootSchema: newSchema },
        tx,
      ),
    withTx: (newTx?: IExtendedStorageTransaction) =>
      createCell(runtime, link, newTx),
    sink: (callback: (value: T) => Cancel | undefined) =>
      subscribeToReferencedDocs(callback, runtime, link),
    sync: () => runtime.storage.syncCell(self),
    getAsQueryResult: (
      subPath: PropertyKey[] = [],
      newTx?: IExtendedStorageTransaction,
    ) =>
      createQueryResultProxy(
        runtime,
        newTx ?? tx ?? runtime.edit(),
        { ...link, path: [...path, ...subPath.map((p) => p.toString())] },
      ),
    getAsNormalizedFullLink: () => link,
    getAsLink: (
      options?: {
        base?: Cell<any>;
        baseSpace?: MemorySpace;
        includeSchema?: boolean;
      },
    ): SigilLink => {
      return createSigilLinkFromParsedLink(link, {
        ...options,
        overwrite: "this",
      });
    },
    getAsWriteRedirectLink: (
      options?: {
        base?: Cell<any>;
        baseSpace?: MemorySpace;
        includeSchema?: boolean;
      },
    ): SigilWriteRedirectLink => {
      return createSigilLinkFromParsedLink(link, {
        ...options,
        overwrite: "redirect",
      }) as SigilWriteRedirectLink;
    },
    getDoc: () => runtime.documentMap.getDocByEntityId(link.space, link.id),
    getRaw: (options?: IReadOptions) =>
      (tx?.status().status === "ready" ? tx : runtime.edit())
        .readValueOrThrow(link, options),
    setRaw: (value: any) => {
      if (!tx) throw new Error("Transaction required for setRaw");
      tx.writeValueOrThrow(link, value);
    },
    getSourceCell: (newSchema?: JSONSchema) => {
      const sourceCellId =
        (tx?.status().status === "ready" ? tx : runtime.edit())
          .readOrThrow({ ...link, path: ["source"] });
      if (!sourceCellId) return undefined;
      return createCell(runtime, {
        space: link.space,
        path: [],
        id: toURI(sourceCellId),
        type: "application/json",
        schema: newSchema,
      }, tx) as Cell<any>;
    },
    setSourceCell: (sourceCell: Cell<any>) => {
      if (!tx) throw new Error("Transaction required for setSourceCell");
      const sourceLink = sourceCell.getAsNormalizedFullLink();
      if (sourceLink.path.length > 0) {
        throw new Error("Source cell must have empty path for now");
      }
      tx.writeOrThrow({ ...link, path: ["source"] }, sourceLink.id);
    },
    freeze: (reason: string) => {
      readOnlyReason = reason;
      runtime.documentMap.getDocByEntityId(link.space, link.id)?.freeze(reason);
    },
    isFrozen: () => !!readOnlyReason,
    toJSON: (): LegacyJSONCellLink => // Keep old format for backward compatibility
    ({
      cell: {
        "/": (link.id.startsWith("data:") ? link.id : fromURI(link.id)),
      },
      path: path as (string | number)[],
    }),
    get runtime(): IRuntime {
      return runtime;
    },
    get tx(): IExtendedStorageTransaction | undefined {
      return tx;
    },
    get value(): T {
      return self.get();
    },
    get cellLink(): SigilLink {
      return createSigilLinkFromParsedLink(link);
    },
    get space(): MemorySpace {
      return space;
    },
    get entityId(): { "/": string } {
      return { "/": fromURI(link.id) };
    },
    get sourceURI(): URI {
      return link.id;
    },
    get path(): readonly PropertyKey[] {
      return path;
    },
    [isCellMarker]: true,
    get copyTrap(): boolean {
      throw new Error(
        "Copy trap: Don't copy cells. Create references instead.",
      );
    },
    schema,
    rootSchema,
  } as Cell<T>;

  return self;
}

function subscribeToReferencedDocs<T>(
  callback: (value: T) => Cancel | undefined,
  runtime: IRuntime,
  link: NormalizedFullLink,
): Cancel {
  // Get the value once to determine all the docs that need to be subscribed to.
  const tx = runtime.edit();
  const value = validateAndTransform(
    runtime,
    tx,
    link,
  );
  const log = txToReactivityLog(tx);

  // Call the callback once with initial value.
  let cleanup: Cancel | undefined = callback(value);

  tx.commit();

  const cancel = runtime.scheduler.subscribe((tx) => {
    if (isCancel(cleanup)) cleanup();

    // Run once with tx to capture _this_ cell's read dependencies.
    validateAndTransform(runtime, tx, link);

    // Using a new transaction for the callback, as we're only interested in
    // dependencies for the initial get, not further cells the callback might
    // read. The callback is responsible for calling sink on those cells if it
    // wants to stay updated.

    const extraTx = runtime.edit();

    const newValue = validateAndTransform(runtime, extraTx, link);
    cleanup = callback(newValue);

    // no async await here, but that also means no retry. TODO(seefeld): Should
    // we add a retry? So far all sinks are read-only, so they get re-triggered
    // on changes already.
    extraTx.commit();
  }, log);

  return () => {
    cancel();
    if (isCancel(cleanup)) cleanup();
  };
}

/**
 * Check if value is a simple cell.
 *
 * @param {any} value - The value to check.
 * @returns {boolean}
 */
export function isCell(value: any): value is Cell<any> {
  return isRecord(value) && value[isCellMarker] === true;
}

const isCellMarker = Symbol("isCell");

/**
 * Type guard to check if a value is a Stream.
 * @param value - The value to check
 * @returns True if the value is a Stream
 */
export function isStream(value: any): value is Stream<any> {
  return isRecord(value) && value[isStreamMarker] === true;
}

const isStreamMarker = Symbol("isStream");
