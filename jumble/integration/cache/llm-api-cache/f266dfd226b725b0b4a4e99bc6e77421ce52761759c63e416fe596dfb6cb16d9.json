{
  "model": "anthropic:claude-3-7-sonnet-latest",
  "system": "# React Component Builder\n\nCreate an interactive React component that fulfills the user's request. Focus on delivering a clean, useful implementation with appropriate features.\n\n## Required Elements\n- Define a title with `const title = 'Your App Name';`\n- Implement both `onLoad` and `onReady` functions\n- Use Tailwind CSS for styling with tasteful defaults\n\n## Code Structure\n1. React and ReactDOM are pre-imported - don't import them again\n2. All React hooks must be namespaced (e.g., `React.useState`, `React.useEffect`)\n3. Follow React hooks rules - never nest or conditionally call hooks\n4. Define components within the `onReady` function\n5. For form handling, use `onClick` handlers instead of `onSubmit`\n\n## Available APIs\n- **useDoc(key, defaultValue)** - Persistent data storage with real-time updates (follows React hook rules)\n- **llm(promptPayload)** - Send requests to the language model\n- **readWebpage(url)** - Fetch and parse external web content\n- **generateImage(prompt)** - Create AI-generated images\n\n## Important Note About useDoc\n- **useDoc is a React Hook** and must follow all React hook rules\n- Only call useDoc at the top level of your function components or custom hooks\n- Do not call useDoc inside loops, conditions, or nested functions\n- useDoc cannot be used outside of React components - it must be called during rendering\n\n## Library Usage\n- Request additional libraries in `onLoad` by returning an array of module names\n- Available libraries:\n  - imports : [object Object]\n- Only use the explicitly provided libraries\n\n## Security Restrictions\n- Do not use browser dialog functions (`prompt()`, `alert()`, `confirm()`)\n- Avoid any methods that could compromise security or user experience\n\n<view-model-schema>\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"values\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"updater\": {\n      \"asStream\": true,\n      \"type\": \"object\",\n      \"properties\": {\n        \"newValues\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"title\": \"Update Values\",\n      \"description\": \"Append `newValues` to the list.\",\n      \"example\": {\n        \"newValues\": [\n          \"foo\",\n          \"bar\"\n        ]\n      },\n      \"default\": {\n        \"newValues\": []\n      }\n    },\n    \"$UI\": {\n      \"type\": \"object\"\n    },\n    \"$NAME\": {\n      \"type\": \"string\"\n    }\n  },\n  \"description\": \"count of values\"\n}\n</view-model-schema>\n\n<guide>\n# SDK Usage Guide\n\n## 1. `useDoc` Hook\n\nThe `useDoc` hook subscribes to real-time updates for a given key and returns a tuple `[doc, setDoc]`:\n\nAny keys from the view-model-schema are valid for useDoc, any other keys will fail. Provide a default as the second argument, **do not set an initial value explicitly**.\n\n**Important**: useDoc is a React Hook and must follow React Hook Rules:\n- Only call useDoc at the top level of your function components or custom hooks\n- Do not call useDoc inside loops, conditions, or nested functions\n- It cannot be used outside React components\n\nFor this schema:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"counter\": {\n      \"type\": \"number\",\n    },\n    \"title\": {\n      \"type\": \"string\",\n      \"default\": \"My Counter App\"\n    }\n  }\n}\n```\n\n```jsx\nfunction CounterComponent() {\n  // Correct: useDoc called at top level of component\n  const [counter, setCounter] = useDoc(\"counter\", -1); // default\n  const [title, setTitle] = useDoc(\"title\", \"My Counter App\"); // default\n\n  // Incorrect: would cause errors\n  // if(something) {\n  //   const [data, setData] = useDoc(\"data\", {}); // Never do this!\n  // }\n\n  return (\n    <div>\n      <h2>{title}</h2>\n      <button onClick={() => setTitle(Math.random().toString(36).substring(2, 15))}>\n        Randomize Title\n      </button>\n      <button onClick={() => setCounter(counter + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n}\n```\n\n## 2. llm Function\n\n```jsx\nasync function fetchLLMResponse() {\n  const promptPayload = { messages: ['Hi', 'How can I help you today?', 'tell me a joke']};\n  try {\n    const result = await llm(promptPayload);\n    console.log('LLM responded:', result);\n  } catch (error) {\n    console.error('LLM error:', error);\n  }\n}\n```\n\n## 3. readWebpage Function\n\n```jsx\nasync function fetchFromUrl() {\n  const url = 'https://twopm.studio';\n  try {\n    const result = await readWebpage(url);\n    console.log('Markdown:', result.content);\n  } catch (error) {\n    console.error('readWebpage error:', error);\n  }\n}\n```\n\n## 4. generateImage Function\n\n```jsx\nfunction ImageComponent() {\n  return <img src={generateImage(\"A beautiful sunset over mountains\")} alt=\"Generated landscape\" />;\n}\n```\n## 5. Using the Interface Functions\n\n```javascript\n// Import from modern ESM libraries:\n//   - react\n//   - react-dom\n//   - react-dom/client\n//   - d3\n//   - moment\n//   - marked\n//   - @react-spring/web\n//   - @use-gesture/react\n//   - uuid\n//   - tone\nfunction onLoad() {\n  return ['@react-spring/web']; // Request the modules you need\n}\n\nconst title = 'My ESM App';\n\n// Main application code with modules passed as third parameter\nfunction onReady(mount, sourceData, libs) {\n  const { useState, useEffect } = React; // React is available globally\n  const { useSpring, animated } = libs['@react-spring/web']; // Access imported module\n\n  function MyApp() {\n    const [count, setCount] = useDoc('count', 0);\n    const props = useSpring({\n      from: { opacity: 0 },\n      to: { opacity: 1 }\n    });\n\n    return (\n      <div className=\"p-4\">\n        <animated.div style={props}>\n          <h1 className=\"text-2xl font-bold\">Hello ESM World!</h1>\n          <button\n            className=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded\"\n            onClick={() => setCount(count + 1)}\n          >\n            Clicks: {count}\n          </button>\n        </animated.div>\n      </div>\n    );\n  }\n\n  // Use the client API for React 18\n  const root = ReactDOM.createRoot(mount);\n  root.render(<MyApp />);\n}\n```\n</guide>\n",
  "messages": [
    {
      "role": "user",
      "content": "The user asked you to create the source code with the following comments:\n```\ncount of values\n```"
    },
    {
      "role": "assistant",
      "content": "\nconst title = 'Value Counter';\n\nfunction onLoad() {\n  return []; // No additional libraries needed\n}\n\nfunction onReady(mount, sourceData) {\n  const { useState, useEffect } = React;\n\n  function ValueCounter() {\n    // Use the useDoc hook to persist values\n    const [values, setValues] = useDoc('values', []);\n    const [inputValue, setInputValue] = useState('');\n    const [error, setError] = useState('');\n    const [showSuccess, setShowSuccess] = useState(false);\n\n    // Handle adding a new value\n    const handleAddValue = () => {\n      if (!inputValue.trim()) {\n        setError('Please enter a value');\n        return;\n      }\n      \n      // Add the new value to the array\n      const newValues = [...values, inputValue.trim()];\n      setValues(newValues);\n      \n      // Reset input and show success message\n      setInputValue('');\n      setError('');\n      setShowSuccess(true);\n      \n      // Hide success message after 2 seconds\n      setTimeout(() => {\n        setShowSuccess(false);\n      }, 2000);\n    };\n\n    // Handle removing a value\n    const handleRemoveValue = (index) => {\n      const newValues = [...values];\n      newValues.splice(index, 1);\n      setValues(newValues);\n    };\n\n    // Handle clearing all values\n    const handleClearAll = () => {\n      setValues([]);\n    };\n\n    // Handle key press (Enter to add)\n    const handleKeyPress = (e) => {\n      if (e.key === 'Enter') {\n        handleAddValue();\n      }\n    };\n\n    return (\n      <div className=\"max-w-md mx-auto p-6 bg-white rounded-lg shadow-lg\">\n        <h1 className=\"text-2xl font-bold text-center mb-6 text-blue-600\">Value Counter</h1>\n        \n        {/* Input section */}\n        <div className=\"mb-6\">\n          <div className=\"flex\">\n            <input\n              type=\"text\"\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Enter a value\"\n              className=\"flex-1 px-4 py-2 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n            <button\n              onClick={handleAddValue}\n              className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-r-lg transition duration-200\"\n            >\n              Add\n            </button>\n          </div>\n          {error && <p className=\"text-red-500 text-sm mt-1\">{error}</p>}\n          {showSuccess && <p className=\"text-green-500 text-sm mt-1\">Value added successfully!</p>}\n        </div>\n        \n        {/* Counter display */}\n        <div className=\"bg-gray-100 p-4 rounded-lg mb-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-lg font-semibold\">Total Values</h2>\n            <span className=\"bg-blue-500 text-white px-3 py-1 rounded-full font-bold\">\n              {values.length}\n            </span>\n          </div>\n        </div>\n        \n        {/* Values list */}\n        <div className=\"mb-4\">\n          <h2 className=\"text-lg font-semibold mb-2\">Values List</h2>\n          {values.length === 0 ? (\n            <p className=\"text-gray-500 italic\">No values added yet</p>\n          ) : (\n            <ul className=\"bg-gray-50 rounded-lg divide-y divide-gray-200\">\n              {values.map((value, index) => (\n                <li key={index} className=\"px-4 py-3 flex justify-between items-center\">\n                  <span className=\"break-all\">{value}</span>\n                  <button\n                    onClick={() => handleRemoveValue(index)}\n                    className=\"ml-2 text-red-500 hover:text-red-700\"\n                    title=\"Remove\"\n                  >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                      <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                    </svg>\n                  </button>\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n        \n        {/* Clear all button */}\n        {values.length > 0 && (\n          <div className=\"text-center\">\n            <button\n              onClick={handleClearAll}\n              className=\"bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg transition duration-200\"\n            >\n              Clear All Values\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  // Render the app\n  const root = ReactDOM.createRoot(mount);\n  root.render(<ValueCounter />);\n}\n```\n\nThis Value Counter app allows users to:\n\n1. Add values to a persistent list\n2. See a count of the total values\n3. Remove individual values\n4. Clear all values at once\n\nThe app features:\n- Real-time counter display\n- Input validation\n- Success/error messages\n- Responsive design with Tailwind CSS\n- Keyboard support (press Enter to add)\n- Persistent storage using the useDoc hook\n\nThe interface is clean and intuitive, making it easy to track and manage your list of values."
    },
    {
      "role": "assistant",
      "content": "\nconst title = 'Value Counter';\n\nfunction onLoad() {\n  return []; // No additional libraries needed\n}\n\nfunction onReady(mount, sourceData) {\n  const { useState, useEffect } = React;\n\n  function ValueCounter() {\n    // Use the useDoc hook to persist values\n    const [values, setValues] = useDoc('values', []);\n    const [inputValue, setInputValue] = useState('');\n    const [error, setError] = useState('');\n    const [showSuccess, setShowSuccess] = useState(false);\n\n    // Handle adding a new value\n    const handleAddValue = () => {\n      if (!inputValue.trim()) {\n        setError('Please enter a value');\n        return;\n      }\n      \n      // Add the new value to the array\n      const newValues = [...values, inputValue.trim()];\n      setValues(newValues);\n      \n      // Reset input and show success message\n      setInputValue('');\n      setError('');\n      setShowSuccess(true);\n      \n      // Hide success message after 2 seconds\n      setTimeout(() => {\n        setShowSuccess(false);\n      }, 2000);\n    };\n\n    // Handle removing a value\n    const handleRemoveValue = (index) => {\n      const newValues = [...values];\n      newValues.splice(index, 1);\n      setValues(newValues);\n    };\n\n    // Handle clearing all values\n    const handleClearAll = () => {\n      setValues([]);\n    };\n\n    // Handle key press (Enter to add)\n    const handleKeyPress = (e) => {\n      if (e.key === 'Enter') {\n        handleAddValue();\n      }\n    };\n\n    return (\n      <div className=\"max-w-md mx-auto p-6 bg-white rounded-lg shadow-lg\">\n        <h1 className=\"text-2xl font-bold text-center mb-6 text-blue-600\">Value Counter</h1>\n        \n        {/* Input section */}\n        <div className=\"mb-6\">\n          <div className=\"flex\">\n            <input\n              type=\"text\"\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Enter a value\"\n              className=\"flex-1 px-4 py-2 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n            <button\n              onClick={handleAddValue}\n              className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-r-lg transition duration-200\"\n            >\n              Add\n            </button>\n          </div>\n          {error && <p className=\"text-red-500 text-sm mt-1\">{error}</p>}\n          {showSuccess && <p className=\"text-green-500 text-sm mt-1\">Value added successfully!</p>}\n        </div>\n        \n        {/* Counter display */}\n        <div className=\"bg-gray-100 p-4 rounded-lg mb-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-lg font-semibold\">Total Values</h2>\n            <span className=\"bg-blue-500 text-white px-3 py-1 rounded-full font-bold\">\n              {values.length}\n            </span>\n          </div>\n        </div>\n        \n        {/* Values list */}\n        <div className=\"mb-4\">\n          <h2 className=\"text-lg font-semibold mb-2\">Values List</h2>\n          {values.length === 0 ? (\n            <p className=\"text-gray-500 italic\">No values added yet</p>\n          ) : (\n            <ul className=\"bg-gray-50 rounded-lg divide-y divide-gray-200\">\n              {values.map((value, index) => (\n                <li key={index} className=\"px-4 py-3 flex justify-between items-center\">\n                  <span className=\"break-all\">{value}</span>\n                  <button\n                    onClick={() => handleRemoveValue(index)}\n                    className=\"ml-2 text-red-500 hover:text-red-700\"\n                    title=\"Remove\"\n                  >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                      <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                    </svg>\n                  </button>\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n        \n        {/* Clear all button */}\n        {values.length > 0 && (\n          <div className=\"text-center\">\n            <button\n              onClick={handleClearAll}\n              className=\"bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg transition duration-200\"\n            >\n              Clear All Values\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  // Render the app\n  const root = ReactDOM.createRoot(mount);\n  root.render(<ValueCounter />);\n}\n```\n\nThis Value Counter app allows users to:\n\n1. Add values to a persistent list\n2. See a count of the total values\n3. Remove individual values\n4. Clear all values at once\n\nThe app features:\n- Real-time counter display\n- Input validation\n- Success/error messages\n- Responsive design with Tailwind CSS\n- Keyboard support (press Enter to add)\n- Persistent storage using the useDoc hook\n\nThe interface is clean and intuitive, making it easy to track and manage your list of values."
    }
  ],
  "stop": "\n```",
  "stream": false
}