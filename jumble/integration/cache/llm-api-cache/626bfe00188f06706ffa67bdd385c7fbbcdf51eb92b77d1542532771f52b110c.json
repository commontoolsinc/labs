{
  "model": "anthropic:claude-3-7-sonnet-latest",
  "system": "\nYou are creating a simple MVP based on the user's goal, using an existing data schema. Focus on the simplest implementation that works with the provided schema.\n\nGiven a user's feature request and an existing data schema, you will:\n1. Create a short title (2-5 words) that names the artifact\n2. Create a one-sentence description in the format \"A <artifact> to <goal>\"\n3. Create a concise specification (3-5 sentences max) that works with the existing schema\n4. Generate a brief implementation plan (3 steps max)\n5. Design a minimal JSON schema that represents the core data model\n\nYour response must be structured as follows:\n\n<title>\n[Short title for the artifact, 2-5 words]\n</title>\n\n<description>\n[One-sentence description in the format \"A <artifact> to <goal>\"]\n</description>\n\n<spec>\n[Concise specification that captures only the essential requirements]\n</spec>\n\n<plan>\n[Brief 3-step implementation plan using the existing schema]\n</plan>\n\n<result_schema>\n[Minimal JSON Schema in valid JSON format that represents data created by the artifact]\n</result_schema>\n\nSCHEMA GUIDELINES:\n1. Keep it minimal:\n   - Include only essential fields (5-7 properties max)\n   - Focus on the core functionality\n   - If user requested complex features, simplify for this first version\n\n2. Each property should have:\n   - A descriptive \"title\" field\n   - A brief \"description\" field\n   - A sensible default value where appropriate\n\n3. Example of a simple schema:\n```json\n{\n  \"type\": \"object\",\n  \"title\": \"Note List\",\n  \"description\": \"A simple note list for the user\",\n  \"properties\": {\n    \"notes\": {\n      \"type\": \"array\",\n      \"title\": \"Notes\",\n      \"description\": \"List of user notes\",\n      \"default\": [],\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"title\": {\n            \"type\": \"string\",\n            \"title\": \"Title\",\n            \"description\": \"Title of the note\",\n            \"default\": \"New Note\"\n          },\n          \"content\": {\n            \"type\": \"string\",\n            \"title\": \"Content\",\n            \"description\": \"Content of the note\"\n          },\n          \"created\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"title\": \"Created Date\",\n            \"description\": \"When the note was created\"\n          }\n        },\n        \"required\": [\"title\", \"content\"]\n      }\n    }\n  },\n  \"required\": [\"title\", \"content\"]\n}\n```\n\nGUIDELINES:\n- Aim for the simplest possible solution that works with the existing schema\n- The specification should take into account the existing schema structure\n- Focus on what can be achieved quickly with the existing data model\n- Avoid suggesting modifications to the schema if possible\n\nIMPORTANT:\n- Focus on the simplest working version\n- Aim for fewer fields rather than more\n- But still capture all the important state the user is creating\n- The user can always iterate and improve the solution later\n",
  "stream": false,
  "messages": [
    {
      "role": "user",
      "content": "\n\n<goal>show the data from `simpleValue2`</goal>\n\n<description>Show the data from the `simpleValue2` charm, displaying its current value and any associated metadata.</description>\n\n\nExisting Schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"simplevalue2\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"values\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nBased on this goal and the existing schema, please provide a title, description, any additional schema,detailed specification, and implementation plan.\n"
    },
    {
      "role": "assistant",
      "content": "<title>\nSimpleValue2 Viewer\n</title>\n\n<description>\nA viewer to display the current values and metadata from the simpleValue2 charm.\n</description>\n\n<spec>\nThe SimpleValue2 Viewer will display all string values stored in the simpleValue2.values array. It will show each value as a list item with its index position. The viewer will handle empty arrays gracefully by displaying a \"No values found\" message.\n</spec>\n\n<plan>\n1. Fetch the simpleValue2 data from the existing schema\n2. Parse and format the values array for display\n3. Render the values in a simple list interface with index numbers\n</plan>\n\n<result_schema>\n{\n  \"type\": \"object\",\n  \"title\": \"SimpleValue2 Viewer\",\n  \"description\": \"Displays the values from the simpleValue2 charm\",\n  \"properties\": {\n    \"values\": {\n      \"type\": \"array\",\n      \"title\": \"Values\",\n      \"description\": \"List of string values from simpleValue2\",\n      \"default\": [],\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"index\": {\n            \"type\": \"integer\",\n            \"title\": \"Index\",\n            \"description\": \"Position in the values array\",\n            \"default\": 0\n          },\n          \"value\": {\n            \"type\": \"string\",\n            \"title\": \"Value\",\n            \"description\": \"The string value at this position\"\n          },\n          \"displayText\": {\n            \"type\": \"string\",\n            \"title\": \"Display Text\",\n            \"description\": \"Formatted text for display\",\n            \"default\": \"\"\n          }\n        },\n        \"required\": [\"index\", \"value\"]\n      }\n    },\n    \"isEmpty\": {\n      \"type\": \"boolean\",\n      \"title\": \"Is Empty\",\n      \"description\": \"Whether the values array is empty\",\n      \"default\": true\n    }\n  },\n  \"required\": [\"values\", \"isEmpty\"]\n}\n</result_schema>"
    }
  ],
  "maxTokens": 64000
}