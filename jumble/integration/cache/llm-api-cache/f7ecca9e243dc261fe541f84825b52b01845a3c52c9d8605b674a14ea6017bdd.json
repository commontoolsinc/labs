{
  "model": "anthropic:claude-3-7-sonnet-latest",
  "system": "# React Component Builder\n\nCreate an interactive React component that fulfills the user's request. Focus on delivering a clean, useful implementation with appropriate features.\n\n## You Are Part of a Two-Phase Process\n\n1. First phase (already completed):\n   - Analyzed the user's request\n   - Created a detailed specification\n   - Generated a structured data schema\n\n2. Your job (second phase):\n   - Create a reactive UI component based on the provided specification and schema\n   - Implement the UI exactly according to the specification\n   - Strictly adhere to the data schema provided\n\n## Required Elements\n- Define a title with `const title = 'Your App Name';`\n- Implement both `onLoad` and `onReady` functions\n- Use Tailwind CSS for styling with tasteful defaults\n\n## Code Structure\n1. React and ReactDOM are pre-imported - don't import them again\n2. All React hooks must be namespaced (e.g., `React.useState`, `React.useEffect`)\n3. Follow React hooks rules - never nest or conditionally call hooks\n4. Define components within the `onReady` function\n5. For form handling, use `onClick` handlers instead of `onSubmit`\n\n## Available APIs\n- **useDoc(key, defaultValue)** - Persistent data storage with real-time updates (follows React hook rules)\n- **llm(promptPayload)** - Send requests to the language model\n- **readWebpage(url)** - Fetch and parse external web content\n- **generateImage(prompt)** - Create AI-generated images\n\n## Important Note About useDoc\n- **useDoc is a React Hook** and must follow all React hook rules\n- Only call useDoc at the top level of your function components or custom hooks\n- Do not call useDoc inside loops, conditions, or nested functions\n- useDoc cannot be used outside of React components - it must be called during rendering\n\n## Library Usage\n- Request additional libraries in `onLoad` by returning an array of module names\n- Available libraries:\n  - imports : [object Object]\n- Only use the explicitly provided libraries\n\n## Security Restrictions\n- Do not use browser dialog functions (`prompt()`, `alert()`, `confirm()`)\n- Avoid any methods that could compromise security or user experience\n\n<view-model-schema>\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"values\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"updater\": {\n      \"asStream\": true,\n      \"type\": \"object\",\n      \"properties\": {\n        \"newValues\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"title\": \"Update Values\",\n      \"description\": \"Append `newValues` to the list.\",\n      \"example\": {\n        \"newValues\": [\n          \"foo\",\n          \"bar\"\n        ]\n      },\n      \"default\": {\n        \"newValues\": []\n      }\n    },\n    \"$UI\": {\n      \"type\": \"object\"\n    },\n    \"$NAME\": {\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"Values Counter\",\n  \"description\": \"A component to display the count of values in the array.\"\n}\n</view-model-schema>\n\n<guide>\n# SDK Usage Guide\n\n## 1. `useDoc` Hook\n\nThe `useDoc` hook subscribes to real-time updates for a given key and returns a tuple `[doc, setDoc]`:\n\nAny keys from the view-model-schema are valid for useDoc, any other keys will fail. Provide a default as the second argument, **do not set an initial value explicitly**.\n\n**Important**: useDoc is a React Hook and must follow React Hook Rules:\n- Only call useDoc at the top level of your function components or custom hooks\n- Do not call useDoc inside loops, conditions, or nested functions\n- It cannot be used outside React components\n\nFor this schema:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"counter\": {\n      \"type\": \"number\",\n    },\n    \"title\": {\n      \"type\": \"string\",\n      \"default\": \"My Counter App\"\n    }\n  }\n}\n```\n\n```jsx\nfunction CounterComponent() {\n  // Correct: useDoc called at top level of component\n  const [counter, setCounter] = useDoc(\"counter\", -1); // default\n  const [title, setTitle] = useDoc(\"title\", \"My Counter App\"); // default\n\n  // Incorrect: would cause errors\n  // if(something) {\n  //   const [data, setData] = useDoc(\"data\", {}); // Never do this!\n  // }\n\n  return (\n    <div>\n      <h2>{title}</h2>\n      <button onClick={() => setTitle(Math.random().toString(36).substring(2, 15))}>\n        Randomize Title\n      </button>\n      <button onClick={() => setCounter(counter + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n}\n```\n\n## 2. llm Function\n\n```jsx\nasync function fetchLLMResponse() {\n  const promptPayload = { messages: ['Hi', 'How can I help you today?', 'tell me a joke']};\n  try {\n    const result = await llm(promptPayload);\n    console.log('LLM responded:', result);\n  } catch (error) {\n    console.error('LLM error:', error);\n  }\n}\n```\n\n## 3. readWebpage Function\n\n```jsx\nasync function fetchFromUrl() {\n  const url = 'https://twopm.studio';\n  try {\n    const result = await readWebpage(url);\n    console.log('Markdown:', result.content);\n  } catch (error) {\n    console.error('readWebpage error:', error);\n  }\n}\n```\n\n## 4. generateImage Function\n\n```jsx\nfunction ImageComponent() {\n  return <img src={generateImage(\"A beautiful sunset over mountains\")} alt=\"Generated landscape\" />;\n}\n```\n## 5. Using the Interface Functions\n\n```javascript\n// Import from modern ESM libraries:\n//   - react\n//   - react-dom\n//   - react-dom/client\n//   - d3\n//   - moment\n//   - marked\n//   - @react-spring/web\n//   - @use-gesture/react\n//   - uuid\n//   - tone\nfunction onLoad() {\n  return ['@react-spring/web']; // Request the modules you need\n}\n\nconst title = 'My ESM App';\n\n// Main application code with modules passed as third parameter\nfunction onReady(mount, sourceData, libs) {\n  const { useState, useEffect } = React; // React is available globally\n  const { useSpring, animated } = libs['@react-spring/web']; // Access imported module\n\n  function MyApp() {\n    const [count, setCount] = useDoc('count', 0);\n    const props = useSpring({\n      from: { opacity: 0 },\n      to: { opacity: 1 }\n    });\n\n    return (\n      <div className=\"p-4\">\n        <animated.div style={props}>\n          <h1 className=\"text-2xl font-bold\">Hello ESM World!</h1>\n          <button\n            className=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded\"\n            onClick={() => setCount(count + 1)}\n          >\n            Clicks: {count}\n          </button>\n        </animated.div>\n      </div>\n    );\n  }\n\n  // Use the client API for React 18\n  const root = ReactDOM.createRoot(mount);\n  root.render(<MyApp />);\n}\n```\n</guide>\n",
  "messages": [
    {
      "role": "user",
      "content": "The user asked you to create the source code with the following specification:\n```\nGOAL: The Values Counter will display the total number of items in the \"values\" array. It will update automatically whenever new values are added through the \"updater\" stream. The counter will be displayed in the UI with a simple label indicating the count.\n        \nThe Values Counter will display the total number of items in the \"values\" array. It will update automatically whenever new values are added through the \"updater\" stream. The counter will be displayed in the UI with a simple label indicating the count.\n```"
    },
    {
      "role": "assistant",
      "content": "\nconst title = 'Values Counter';\n\nfunction onLoad() {\n  return []; // No additional libraries needed\n}\n\nfunction onReady(mount, sourceData) {\n  const { useState, useEffect } = React;\n\n  function ValuesCounter() {\n    // Use the useDoc hook to access and update the values array\n    const [values, setValues] = useDoc('values', []);\n    // Access the updater stream\n    const [updater, setUpdater] = useDoc('updater', { newValues: [] });\n\n    // Effect to handle the updater stream\n    React.useEffect(() => {\n      if (updater && updater.newValues && updater.newValues.length > 0) {\n        // Append new values to the existing values array\n        setValues([...values, ...updater.newValues]);\n        // Reset the updater after processing\n        setUpdater({ newValues: [] });\n      }\n    }, [updater, values, setValues, setUpdater]);\n\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100 p-6\">\n        <div className=\"bg-white rounded-lg shadow-lg p-8 max-w-md w-full\">\n          <h1 className=\"text-3xl font-bold text-center text-blue-600 mb-6\">{title}</h1>\n          \n          <div className=\"flex items-center justify-center\">\n            <div className=\"bg-blue-100 rounded-lg p-6 text-center w-full\">\n              <p className=\"text-lg text-gray-700 mb-2\">Total Values:</p>\n              <div className=\"text-5xl font-bold text-blue-700\">{values.length}</div>\n            </div>\n          </div>\n          \n          {values.length > 0 && (\n            <div className=\"mt-6\">\n              <h2 className=\"text-xl font-semibold text-gray-700 mb-3\">Values List:</h2>\n              <div className=\"bg-gray-50 rounded-lg p-4 max-h-60 overflow-y-auto\">\n                <ul className=\"list-disc pl-5 space-y-1\">\n                  {values.map((value, index) => (\n                    <li key={index} className=\"text-gray-600\">{value}</li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  // Render the component\n  const root = ReactDOM.createRoot(mount);\n  root.render(<ValuesCounter />);\n}\n```\n\nThis Values Counter component:\n\n1. Displays the total count of items in the \"values\" array\n2. Updates automatically when new values are added through the \"updater\" stream\n3. Shows a clean UI with:\n   - A prominent counter display\n   - A list of all values (if any exist)\n4. Uses Tailwind CSS for styling with a clean, modern design\n5. Follows all React hook rules and properly handles the data according to the schema\n\nThe component will automatically append any new values that come through the updater stream to the existing values array, and the counter will update in real-time."
    },
    {
      "role": "assistant",
      "content": "\nconst title = 'Values Counter';\n\nfunction onLoad() {\n  return []; // No additional libraries needed\n}\n\nfunction onReady(mount, sourceData) {\n  const { useState, useEffect } = React;\n\n  function ValuesCounter() {\n    // Use the useDoc hook to access and update the values array\n    const [values, setValues] = useDoc('values', []);\n    // Access the updater stream\n    const [updater, setUpdater] = useDoc('updater', { newValues: [] });\n\n    // Effect to handle the updater stream\n    React.useEffect(() => {\n      if (updater && updater.newValues && updater.newValues.length > 0) {\n        // Append new values to the existing values array\n        setValues([...values, ...updater.newValues]);\n        // Reset the updater after processing\n        setUpdater({ newValues: [] });\n      }\n    }, [updater, values, setValues, setUpdater]);\n\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100 p-6\">\n        <div className=\"bg-white rounded-lg shadow-lg p-8 max-w-md w-full\">\n          <h1 className=\"text-3xl font-bold text-center text-blue-600 mb-6\">{title}</h1>\n          \n          <div className=\"flex items-center justify-center\">\n            <div className=\"bg-blue-100 rounded-lg p-6 text-center w-full\">\n              <p className=\"text-lg text-gray-700 mb-2\">Total Values:</p>\n              <div className=\"text-5xl font-bold text-blue-700\">{values.length}</div>\n            </div>\n          </div>\n          \n          {values.length > 0 && (\n            <div className=\"mt-6\">\n              <h2 className=\"text-xl font-semibold text-gray-700 mb-3\">Values List:</h2>\n              <div className=\"bg-gray-50 rounded-lg p-4 max-h-60 overflow-y-auto\">\n                <ul className=\"list-disc pl-5 space-y-1\">\n                  {values.map((value, index) => (\n                    <li key={index} className=\"text-gray-600\">{value}</li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  // Render the component\n  const root = ReactDOM.createRoot(mount);\n  root.render(<ValuesCounter />);\n}\n```\n\nThis Values Counter component:\n\n1. Displays the total count of items in the \"values\" array\n2. Updates automatically when new values are added through the \"updater\" stream\n3. Shows a clean UI with:\n   - A prominent counter display\n   - A list of all values (if any exist)\n4. Uses Tailwind CSS for styling with a clean, modern design\n5. Follows all React hook rules and properly handles the data according to the schema\n\nThe component will automatically append any new values that come through the updater stream to the existing values array, and the counter will update in real-time."
    }
  ],
  "stop": "\n```",
  "stream": false
}