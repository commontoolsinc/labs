{
  "model": "anthropic:claude-3-7-sonnet-latest",
  "system": "# React Component Builder\n\nCreate an interactive React component that fulfills the user's request. Focus on delivering a clean, useful implementation with appropriate features.\n\n## You Are Part of a Two-Phase Process\n\n1. First phase (already completed):\n   - Analyzed the user's request\n   - Created a detailed specification\n   - Generated a structured data schema\n\n2. Your job (second phase):\n   - Create a reactive UI component based on the provided specification and schema\n   - Implement the UI exactly according to the specification\n   - Strictly adhere to the data schema provided\n\n## Required Elements\n- Define a title with `const title = 'Your App Name';`\n- Implement both `onLoad` and `onReady` functions\n- Use Tailwind CSS for styling with tasteful defaults\n- Do not write <svg> inline, use emoji for icons\n- Carefully avoid infinite loops and recursion that may cause performance issues\n\n## Code Structure\n1. React and ReactDOM are pre-imported - don't import them again\n2. All React hooks must be namespaced (e.g., `React.useState`, `React.useEffect`)\n3. Follow React hooks rules - never nest or conditionally call hooks\n4. For form handling, use `onClick` handlers instead of `onSubmit`\n\n## Available APIs\n- **useDoc(key, defaultValue)** - Persistent data storage with reactive updates\n- **llm(promptPayload)** - Send requests to the language model\n- **readWebpage(url)** - Fetch and parse external web content\n- **generateImage(prompt)** - Create AI-generated images\n\n## Important Note About useDoc\n- **useDoc is a React Hook** and must follow all React hook rules\n- It should only be used for persistent state and must draw from the provided schema\n  - For any ephemeral state, use `React.useState`\n- Only call useDoc at the top level of your function components or custom hooks\n- Do not call useDoc inside loops, conditions, or nested functions\n- useDoc cannot be used outside of `onReady` components - it must be called during rendering\n\n## Library Usage\n- Request additional libraries in `onLoad` by returning an array of module names\n- Available libraries:\n  - imports : [object Object]\n- Only use the explicitly provided libraries\n\n## Security Restrictions\n- Do not use browser dialog functions (`prompt()`, `alert()`, `confirm()`)\n- Avoid any methods that could compromise security or user experience\n\n\n<view-model-schema>\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"values\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"count\": {\n      \"type\": \"number\",\n      \"title\": \"Count\",\n      \"description\": \"Total number of values counted\",\n      \"default\": 0\n    },\n    \"type\": {\n      \"type\": \"string\",\n      \"title\": \"Input Type\",\n      \"description\": \"The detected type of the input data\",\n      \"enum\": [\n        \"array\",\n        \"object\",\n        \"string\",\n        \"number\",\n        \"boolean\",\n        \"null\"\n      ]\n    },\n    \"details\": {\n      \"type\": \"object\",\n      \"title\": \"Count Details\",\n      \"description\": \"Additional details about the count operation\",\n      \"properties\": {\n        \"isEmpty\": {\n          \"type\": \"boolean\",\n          \"title\": \"Is Empty\",\n          \"description\": \"Whether the input contains no values\",\n          \"default\": false\n        }\n      }\n    }\n  },\n  \"title\": \"Value Counter Charm\",\n  \"description\": \"A charm to count values in the current data structure.\"\n}\n</view-model-schema>\n\n<guide>\n# SDK Usage Guide\n\n## 1. `useDoc` Hook\n\nThe `useDoc` hook binds to a reactive cell given key and returns a tuple `[doc, setDoc]`:\n\nAny keys from the view-model-schema are valid for useDoc, any other keys will fail. Provide a default as the second argument, **do not set an initial value explicitly**.\n\nFor this schema:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"counter\": {\n      \"type\": \"number\",\n    },\n    \"title\": {\n      \"type\": \"string\",\n      \"default\": \"My Counter App\"\n    }\n  }\n}\n```\n\n```jsx\nfunction CounterComponent() {\n  // Correct: useDoc called at top level of component\n  const [counter, setCounter] = useDoc(\"counter\", -1); // default\n\n  // Incorrect: would cause errors\n  // if(something) {\n  //   const [data, setData] = useDoc(\"data\", {}); // Never do this!\n  // }\n\n  const onIncrement = useCallback(() => {\n    // writing to the cell automatically triggers a re-render\n    setCounter(counter + 1);\n  }, [counter]);\n\n  return (\n    <button onClick={onIncrement}>\n      Increment\n    </button>\n  );\n}\n```\n\n## 2. llm Function\n\n```jsx\nasync function fetchLLMResponse() {\n  // place user-level requirements in system prompt\n  const promptPayload = {\n    system: 'Translate all the messages to emojis, reply in JSON.',\n    messages: ['Hi', 'How can I help you today?', 'tell me a joke']\n  };\n  // grabJson is available on the window, string -> JSON\n  const result = grabJson(await llm(promptPayload));\n  console.log('LLM responded:', result);\n}\n```\n\n## 3. readWebpage Function\n\n```jsx\nasync function fetchFromUrl() {\n  const url = 'https://twopm.studio';\n  const result = await readWebpage(url);\n  console.log('Markdown:', result.content);\n}\n```\n\n## 4. generateImage Function\n\n```jsx\nfunction ImageComponent() {\n  return <img src={generateImage(\"A beautiful sunset over mountains\")} alt=\"Generated landscape\" />;\n}\n\n```\n## 5. Using the Interface Functions\n\n```javascript\n// Import from modern ESM libraries:\n//   - react\n//   - react-dom\n//   - react-dom/client\n//   - d3\n//   - moment\n//   - marked\n//   - @react-spring/web\n//   - @use-gesture/react\n//   - uuid\n//   - tone\nfunction onLoad() {\n  return ['@react-spring/web']; // Request the modules you need\n}\n\nconst title = 'My ESM App';\nfunction ImageComponent({ url }) {\n  return <img src={url} alt=\"Generated landscape\" />;\n}\n\nfunction MyComponent({ label, description }) {\n  return (\n    <div>\n      <h2>{label}</h2>\n      <p>{description}</p>\n      <ImageComponent url={generateImage(\"A beautiful sunset over mountains\")} />\n    </div>\n  );\n}\n\nfunction TodoItem({ todo, onToggle, onDelete }) {\n  return (\n    <div className=\"flex items-center p-2 border-b\">\n      <input\n        type=\"checkbox\"\n        checked={todo.completed}\n        onChange={onToggle}\n        className=\"mr-2\"\n      />\n      <span className={`flex-grow ${todo.completed ? 'line-through text-gray-500' : ''}`}>\n        {todo.text}\n      </span>\n      <button\n        onClick={onDelete}\n        className=\"px-2 py-1 bg-red-500 text-white rounded\"\n      >\n        Delete\n      </button>\n    </div>\n  );\n}\n\nfunction TodoList({ todo, setTodos}) {\n  const [newTodo, setNewTodo] = React.useState('');\n\n  const addTodo = () => {\n    if (newTodo.trim() === '') return;\n\n    const newTodoItem = {\n      id: Date.now(),\n      text: newTodo,\n      completed: false\n    };\n\n    setTodos([...todos, newTodoItem]);\n    setNewTodo('');\n  };\n\n  const toggleTodo = (id) => {\n    setTodos(todos.map(todo =>\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  };\n\n  const deleteTodo = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto mt-4 p-4 bg-white rounded shadow\">\n      <h2 className=\"text-xl font-bold mb-4\">Todo List</h2>\n\n      <div className=\"flex mb-4\">\n        <input\n          type=\"text\"\n          value={newTodo}\n          onChange={(e) => setNewTodo(e.target.value)}\n          placeholder=\"Add a new todo\"\n          className=\"flex-grow p-2 border rounded-l\"\n        />\n        <button\n          onClick={addTodo}\n          className=\"px-4 py-2 bg-blue-500 text-white rounded-r\"\n        >\n          Add\n        </button>\n      </div>\n\n      <div className=\"border rounded\">\n        {todos.length > 0 ? (\n          todos.map(todo => (\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              onToggle={() => toggleTodo(todo.id)}\n              onDelete={() => deleteTodo(todo.id)}\n            />\n          ))\n        ) : (\n          <p className=\"p-2 text-center text-gray-500\">No todos yet!</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Main application code with modules passed as third parameter\nfunction onReady(mount, sourceData, libs) {\n  const { useState, useEffect } = React; // React is available globally\n  const { useSpring, animated } = libs['@react-spring/web']; // Access imported module\n\n  function MyApp() {\n    const [count, setCount] = useDoc('count', 0);\n    const [todos, setTodos] = useDoc('todos', [\n      { id: 1, text: 'Learn React', completed: false },\n      { id: 2, text: 'Build a Todo App', completed: false }\n    ]);\n    const props = useSpring({\n      from: { opacity: 0 },\n      to: { opacity: 1 }\n    });\n\n    return (\n      <div className=\"p-4\">\n        <animated.div style={props}>\n          <button\n            className=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded\"\n            onClick={() => setCount(count + 1)}\n          >\n            Clicks: {count}\n          </button>\n        </animated.div>\n        <TodoList todos={todos} setTodos={setTodos} />\n      </div>\n    );\n  }\n\n  // Use the client API for React 18\n  const root = ReactDOM.createRoot(mount);\n  root.render(<MyApp />);\n}\n```\n</guide>\n",
  "messages": [
    {
      "role": "user",
      "content": "The user asked you to create the source code with the following specification:\n```\n<REQUEST>\n<goal>count the values in current</goal>\n<plan><step>Analyze the user's request to understand what \"count the values in current\" means</step>\n<step>Design a simple charm that counts values in an array or object</step>\n<step>Create a function to handle different data types (arrays, objects, strings, etc.)</step>\n<step>Implement logic to count values based on the data type</step>\n<step>Format and return the count results in a clear, readable format</step></plan>\n<description>This charm counts the values in the provided input data. It analyzes the input and determines the appropriate counting method based on the data type. For arrays, it counts the number of elements. For objects, it counts the number of properties. For strings, it counts characters, words, or lines based on configuration. For numbers, it simply returns 1 (as a number is a single value). The charm provides a simple way to get a quick count of elements in any data structure, which is useful for data analysis, validation, or simply understanding the size of a dataset.</description>\n<data>\"Input: Any → can be array, object, string, number, boolean\\nProcessing: \\n- Array → count elements → number\\n- Object → count properties → number\\n- String → count characters/words/lines → {characters: number, words: number, lines: number}\\n- Number/Boolean → return 1\\n- Null/Undefined → return 0\\n\\nOutput: \\n- Simple types: number (the count)\\n- Complex types: {count: number, details: object} where details provides additional information about the counting operation\\n\\nThe charm processes the input data directly without requiring references to other charms.\"</data>\n</REQUEST>\n<PLAN>1. Create a function that accepts the current data as input\n2. Implement type detection and appropriate counting logic for each data type\n3. Return a structured result with the count and any relevant details</PLAN>\n<SPEC>This charm analyzes the input data and returns a count of its values. It handles different data types including arrays, objects, strings, numbers, and booleans. For the existing schema with an array of strings, it will count the number of elements in the array. The result includes a total count and optional details based on the data type.</SPEC>\n```"
    },
    {
      "role": "assistant",
      "content": "\nfunction onLoad() {\n  return [];\n}\n\nconst title = 'Value Counter Charm';\n\nfunction onReady(mount, sourceData) {\n  function ValueCounter() {\n    // State for the input data\n    const [values, setValues] = useDoc('values', []);\n    const [count, setCount] = useDoc('count', 0);\n    const [type, setType] = useDoc('type', 'array');\n    const [details, setDetails] = useDoc('details', { isEmpty: false });\n    \n    // State for the input field\n    const [inputValue, setInputValue] = React.useState('');\n    const [error, setError] = React.useState('');\n\n    // Function to count values based on data type\n    const countValues = (data) => {\n      // Determine the type of data\n      let dataType = Array.isArray(data) ? 'array' : typeof data;\n      \n      // Set the detected type\n      setType(dataType);\n      \n      // Count based on type\n      let countResult = 0;\n      let detailsResult = { isEmpty: false };\n      \n      switch (dataType) {\n        case 'array':\n          countResult = data.length;\n          detailsResult.isEmpty = data.length === 0;\n          break;\n        case 'object':\n          if (data === null) {\n            dataType = 'null';\n            countResult = 0;\n            detailsResult.isEmpty = true;\n          } else {\n            countResult = Object.keys(data).length;\n            detailsResult.isEmpty = Object.keys(data).length === 0;\n          }\n          break;\n        case 'string':\n          countResult = data.length;\n          detailsResult.isEmpty = data.length === 0;\n          detailsResult.words = data.trim() ? data.trim().split(/\\s+/).length : 0;\n          detailsResult.lines = data.split('\\n').length;\n          break;\n        case 'number':\n        case 'boolean':\n          countResult = 1;\n          detailsResult.isEmpty = false;\n          break;\n        case 'undefined':\n          countResult = 0;\n          detailsResult.isEmpty = true;\n          break;\n        default:\n          countResult = 0;\n          detailsResult.isEmpty = true;\n      }\n      \n      // Update state with results\n      setCount(countResult);\n      setDetails(detailsResult);\n      \n      return { count: countResult, type: dataType, details: detailsResult };\n    };\n\n    // Handle form submission\n    const handleSubmit = () => {\n      try {\n        // Try to parse the input as JSON\n        let parsedData;\n        try {\n          parsedData = JSON.parse(inputValue);\n        } catch (e) {\n          // If not valid JSON, treat as a string\n          parsedData = inputValue;\n        }\n        \n        // If it's an array of strings, update the values\n        if (Array.isArray(parsedData) && parsedData.every(item => typeof item === 'string')) {\n          setValues(parsedData);\n        } else if (typeof parsedData === 'string') {\n          setValues([parsedData]);\n        } else {\n          // For other types, just count them directly\n          setValues(Array.isArray(parsedData) ? parsedData : []);\n        }\n        \n        // Count the values\n        countValues(parsedData);\n        setError('');\n      } catch (e) {\n        setError('Error processing input: ' + e.message);\n      }\n    };\n\n    // Count values in the current data when component mounts\n    React.useEffect(() => {\n      countValues(values);\n    }, [values]);\n\n    return (\n      <div className=\"max-w-md mx-auto p-6 bg-white rounded-lg shadow-lg\">\n        <h1 className=\"text-2xl font-bold text-center mb-6 text-blue-600\">{title}</h1>\n        \n        <div className=\"mb-6\">\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\">\n            Enter data to count (JSON or text):\n          </label>\n          <textarea\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            rows=\"5\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            placeholder='[\"apple\", \"banana\", \"cherry\"] or any data'\n          />\n          {error && <p className=\"text-red-500 text-sm mt-1\">{error}</p>}\n          <button\n            onClick={handleSubmit}\n            className=\"mt-3 w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            Count Values\n          </button>\n        </div>\n        \n        <div className=\"bg-gray-100 p-4 rounded-md\">\n          <h2 className=\"text-lg font-semibold mb-3\">Results</h2>\n          \n          <div className=\"grid grid-cols-2 gap-2\">\n            <div className=\"font-medium\">Type:</div>\n            <div>{type}</div>\n            \n            <div className=\"font-medium\">Count:</div>\n            <div>{count}</div>\n            \n            <div className=\"font-medium\">Is Empty:</div>\n            <div>{details.isEmpty ? 'Yes' : 'No'}</div>\n            \n            {type === 'string' && (\n              <>\n                <div className=\"font-medium\">Words:</div>\n                <div>{details.words}</div>\n                \n                <div className=\"font-medium\">Lines:</div>\n                <div>{details.lines}</div>\n              </>\n            )}\n          </div>\n          \n          {type === 'array' && values.length > 0 && (\n            <div className=\"mt-4\">\n              <h3 className=\"text-md font-medium mb-2\">Values:</h3>\n              <ul className=\"list-disc pl-5\">\n                {values.map((value, index) => (\n                  <li key={index} className=\"mb-1\">\n                    {typeof value === 'object' ? JSON.stringify(value) : String(value)}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  const root = ReactDOM.createRoot(mount);\n  root.render(<ValueCounter />);\n}\n```"
    },
    {
      "role": "assistant",
      "content": "\nfunction onLoad() {\n  return [];\n}\n\nconst title = 'Value Counter Charm';\n\nfunction onReady(mount, sourceData) {\n  function ValueCounter() {\n    // State for the input data\n    const [values, setValues] = useDoc('values', []);\n    const [count, setCount] = useDoc('count', 0);\n    const [type, setType] = useDoc('type', 'array');\n    const [details, setDetails] = useDoc('details', { isEmpty: false });\n    \n    // State for the input field\n    const [inputValue, setInputValue] = React.useState('');\n    const [error, setError] = React.useState('');\n\n    // Function to count values based on data type\n    const countValues = (data) => {\n      // Determine the type of data\n      let dataType = Array.isArray(data) ? 'array' : typeof data;\n      \n      // Set the detected type\n      setType(dataType);\n      \n      // Count based on type\n      let countResult = 0;\n      let detailsResult = { isEmpty: false };\n      \n      switch (dataType) {\n        case 'array':\n          countResult = data.length;\n          detailsResult.isEmpty = data.length === 0;\n          break;\n        case 'object':\n          if (data === null) {\n            dataType = 'null';\n            countResult = 0;\n            detailsResult.isEmpty = true;\n          } else {\n            countResult = Object.keys(data).length;\n            detailsResult.isEmpty = Object.keys(data).length === 0;\n          }\n          break;\n        case 'string':\n          countResult = data.length;\n          detailsResult.isEmpty = data.length === 0;\n          detailsResult.words = data.trim() ? data.trim().split(/\\s+/).length : 0;\n          detailsResult.lines = data.split('\\n').length;\n          break;\n        case 'number':\n        case 'boolean':\n          countResult = 1;\n          detailsResult.isEmpty = false;\n          break;\n        case 'undefined':\n          countResult = 0;\n          detailsResult.isEmpty = true;\n          break;\n        default:\n          countResult = 0;\n          detailsResult.isEmpty = true;\n      }\n      \n      // Update state with results\n      setCount(countResult);\n      setDetails(detailsResult);\n      \n      return { count: countResult, type: dataType, details: detailsResult };\n    };\n\n    // Handle form submission\n    const handleSubmit = () => {\n      try {\n        // Try to parse the input as JSON\n        let parsedData;\n        try {\n          parsedData = JSON.parse(inputValue);\n        } catch (e) {\n          // If not valid JSON, treat as a string\n          parsedData = inputValue;\n        }\n        \n        // If it's an array of strings, update the values\n        if (Array.isArray(parsedData) && parsedData.every(item => typeof item === 'string')) {\n          setValues(parsedData);\n        } else if (typeof parsedData === 'string') {\n          setValues([parsedData]);\n        } else {\n          // For other types, just count them directly\n          setValues(Array.isArray(parsedData) ? parsedData : []);\n        }\n        \n        // Count the values\n        countValues(parsedData);\n        setError('');\n      } catch (e) {\n        setError('Error processing input: ' + e.message);\n      }\n    };\n\n    // Count values in the current data when component mounts\n    React.useEffect(() => {\n      countValues(values);\n    }, [values]);\n\n    return (\n      <div className=\"max-w-md mx-auto p-6 bg-white rounded-lg shadow-lg\">\n        <h1 className=\"text-2xl font-bold text-center mb-6 text-blue-600\">{title}</h1>\n        \n        <div className=\"mb-6\">\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\">\n            Enter data to count (JSON or text):\n          </label>\n          <textarea\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            rows=\"5\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            placeholder='[\"apple\", \"banana\", \"cherry\"] or any data'\n          />\n          {error && <p className=\"text-red-500 text-sm mt-1\">{error}</p>}\n          <button\n            onClick={handleSubmit}\n            className=\"mt-3 w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            Count Values\n          </button>\n        </div>\n        \n        <div className=\"bg-gray-100 p-4 rounded-md\">\n          <h2 className=\"text-lg font-semibold mb-3\">Results</h2>\n          \n          <div className=\"grid grid-cols-2 gap-2\">\n            <div className=\"font-medium\">Type:</div>\n            <div>{type}</div>\n            \n            <div className=\"font-medium\">Count:</div>\n            <div>{count}</div>\n            \n            <div className=\"font-medium\">Is Empty:</div>\n            <div>{details.isEmpty ? 'Yes' : 'No'}</div>\n            \n            {type === 'string' && (\n              <>\n                <div className=\"font-medium\">Words:</div>\n                <div>{details.words}</div>\n                \n                <div className=\"font-medium\">Lines:</div>\n                <div>{details.lines}</div>\n              </>\n            )}\n          </div>\n          \n          {type === 'array' && values.length > 0 && (\n            <div className=\"mt-4\">\n              <h3 className=\"text-md font-medium mb-2\">Values:</h3>\n              <ul className=\"list-disc pl-5\">\n                {values.map((value, index) => (\n                  <li key={index} className=\"mb-1\">\n                    {typeof value === 'object' ? JSON.stringify(value) : String(value)}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  const root = ReactDOM.createRoot(mount);\n  root.render(<ValueCounter />);\n}\n```"
    }
  ],
  "stop": "\n```",
  "stream": false
}