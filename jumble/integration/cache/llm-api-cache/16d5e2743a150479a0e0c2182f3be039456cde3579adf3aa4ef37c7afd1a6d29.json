{
  "model": "anthropic:claude-3-7-sonnet-latest",
  "system": "# React Component Builder\n\nCreate an interactive React component that fulfills the user's request. Focus on delivering a clean, useful implementation with appropriate features.\n\n## You Are Part of a Two-Phase Process\n\n1. First phase (already completed):\n   - Analyzed the user's request\n   - Created a detailed specification\n   - Generated a structured data schema\n\n2. Your job (second phase):\n   - Create a reactive UI component based on the provided specification and schema\n   - Implement the UI exactly according to the specification\n   - Strictly adhere to the data schema provided\n\n## Required Elements\n- Define a title with `const title = 'Your App Name';`\n- Implement both `onLoad` and `onReady` functions\n- Use Tailwind CSS for styling with tasteful defaults\n\n## Code Structure\n1. React and ReactDOM are pre-imported - don't import them again\n2. All React hooks must be namespaced (e.g., `React.useState`, `React.useEffect`)\n3. Follow React hooks rules - never nest or conditionally call hooks\n4. Define components within the `onReady` function\n5. For form handling, use `onClick` handlers instead of `onSubmit`\n\n## Available APIs\n- **useDoc(key, defaultValue)** - Persistent data storage with real-time updates (follows React hook rules)\n- **llm(promptPayload)** - Send requests to the language model\n- **readWebpage(url)** - Fetch and parse external web content\n- **generateImage(prompt)** - Create AI-generated images\n\n## Important Note About useDoc\n- **useDoc is a React Hook** and must follow all React hook rules\n- Only call useDoc at the top level of your function components or custom hooks\n- Do not call useDoc inside loops, conditions, or nested functions\n- useDoc cannot be used outside of React components - it must be called during rendering\n\n## Library Usage\n- Request additional libraries in `onLoad` by returning an array of module names\n- Available libraries:\n  - imports : [object Object]\n- Only use the explicitly provided libraries\n\n## Security Restrictions\n- Do not use browser dialog functions (`prompt()`, `alert()`, `confirm()`)\n- Avoid any methods that could compromise security or user experience\n\n<view-model-schema>\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"simpleValue2\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"values\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"originalData\": {\n      \"type\": \"object\",\n      \"title\": \"Original Data\",\n      \"description\": \"The original data structure that was analyzed\",\n      \"properties\": {\n        \"simpleValue2\": {\n          \"type\": \"object\"\n        }\n      }\n    },\n    \"counts\": {\n      \"type\": \"object\",\n      \"title\": \"Value Counts\",\n      \"description\": \"Count of occurrences for each unique value\",\n      \"additionalProperties\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"totalValues\": {\n      \"type\": \"integer\",\n      \"title\": \"Total Values\",\n      \"description\": \"Total number of values in the array\",\n      \"default\": 0\n    },\n    \"uniqueValues\": {\n      \"type\": \"integer\",\n      \"title\": \"Unique Values\",\n      \"description\": \"Number of unique values in the array\",\n      \"default\": 0\n    },\n    \"timestamp\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\",\n      \"title\": \"Timestamp\",\n      \"description\": \"When the count was performed\"\n    }\n  },\n  \"title\": \"Value Counter\",\n  \"description\": \"A utility to count occurrences of values in an array.\"\n}\n</view-model-schema>\n\n<guide>\n# SDK Usage Guide\n\n## 1. `useDoc` Hook\n\nThe `useDoc` hook subscribes to real-time updates for a given key and returns a tuple `[doc, setDoc]`:\n\nAny keys from the view-model-schema are valid for useDoc, any other keys will fail. Provide a default as the second argument, **do not set an initial value explicitly**.\n\n**Important**: useDoc is a React Hook and must follow React Hook Rules:\n- Only call useDoc at the top level of your function components or custom hooks\n- Do not call useDoc inside loops, conditions, or nested functions\n- It cannot be used outside React components\n\nFor this schema:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"counter\": {\n      \"type\": \"number\",\n    },\n    \"title\": {\n      \"type\": \"string\",\n      \"default\": \"My Counter App\"\n    }\n  }\n}\n```\n\n```jsx\nfunction CounterComponent() {\n  // Correct: useDoc called at top level of component\n  const [counter, setCounter] = useDoc(\"counter\", -1); // default\n  const [title, setTitle] = useDoc(\"title\", \"My Counter App\"); // default\n\n  // Incorrect: would cause errors\n  // if(something) {\n  //   const [data, setData] = useDoc(\"data\", {}); // Never do this!\n  // }\n\n  return (\n    <div>\n      <h2>{title}</h2>\n      <button onClick={() => setTitle(Math.random().toString(36).substring(2, 15))}>\n        Randomize Title\n      </button>\n      <button onClick={() => setCounter(counter + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n}\n```\n\n## 2. llm Function\n\n```jsx\nasync function fetchLLMResponse() {\n  const promptPayload = { messages: ['Hi', 'How can I help you today?', 'tell me a joke']};\n  try {\n    const result = await llm(promptPayload);\n    console.log('LLM responded:', result);\n  } catch (error) {\n    console.error('LLM error:', error);\n  }\n}\n```\n\n## 3. readWebpage Function\n\n```jsx\nasync function fetchFromUrl() {\n  const url = 'https://twopm.studio';\n  try {\n    const result = await readWebpage(url);\n    console.log('Markdown:', result.content);\n  } catch (error) {\n    console.error('readWebpage error:', error);\n  }\n}\n```\n\n## 4. generateImage Function\n\n```jsx\nfunction ImageComponent() {\n  return <img src={generateImage(\"A beautiful sunset over mountains\")} alt=\"Generated landscape\" />;\n}\n```\n## 5. Using the Interface Functions\n\n```javascript\n// Import from modern ESM libraries:\n//   - react\n//   - react-dom\n//   - react-dom/client\n//   - d3\n//   - moment\n//   - marked\n//   - @react-spring/web\n//   - @use-gesture/react\n//   - uuid\n//   - tone\nfunction onLoad() {\n  return ['@react-spring/web']; // Request the modules you need\n}\n\nconst title = 'My ESM App';\n\n// Main application code with modules passed as third parameter\nfunction onReady(mount, sourceData, libs) {\n  const { useState, useEffect } = React; // React is available globally\n  const { useSpring, animated } = libs['@react-spring/web']; // Access imported module\n\n  function MyApp() {\n    const [count, setCount] = useDoc('count', 0);\n    const props = useSpring({\n      from: { opacity: 0 },\n      to: { opacity: 1 }\n    });\n\n    return (\n      <div className=\"p-4\">\n        <animated.div style={props}>\n          <h1 className=\"text-2xl font-bold\">Hello ESM World!</h1>\n          <button\n            className=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded\"\n            onClick={() => setCount(count + 1)}\n          >\n            Clicks: {count}\n          </button>\n        </animated.div>\n      </div>\n    );\n  }\n\n  // Use the client API for React 18\n  const root = ReactDOM.createRoot(mount);\n  root.render(<MyApp />);\n}\n```\n</guide>\n",
  "messages": [
    {
      "role": "user",
      "content": "The user asked you to create the source code with the following specification:\n```\n<GOAL>count of values</GOAL>\n<PLAN>1. Extract the \"values\" array from the simpleValue2 object\n2. Count occurrences of each unique string value using a frequency counter approach\n3. Generate a result object with the counts while preserving the original data</PLAN>\n<SPEC>The Value Counter will analyze the \"values\" array within the simpleValue2 object and count the occurrences of each unique string. It will generate a report showing each unique value and its count. The counter will handle empty arrays and maintain the original data structure while adding the count results.</SPEC>\n```"
    },
    {
      "role": "assistant",
      "content": "\nconst title = 'Value Counter';\n\nfunction onLoad() {\n  return []; // No additional libraries needed\n}\n\nfunction onReady(mountElement, sourceData) {\n  const { useState, useEffect, useMemo } = React;\n\n  function ValueCounter() {\n    // Use the useDoc hook to access and update data\n    const [simpleValue2, setSimpleValue2] = useDoc('simpleValue2', { values: [] });\n    const [originalData, setOriginalData] = useDoc('originalData', { simpleValue2: {} });\n    const [counts, setCounts] = useDoc('counts', {});\n    const [totalValues, setTotalValues] = useDoc('totalValues', 0);\n    const [uniqueValues, setUniqueValues] = useDoc('uniqueValues', 0);\n    const [timestamp, setTimestamp] = useDoc('timestamp', '');\n\n    // Input state for adding new values\n    const [newValue, setNewValue] = useState('');\n\n    // Calculate counts when values change\n    useEffect(() => {\n      if (simpleValue2?.values?.length > 0) {\n        const valueArray = simpleValue2.values;\n        \n        // Count occurrences of each value\n        const countMap = {};\n        valueArray.forEach(value => {\n          countMap[value] = (countMap[value] || 0) + 1;\n        });\n        \n        // Update the counts and statistics\n        setCounts(countMap);\n        setTotalValues(valueArray.length);\n        setUniqueValues(Object.keys(countMap).length);\n        setTimestamp(new Date().toISOString());\n        \n        // Preserve original data\n        setOriginalData({ simpleValue2: { ...simpleValue2 } });\n      } else {\n        // Reset counts if array is empty\n        setCounts({});\n        setTotalValues(0);\n        setUniqueValues(0);\n        setTimestamp(new Date().toISOString());\n      }\n    }, [simpleValue2.values]);\n\n    // Add a new value to the array\n    const handleAddValue = () => {\n      if (newValue.trim()) {\n        const updatedValues = [...(simpleValue2.values || []), newValue.trim()];\n        setSimpleValue2({ ...simpleValue2, values: updatedValues });\n        setNewValue('');\n      }\n    };\n\n    // Remove a value from the array\n    const handleRemoveValue = (index) => {\n      const updatedValues = [...simpleValue2.values];\n      updatedValues.splice(index, 1);\n      setSimpleValue2({ ...simpleValue2, values: updatedValues });\n    };\n\n    // Clear all values\n    const handleClearValues = () => {\n      setSimpleValue2({ values: [] });\n    };\n\n    return (\n      <div className=\"container mx-auto p-4 max-w-3xl\">\n        <h1 className=\"text-2xl font-bold mb-4 text-blue-700\">{title}</h1>\n        \n        {/* Input section */}\n        <div className=\"mb-6 bg-white p-4 rounded shadow\">\n          <h2 className=\"text-lg font-semibold mb-2\">Add Values</h2>\n          <div className=\"flex\">\n            <input\n              type=\"text\"\n              value={newValue}\n              onChange={(e) => setNewValue(e.target.value)}\n              className=\"flex-grow px-3 py-2 border rounded-l focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              placeholder=\"Enter a value\"\n            />\n            <button\n              onClick={handleAddValue}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-r hover:bg-blue-700 transition\"\n            >\n              Add\n            </button>\n          </div>\n          <div className=\"mt-2 flex justify-end\">\n            <button\n              onClick={handleClearValues}\n              className=\"bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700 transition\"\n            >\n              Clear All\n            </button>\n          </div>\n        </div>\n        \n        {/* Values list */}\n        <div className=\"mb-6 bg-white p-4 rounded shadow\">\n          <h2 className=\"text-lg font-semibold mb-2\">Values List</h2>\n          {simpleValue2.values && simpleValue2.values.length > 0 ? (\n            <ul className=\"divide-y\">\n              {simpleValue2.values.map((value, index) => (\n                <li key={index} className=\"py-2 flex justify-between items-center\">\n                  <span>{value}</span>\n                  <button\n                    onClick={() => handleRemoveValue(index)}\n                    className=\"text-red-600 hover:text-red-800\"\n                  >\n                    Remove\n                  </button>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <p className=\"text-gray-500 italic\">No values added yet.</p>\n          )}\n        </div>\n        \n        {/* Count results */}\n        <div className=\"mb-6 bg-white p-4 rounded shadow\">\n          <h2 className=\"text-lg font-semibold mb-2\">Value Counts</h2>\n          \n          <div className=\"grid grid-cols-2 gap-4 mb-4\">\n            <div className=\"bg-gray-100 p-3 rounded\">\n              <p className=\"text-sm text-gray-600\">Total Values</p>\n              <p className=\"text-xl font-bold\">{totalValues}</p>\n            </div>\n            <div className=\"bg-gray-100 p-3 rounded\">\n              <p className=\"text-sm text-gray-600\">Unique Values</p>\n              <p className=\"text-xl font-bold\">{uniqueValues}</p>\n            </div>\n          </div>\n          \n          {Object.keys(counts).length > 0 ? (\n            <table className=\"w-full border-collapse\">\n              <thead>\n                <tr className=\"bg-gray-100\">\n                  <th className=\"text-left p-2 border\">Value</th>\n                  <th className=\"text-left p-2 border\">Count</th>\n                  <th className=\"text-left p-2 border\">Percentage</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Object.entries(counts).map(([value, count]) => (\n                  <tr key={value} className=\"border-b\">\n                    <td className=\"p-2 border\">{value}</td>\n                    <td className=\"p-2 border\">{count}</td>\n                    <td className=\"p-2 border\">\n                      {((count / totalValues) * 100).toFixed(1)}%\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          ) : (\n            <p className=\"text-gray-500 italic\">No counts available.</p>\n          )}\n          \n          {timestamp && (\n            <p className=\"text-xs text-gray-500 mt-4\">\n              Last updated: {new Date(timestamp).toLocaleString()}\n            </p>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  // Render the component\n  const root = ReactDOM.createRoot(mountElement);\n  root.render(<ValueCounter />);\n}\n```\n\nThis Value Counter component allows users to:\n\n1. Add and remove values to the array\n2. View the current list of values\n3. See a detailed count of each unique value, including:\n   - Total number of values\n   - Number of unique values\n   - A table showing each value, its count, and percentage\n   - Timestamp of when the count was last updated\n\nThe component preserves the original data structure while adding the count results, and it handles empty arrays gracefully. The UI is styled with Tailwind CSS for a clean, modern look."
    },
    {
      "role": "assistant",
      "content": "\nconst title = 'Value Counter';\n\nfunction onLoad() {\n  return []; // No additional libraries needed\n}\n\nfunction onReady(mountElement, sourceData) {\n  const { useState, useEffect, useMemo } = React;\n\n  function ValueCounter() {\n    // Use the useDoc hook to access and update data\n    const [simpleValue2, setSimpleValue2] = useDoc('simpleValue2', { values: [] });\n    const [originalData, setOriginalData] = useDoc('originalData', { simpleValue2: {} });\n    const [counts, setCounts] = useDoc('counts', {});\n    const [totalValues, setTotalValues] = useDoc('totalValues', 0);\n    const [uniqueValues, setUniqueValues] = useDoc('uniqueValues', 0);\n    const [timestamp, setTimestamp] = useDoc('timestamp', '');\n\n    // Input state for adding new values\n    const [newValue, setNewValue] = useState('');\n\n    // Calculate counts when values change\n    useEffect(() => {\n      if (simpleValue2?.values?.length > 0) {\n        const valueArray = simpleValue2.values;\n        \n        // Count occurrences of each value\n        const countMap = {};\n        valueArray.forEach(value => {\n          countMap[value] = (countMap[value] || 0) + 1;\n        });\n        \n        // Update the counts and statistics\n        setCounts(countMap);\n        setTotalValues(valueArray.length);\n        setUniqueValues(Object.keys(countMap).length);\n        setTimestamp(new Date().toISOString());\n        \n        // Preserve original data\n        setOriginalData({ simpleValue2: { ...simpleValue2 } });\n      } else {\n        // Reset counts if array is empty\n        setCounts({});\n        setTotalValues(0);\n        setUniqueValues(0);\n        setTimestamp(new Date().toISOString());\n      }\n    }, [simpleValue2.values]);\n\n    // Add a new value to the array\n    const handleAddValue = () => {\n      if (newValue.trim()) {\n        const updatedValues = [...(simpleValue2.values || []), newValue.trim()];\n        setSimpleValue2({ ...simpleValue2, values: updatedValues });\n        setNewValue('');\n      }\n    };\n\n    // Remove a value from the array\n    const handleRemoveValue = (index) => {\n      const updatedValues = [...simpleValue2.values];\n      updatedValues.splice(index, 1);\n      setSimpleValue2({ ...simpleValue2, values: updatedValues });\n    };\n\n    // Clear all values\n    const handleClearValues = () => {\n      setSimpleValue2({ values: [] });\n    };\n\n    return (\n      <div className=\"container mx-auto p-4 max-w-3xl\">\n        <h1 className=\"text-2xl font-bold mb-4 text-blue-700\">{title}</h1>\n        \n        {/* Input section */}\n        <div className=\"mb-6 bg-white p-4 rounded shadow\">\n          <h2 className=\"text-lg font-semibold mb-2\">Add Values</h2>\n          <div className=\"flex\">\n            <input\n              type=\"text\"\n              value={newValue}\n              onChange={(e) => setNewValue(e.target.value)}\n              className=\"flex-grow px-3 py-2 border rounded-l focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              placeholder=\"Enter a value\"\n            />\n            <button\n              onClick={handleAddValue}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-r hover:bg-blue-700 transition\"\n            >\n              Add\n            </button>\n          </div>\n          <div className=\"mt-2 flex justify-end\">\n            <button\n              onClick={handleClearValues}\n              className=\"bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700 transition\"\n            >\n              Clear All\n            </button>\n          </div>\n        </div>\n        \n        {/* Values list */}\n        <div className=\"mb-6 bg-white p-4 rounded shadow\">\n          <h2 className=\"text-lg font-semibold mb-2\">Values List</h2>\n          {simpleValue2.values && simpleValue2.values.length > 0 ? (\n            <ul className=\"divide-y\">\n              {simpleValue2.values.map((value, index) => (\n                <li key={index} className=\"py-2 flex justify-between items-center\">\n                  <span>{value}</span>\n                  <button\n                    onClick={() => handleRemoveValue(index)}\n                    className=\"text-red-600 hover:text-red-800\"\n                  >\n                    Remove\n                  </button>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <p className=\"text-gray-500 italic\">No values added yet.</p>\n          )}\n        </div>\n        \n        {/* Count results */}\n        <div className=\"mb-6 bg-white p-4 rounded shadow\">\n          <h2 className=\"text-lg font-semibold mb-2\">Value Counts</h2>\n          \n          <div className=\"grid grid-cols-2 gap-4 mb-4\">\n            <div className=\"bg-gray-100 p-3 rounded\">\n              <p className=\"text-sm text-gray-600\">Total Values</p>\n              <p className=\"text-xl font-bold\">{totalValues}</p>\n            </div>\n            <div className=\"bg-gray-100 p-3 rounded\">\n              <p className=\"text-sm text-gray-600\">Unique Values</p>\n              <p className=\"text-xl font-bold\">{uniqueValues}</p>\n            </div>\n          </div>\n          \n          {Object.keys(counts).length > 0 ? (\n            <table className=\"w-full border-collapse\">\n              <thead>\n                <tr className=\"bg-gray-100\">\n                  <th className=\"text-left p-2 border\">Value</th>\n                  <th className=\"text-left p-2 border\">Count</th>\n                  <th className=\"text-left p-2 border\">Percentage</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Object.entries(counts).map(([value, count]) => (\n                  <tr key={value} className=\"border-b\">\n                    <td className=\"p-2 border\">{value}</td>\n                    <td className=\"p-2 border\">{count}</td>\n                    <td className=\"p-2 border\">\n                      {((count / totalValues) * 100).toFixed(1)}%\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          ) : (\n            <p className=\"text-gray-500 italic\">No counts available.</p>\n          )}\n          \n          {timestamp && (\n            <p className=\"text-xs text-gray-500 mt-4\">\n              Last updated: {new Date(timestamp).toLocaleString()}\n            </p>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  // Render the component\n  const root = ReactDOM.createRoot(mountElement);\n  root.render(<ValueCounter />);\n}\n```\n\nThis Value Counter component allows users to:\n\n1. Add and remove values to the array\n2. View the current list of values\n3. See a detailed count of each unique value, including:\n   - Total number of values\n   - Number of unique values\n   - A table showing each value, its count, and percentage\n   - Timestamp of when the count was last updated\n\nThe component preserves the original data structure while adding the count results, and it handles empty arrays gracefully. The UI is styled with Tailwind CSS for a clean, modern look."
    }
  ],
  "stop": "\n```",
  "stream": false
}