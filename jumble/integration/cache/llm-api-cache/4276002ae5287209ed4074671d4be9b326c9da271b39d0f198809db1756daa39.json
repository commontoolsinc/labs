{
  "model": "anthropic:claude-3-7-sonnet-20250219",
  "system": "# React Component Builder\n\nCreate an interactive React component that fulfills the user's request. Focus on delivering a clean, useful implementation with appropriate features.\n\n<meta>\n**This task is part of a 2-Phase Process.**\n\n1. First phase (already completed):\n   - Analyzed the user's request\n   - Created a detailed specification\n   - Generated a structured data schema\n\n2. Your job (second phase):\n   - Create a reactive UI component based on the provided specification and schema\n   - Implement the UI exactly according to the specification\n   - Strictly adhere to the data schema provided\n</meta>\n\n<requirements>\n- Define a title with `const title = 'Your App Name';`\n- Implement both `onLoad` and `onReady` functions\n- Use Tailwind CSS for styling with tasteful defaults\n- Do not write <svg> inline, use emoji for icons\n- Carefully avoid infinite loops and recursion that may cause performance issues\n</requirements>\n\n<code_structure>\n- React and ReactDOM are pre-imported - don't import them again\n- All React hooks must be namespaced (e.g., `React.useState`, `React.useEffect`)\n- Follow React hooks rules - never nest or conditionally call hooks\n- For form handling, use `onClick` handlers instead of `onSubmit`\n</code_structure>\n\n<charm_api>\n- **useReactiveCell(keyPath: string[])** - Persistent data storage with reactive updates\n- **generateText({ system, messages })** - Generate text via Large Language Model\n- **generateObject({ system, messages })** - Generate JSON object via Large Language Model\n- **readWebpage(url)** - Fetch and parse external web content\n- **generateImage(prompt)** - Create AI-generated images\n\n  <use_reactive_cell>\n  ## Important Note About useReactiveCell(keyPath: string[])\n  - **useReactiveCell is a React Hook** and must follow all React hook rules\n  - It should only be used for persistent state and must draw from the provided schema\n    - For any ephemeral state, use `React.useState`\n  - Only call useReactiveCell at the top level of your React function components or custom hooks\n  - Do not call useReactiveCell inside loops, conditions, or nested functions\n  - Do not call useReactiveCell directly inside the onReady function - it can only be used inside React components\n  - The onReady function itself is not a React component and cannot use React hooks directly\n  - Example of correct usage:\n    ```jsx\n    function onReady(mount, sourceData, modules) {\n      // This is NOT a React component, so do NOT use hooks here!\n      \n      // Create a React component to use hooks properly:\n      function MyApp() {\n        // React hooks can be used here\n        const [data, setData] = useReactiveCell('myData', defaultValue);\n        return <div>{/* your JSX */}</div>;\n      }\n      \n      // Render the React component to the mount point\n      const root = ReactDOM.createRoot(mount);\n      root.render(<MyApp />);\n    }\n    ```\n  </use_reactive_cell>\n</charm_api>\n\n<importing_libraries>\n- Request additional libraries in `onLoad` by returning an array of module names\n- Available libraries:\n  - imports : [object Object]\n- Only use the explicitly provided libraries\n</importing_libraries>\n\n<security>\n\n- Do not use browser dialog functions (`prompt()`, `alert()`, `confirm()`)\n- Avoid any methods that could compromise security or user experience\n\n</security>\n\n<schema description=\"The pre-generated schema this Charm operates on.\">\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"board\": {\n      \"type\": \"array\",\n      \"title\": \"Game Board\",\n      \"description\": \"4x4 grid of number tiles (0 represents empty)\",\n      \"default\": [\n        [\n          0,\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          0,\n          0,\n          0\n        ]\n      ],\n      \"items\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"integer\",\n          \"minimum\": 0\n        }\n      }\n    },\n    \"score\": {\n      \"type\": \"integer\",\n      \"title\": \"Current Score\",\n      \"description\": \"Player's current score in this game\",\n      \"default\": 0,\n      \"minimum\": 0\n    },\n    \"highScore\": {\n      \"type\": \"integer\",\n      \"title\": \"High Score\",\n      \"description\": \"Highest score achieved across games\",\n      \"default\": 0,\n      \"minimum\": 0\n    },\n    \"gameState\": {\n      \"type\": \"string\",\n      \"title\": \"Game State\",\n      \"description\": \"Current state of the game\",\n      \"enum\": [\n        \"playing\",\n        \"won\",\n        \"lost\"\n      ],\n      \"default\": \"playing\"\n    },\n    \"highestTile\": {\n      \"type\": \"integer\",\n      \"title\": \"Highest Tile\",\n      \"description\": \"Value of the highest tile on the board\",\n      \"default\": 2,\n      \"minimum\": 2\n    }\n  },\n  \"title\": \"2048 Sliding Puzzle Game\",\n  \"description\": \"A game charm to play the classic 2048 sliding tile puzzle with score tracking.\"\n}\n</schema>\n\n<guide>\n# SDK Usage Guide\n\n<persistent-reactive-state>\n## 1. `useReactiveCell` Hook\n\nThe `useReactiveCell` hook binds to a reactive cell given a key path and returns a tuple `[doc, setDoc]`:\n\nAny keys from the view-model-schema are valid for useReactiveCell, any other keys will fail. Provide a default as the second argument, **do not set an initial value explicitly**.\n\nFor this schema:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"counter\": {\n      \"type\": \"number\",\n    },\n    \"title\": {\n      \"type\": \"string\",\n      \"default\": \"My Counter App\"\n    }\n  }\n}\n```\n\n```jsx\nfunction CounterComponent() {\n  // Correct: useReactiveCell called at top level of component\n  const [counter, setCounter] = useReactiveCell(\"counter\");\n  const [maxValue, setMaxValue] = useReactiveCell(['settings', 'maxValue']);\n\n  const onIncrement = useCallback(() => {\n    // writing to the cell automatically triggers a re-render\n    setCounter(counter + 1);\n  }, [counter]);\n\n  return (\n    <button onClick={onIncrement}>\n      Increment\n    </button>\n  );\n}\n```\n</persistent-reactive-state>\n\n<generating_content>\nSeveral APIs exist for generating text, JSON or image urls.\n\n<text>\n`generateText({ system, messages}): Promise<string>`\n\n```jsx\nasync function fetchLLMResponse() {\n  const result = await generateText({\n    system: 'Translate all the messages to emojis, reply in JSON.',\n    messages: ['Hi', 'How can I help you today?', 'tell me a joke']\n  })\n  console.log('LLM responded:', result);\n}\n```\n</text>\n\n<json>\n\n`window.generateObject({ system, messages }): Promise<object>`\n\nYou must give the exact schema of the response in the prompt.\n\nFor example: \"Generate a traditional Vietnamese recipe in JSON format, with the\nfollowing properties: name (string), ingredients (array of strings),\ninstructions (array of strings)\"\n\n`generateObject` returns a parsed object already, or `undefined`. Be defensive working with the response, the LLM may make mistakes.\n\n<example>\n```jsx\nconst promptPayload = ;\nconst result = await generateObject({\n  system: 'Translate all the messages to emojis, reply in JSON with the following properties: an array of objects, each with original_text (string), emoji_translation (string)',\n  messages: ['Hi', 'How can I help you today?', 'tell me a joke'],\n});\nconsole.log('JSON response from llm:', result);\n\n// [\n//     {\n//         \"original_text\": \"Hi\",\n//         \"emoji_translation\": \"üëã\"\n//     },\n//     {\n//         \"original_text\": \"How can I help you today?\",\n//         \"emoji_translation\": \"ü§î‚ùìüôã‚Äç‚ôÇÔ∏èüìÖ\"\n//     },\n//     {\n//         \"original_text\": \"tell me a joke\",\n//         \"emoji_translation\": \"üó£Ô∏èüëâüòÇ\"\n//     }\n// ]\n```\n</example>\n\n<example>\nNOTE: Language model requests are globally cached based on your prompt.\nThis means that identical requests will return the same result. If your llm use\nrequires unique results on every request, make sure to introduce a cache-breaking\nstring such as a timestamp or incrementing number/id.\n\n```jsx\n// To avoid the cache we'll use a cache-busting string.\nconst cacheBreaker = Date.now();\n\nconst result = await generateObject({\n  system: \"You are a professional chef specializing in Mexican cuisine. Generate a detailed, authentic Mexican recipe in JSON format with the following properties: title (string), ingredients (array of strings), instructions (array of strings), prepTime (integer in minutes), cookTime (integer in minutes)\",\n  messages: [\"give me something spicy!\" + \" \" + cacheBreaker],\n});\nconsole.log('JSON response from llm:', result);\n\n// {\n//     \"title\": \"Camarones a la Diabla (Devil Shrimp)\",\n//     \"ingredients\": [\n//         \"1.5 lbs Large Shrimp, peeled and deveined\",\n//         \"4 tbsp Olive Oil\",\n//         \"1 medium White Onion, finely chopped\",\n//         \"4 cloves Garlic, minced\",\n//         \"2-3 Habanero Peppers, finely chopped (adjust to your spice preference, remove seeds for less heat)\",\n//         \"1 (28 oz) can Crushed Tomatoes\",\n//         \"1/2 cup Chicken Broth\",\n//         \"2 tbsp Tomato Paste\",\n//         \"1 tbsp Apple Cider Vinegar\",\n//         \"1 tbsp Dried Oregano\",\n//         \"1 tsp Cumin\",\n//         \"1/2 tsp Smoked Paprika\",\n//         \"1/4 tsp Ground Cloves\",\n//         \"Salt and Black Pepper to taste\",\n//         \"Fresh Cilantro, chopped, for garnish\",\n//         \"Lime wedges, for serving\"\n//     ],\n//     \"instructions\": [\n//         \"In a large bowl, toss the shrimp with salt and pepper.\",\n//         \"Heat the olive oil in a large skillet or Dutch oven over medium-high heat.\",\n//         \"Add the onion and cook until softened, about 5 minutes.\",\n//         \"Add the garlic and habanero peppers and cook for 1 minute more, until fragrant.\",\n//         \"Stir in the crushed tomatoes, chicken broth, tomato paste, apple cider vinegar, oregano, cumin, smoked paprika, and cloves.\",\n//         \"Bring the sauce to a simmer and cook for 15 minutes, stirring occasionally, until slightly thickened.\",\n//         \"Add the shrimp to the sauce and cook for 3-5 minutes, or until the shrimp are pink and cooked through.\",\n//         \"Taste and adjust seasoning with salt and pepper as needed.\",\n//         \"Garnish with fresh cilantro and serve immediately with lime wedges. Serve with rice or tortillas.\"\n//     ],\n//     \"prepTime\": 20,\n//     \"cookTime\": 30\n// }\n```\n</example>\n\n</json>\n\n\n<images>\n\nSynchronous, generates a URL that will load the image.\n\n```jsx\nfunction ImageComponent() {\n  return <img src={generateImageUrl(\"A beautiful sunset over mountains\")} alt=\"Generated landscape\" />;\n}\n```\n\n</images>\n</generating_content>\n\n<fetching_content>\n`readWebpage(url: string): Promise<string>` Returns markdown format.\n\n```jsx\nasync function fetchFromUrl() {\n  const url = 'https://twopm.studio';\n  const result = await readWebpage(url);\n  console.log('Markdown:', result.content);\n}\n```\n</fetching_content>\n\n<code_structure>\nAll generated code must follow this pattern:\n\n```javascript\n// Import from modern ESM libraries:\n//   - react\n//   - react-dom\n//   - react-dom/client\n//   - d3\n//   - moment\n//   - marked\n//   - @react-spring/web\n//   - @use-gesture/react\n//   - uuid\n//   - tone\nfunction onLoad() {\n  return ['@react-spring/web']; // Request the modules you need\n}\n\nconst title = 'My ESM App';\nfunction ImageComponent({ url }) {\n  return <img src={url} alt=\"Generated landscape\" />;\n}\n\nfunction MyComponent({ label, description }) {\n  return (\n    <div>\n      <h2>{label}</h2>\n      <p>{description}</p>\n      <ImageComponent url={generateImage(\"A beautiful sunset over mountains\")} />\n    </div>\n  );\n}\n\nfunction TodoItem({ todo, onToggle, onDelete }) {\n  return (\n    <div className=\"flex items-center p-2 border-b\">\n      <input\n        type=\"checkbox\"\n        checked={todo.completed}\n        onChange={onToggle}\n        className=\"mr-2\"\n      />\n      <span className={`flex-grow ${todo.completed ? 'line-through text-gray-500' : ''}`}>\n        {todo.text}\n      </span>\n      <button\n        onClick={onDelete}\n        className=\"px-2 py-1 bg-red-500 text-white rounded\"\n      >\n        Delete\n      </button>\n    </div>\n  );\n}\n\nfunction TodoList({ todo, setTodos}) {\n  const [newTodo, setNewTodo] = React.useState('');\n\n  const addTodo = () => {\n    if (newTodo.trim() === '') return;\n\n    const newTodoItem = {\n      id: Date.now(),\n      text: newTodo,\n      completed: false\n    };\n\n    setTodos([...todos, newTodoItem]);\n    setNewTodo('');\n  };\n\n  const toggleTodo = (id) => {\n    setTodos(todos.map(todo =>\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  };\n\n  const deleteTodo = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto mt-4 p-4 bg-white rounded shadow\">\n      <h2 className=\"text-xl font-bold mb-4\">Todo List</h2>\n\n      <div className=\"flex mb-4\">\n        <input\n          type=\"text\"\n          value={newTodo}\n          onChange={(e) => setNewTodo(e.target.value)}\n          placeholder=\"Add a new todo\"\n          className=\"flex-grow p-2 border rounded-l\"\n        />\n        <button\n          onClick={addTodo}\n          className=\"px-4 py-2 bg-blue-500 text-white rounded-r\"\n        >\n          Add\n        </button>\n      </div>\n\n      <div className=\"border rounded\">\n        {todos.length > 0 ? (\n          todos.map(todo => (\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              onToggle={() => toggleTodo(todo.id)}\n              onDelete={() => deleteTodo(todo.id)}\n            />\n          ))\n        ) : (\n          <p className=\"p-2 text-center text-gray-500\">No todos yet!</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Main application code with modules passed as third parameter\nfunction onReady(mount, sourceData, libs) {\n  const { useState, useEffect } = React; // React is available globally\n  const { useSpring, animated } = libs['@react-spring/web']; // Access imported module\n\n  function MyApp() {\n    const [count, setCount] = useReactiveCell('count');\n    const [todos, setTodos] = useReactiveCell('todos');\n\n    const props = useSpring({\n      from: { opacity: 0 },\n      to: { opacity: 1 }\n    });\n\n    return (\n      <div className=\"p-4\">\n        <animated.div style={props}>\n          <button\n            className=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded\"\n            onClick={() => setCount(count + 1)}\n          >\n            Clicks: {count}\n          </button>\n        </animated.div>\n        <TodoList todos={todos} setTodos={setTodos} />\n      </div>\n    );\n  }\n\n  // Use the client API for React 18\n  const root = ReactDOM.createRoot(mount);\n  root.render(<MyApp />);\n}\n```\n</guide>\n",
  "messages": [
    {
      "role": "user",
      "content": "The user asked you to create the source code with the following specification:\n```\n<REQUEST>\n<goal>2048 game</goal>\n\n<description>Create a üéÆ 2048 game charm with sliding üî¢ number tiles, score tracking, and game state management. The charm will need a grid layout, tile merging logic, and keyboard/swipe controls. Could add a üèÜ high score feature and üîÑ restart button.</description>\n</REQUEST>\n<PLAN>1. Implement the core game board with grid representation and tile movement/merging logic\n2. Create the UI with responsive grid layout and keyboard/swipe controls\n3. Add game state management, scoring system, and restart functionality</PLAN>\n<SPEC>The 2048 game will feature a 4x4 grid where numbered tiles can be slid in four directions (up, down, left, right). When two tiles with the same number collide, they merge into a single tile with their sum. The game tracks the current score, game state (playing, won, lost), and highest tile achieved. A high score feature will persist the best score across game sessions.</SPEC>\n```"
    },
    {
      "role": "assistant",
      "content": "\nfunction onLoad() {\n  return ['@react-spring/web'];\n}\n\nconst title = '2048 Puzzle Game';\n\n// Game logic functions\nconst getEmptyBoard = () => [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0]\n];\n\nconst getRandomPosition = (board) => {\n  const emptyCells = [];\n  \n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (board[i][j] === 0) {\n        emptyCells.push({ row: i, col: j });\n      }\n    }\n  }\n  \n  if (emptyCells.length === 0) return null;\n  \n  const randomIndex = Math.floor(Math.random() * emptyCells.length);\n  return emptyCells[randomIndex];\n};\n\nconst addRandomTile = (board) => {\n  const newBoard = JSON.parse(JSON.stringify(board));\n  const position = getRandomPosition(newBoard);\n  \n  if (!position) return newBoard;\n  \n  const value = Math.random() < 0.9 ? 2 : 4;\n  newBoard[position.row][position.col] = value;\n  \n  return newBoard;\n};\n\nconst initializeBoard = () => {\n  let board = getEmptyBoard();\n  board = addRandomTile(board);\n  board = addRandomTile(board);\n  return board;\n};\n\nconst rotateBoard = (board) => {\n  const newBoard = getEmptyBoard();\n  \n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      newBoard[i][j] = board[3 - j][i];\n    }\n  }\n  \n  return newBoard;\n};\n\nconst moveLeft = (board) => {\n  const newBoard = JSON.parse(JSON.stringify(board));\n  let score = 0;\n  let moved = false;\n  \n  for (let i = 0; i < 4; i++) {\n    let row = newBoard[i].filter(cell => cell !== 0);\n    let resultRow = [];\n    \n    for (let j = 0; j < row.length; j++) {\n      if (j < row.length - 1 && row[j] === row[j + 1]) {\n        const mergedValue = row[j] * 2;\n        resultRow.push(mergedValue);\n        score += mergedValue;\n        j++;\n        moved = true;\n      } else {\n        resultRow.push(row[j]);\n      }\n    }\n    \n    while (resultRow.length < 4) {\n      resultRow.push(0);\n    }\n    \n    if (JSON.stringify(newBoard[i]) !== JSON.stringify(resultRow)) {\n      moved = true;\n    }\n    \n    newBoard[i] = resultRow;\n  }\n  \n  return { board: newBoard, score, moved };\n};\n\nconst moveRight = (board) => {\n  const newBoard = JSON.parse(JSON.stringify(board));\n  \n  // Reverse each row\n  for (let i = 0; i < 4; i++) {\n    newBoard[i].reverse();\n  }\n  \n  // Move left\n  const { board: movedBoard, score, moved } = moveLeft(newBoard);\n  \n  // Reverse back\n  for (let i = 0; i < 4; i++) {\n    movedBoard[i].reverse();\n  }\n  \n  return { board: movedBoard, score, moved };\n};\n\nconst moveUp = (board) => {\n  // Rotate right\n  let rotatedBoard = rotateBoard(board);\n  \n  // Move left\n  const { board: movedBoard, score, moved } = moveLeft(rotatedBoard);\n  \n  // Rotate left (3 times right)\n  rotatedBoard = rotateBoard(movedBoard);\n  rotatedBoard = rotateBoard(rotatedBoard);\n  rotatedBoard = rotateBoard(rotatedBoard);\n  \n  return { board: rotatedBoard, score, moved };\n};\n\nconst moveDown = (board) => {\n  // Rotate left (3 times right)\n  let rotatedBoard = rotateBoard(board);\n  rotatedBoard = rotateBoard(rotatedBoard);\n  rotatedBoard = rotateBoard(rotatedBoard);\n  \n  // Move left\n  const { board: movedBoard, score, moved } = moveLeft(rotatedBoard);\n  \n  // Rotate right\n  rotatedBoard = rotateBoard(movedBoard);\n  \n  return { board: rotatedBoard, score, moved };\n};\n\nconst hasAvailableMoves = (board) => {\n  // Check for empty cells\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (board[i][j] === 0) return true;\n    }\n  }\n  \n  // Check for possible merges horizontally\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 3; j++) {\n      if (board[i][j] === board[i][j + 1]) return true;\n    }\n  }\n  \n  // Check for possible merges vertically\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (board[i][j] === board[i + 1][j]) return true;\n    }\n  }\n  \n  return false;\n};\n\nconst getHighestTile = (board) => {\n  let highest = 0;\n  \n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      highest = Math.max(highest, board[i][j]);\n    }\n  }\n  \n  return highest;\n};\n\n// React components\nfunction Tile({ value, animation }) {\n  const { animated } = window.libs['@react-spring/web'];\n  \n  const getBackgroundColor = () => {\n    const colors = {\n      0: '#cdc1b4',\n      2: '#eee4da',\n      4: '#ede0c8',\n      8: '#f2b179',\n      16: '#f59563',\n      32: '#f67c5f',\n      64: '#f65e3b',\n      128: '#edcf72',\n      256: '#edcc61',\n      512: '#edc850',\n      1024: '#edc53f',\n      2048: '#edc22e',\n      4096: '#3c3a32',\n      8192: '#3c3a32',\n    };\n    \n    return colors[value] || '#3c3a32';\n  };\n  \n  const getTextColor = () => {\n    return value <= 4 ? '#776e65' : '#f9f6f2';\n  };\n  \n  const getFontSize = () => {\n    if (value < 100) return '2rem';\n    if (value < 1000) return '1.75rem';\n    return '1.5rem';\n  };\n  \n  return (\n    <animated.div \n      style={{\n        ...animation,\n        backgroundColor: getBackgroundColor(),\n        color: getTextColor(),\n        fontSize: getFontSize(),\n      }}\n      className=\"flex items-center justify-center w-full h-full rounded-md font-bold\"\n    >\n      {value !== 0 ? value : ''}\n    </animated.div>\n  );\n}\n\nfunction GameBoard({ board, handleKeyDown }) {\n  const { useSpring } = window.libs['@react-spring/web'];\n  \n  // Animation for tiles\n  const tileAnimation = useSpring({\n    from: { opacity: 0, scale: 0.8 },\n    to: { opacity: 1, scale: 1 },\n    config: { tension: 300, friction: 20 }\n  });\n  \n  React.useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n  \n  // Touch handling for mobile\n  const [touchStart, setTouchStart] = React.useState({ x: 0, y: 0 });\n  \n  const handleTouchStart = (e) => {\n    const touch = e.touches[0];\n    setTouchStart({ x: touch.clientX, y: touch.clientY });\n  };\n  \n  const handleTouchEnd = (e) => {\n    if (!e.changedTouches || !e.changedTouches[0]) return;\n    \n    const touch = e.changedTouches[0];\n    const deltaX = touch.clientX - touchStart.x;\n    const deltaY = touch.clientY - touchStart.y;\n    \n    // Determine swipe direction\n    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n      // Horizontal swipe\n      if (deltaX > 30) {\n        handleKeyDown({ key: 'ArrowRight' });\n      } else if (deltaX < -30) {\n        handleKeyDown({ key: 'ArrowLeft' });\n      }\n    } else {\n      // Vertical swipe\n      if (deltaY > 30) {\n        handleKeyDown({ key: 'ArrowDown' });\n      } else if (deltaY < -30) {\n        handleKeyDown({ key: 'ArrowUp' });\n      }\n    }\n  };\n  \n  return (\n    <div \n      className=\"grid grid-cols-4 gap-3 bg-[#bbada0] p-3 rounded-md\"\n      style={{ touchAction: 'none' }}\n      onTouchStart={handleTouchStart}\n      onTouchEnd={handleTouchEnd}\n    >\n      {board.flat().map((value, index) => (\n        <div key={index} className=\"bg-[#cdc1b4] w-16 h-16 sm:w-20 sm:h-20 rounded-md\">\n          <Tile value={value} animation={tileAnimation} />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction ScoreBoard({ score, highScore }) {\n  return (\n    <div className=\"flex justify-between mb-4\">\n      <div className=\"bg-[#bbada0] rounded-md p-2 text-white text-center w-24\">\n        <div className=\"text-sm\">SCORE</div>\n        <div className=\"font-bold text-xl\">{score}</div>\n      </div>\n      <div className=\"bg-[#bbada0] rounded-md p-2 text-white text-center w-24\">\n        <div className=\"text-sm\">BEST</div>\n        <div className=\"font-bold text-xl\">{highScore}</div>\n      </div>\n    </div>\n  );\n}\n\nfunction GameOverModal({ gameState, highestTile, onRestart }) {\n  if (gameState === 'playing') return null;\n  \n  return (\n    <div className=\"absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center\">\n      <div className=\"bg-white p-6 rounded-lg text-center\">\n        <h2 className=\"text-2xl font-bold mb-4\">\n          {gameState === 'won' ? 'You Won! üéâ' : 'Game Over! üò¢'}\n        </h2>\n        <p className=\"mb-4\">\n          {gameState === 'won' \n            ? `Congratulations! You reached the 2048 tile!` \n            : `Your highest tile was ${highestTile}.`}\n        </p>\n        <button \n          onClick={onRestart}\n          className=\"bg-[#8f7a66] text-white px-4 py-2 rounded-md font-bold\"\n        >\n          Play Again\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction Game2048() {\n  const [board, setBoard] = useReactiveCell(['board']);\n  const [score, setScore] = useReactiveCell(['score']);\n  const [highScore, setHighScore] = useReactiveCell(['highScore']);\n  const [gameState, setGameState] = useReactiveCell(['gameState']);\n  const [highestTile, setHighestTile] = useReactiveCell(['highestTile']);\n  \n  const handleKeyDown = React.useCallback((e) => {\n    if (gameState !== 'playing') return;\n    \n    let result;\n    \n    switch (e.key) {\n      case 'ArrowUp':\n        result = moveUp(board);\n        break;\n      case 'ArrowDown':\n        result = moveDown(board);\n        break;\n      case 'ArrowLeft':\n        result = moveLeft(board);\n        break;\n      case 'ArrowRight':\n        result = moveRight(board);\n        break;\n      default:\n        return;\n    }\n    \n    if (result.moved) {\n      const newBoard = addRandomTile(result.board);\n      const newScore = score + result.score;\n      const newHighestTile = getHighestTile(newBoard);\n      \n      setBoard(newBoard);\n      setScore(newScore);\n      setHighestTile(Math.max(highestTile, newHighestTile));\n      \n      if (newHighestTile >= 2048 && gameState !== 'won') {\n        setGameState('won');\n      } else if (!hasAvailableMoves(newBoard)) {\n        setGameState('lost');\n      }\n      \n      if (newScore > highScore) {\n        setHighScore(newScore);\n      }\n    }\n  }, [board, score, highScore, gameState, highestTile]);\n  \n  const restartGame = () => {\n    const newBoard = initializeBoard();\n    setBoard(newBoard);\n    setScore(0);\n    setGameState('playing');\n    setHighestTile(getHighestTile(newBoard));\n  };\n  \n  // Initialize game if board is empty\n  React.useEffect(() => {\n    if (board.flat().every(cell => cell === 0)) {\n      restartGame();\n    }\n  }, [board]);\n  \n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-[#faf8ef] p-4 relative\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h1 className=\"text-4xl font-bold text-[#776e65]\">2048</h1>\n          <button \n            onClick={restartGame}\n            className=\"bg-[#8f7a66] text-white px-4 py-2 rounded-md font-bold\"\n          >\n            New Game üîÑ\n          </button>\n        </div>\n        \n        <p className=\"text-[#776e65] mb-4\">\n          Join the tiles, get to <strong>2048!</strong> Use arrow keys or swipe to move.\n        </p>\n        \n        <ScoreBoard score={score} highScore={highScore} />\n        \n        <div className=\"relative\">\n          <GameBoard board={board} handleKeyDown={handleKeyDown} />\n          <GameOverModal \n            gameState={gameState} \n            highestTile={highestTile} \n            onRestart={restartGame} \n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction onReady(mount, sourceData, libs) {\n  const root = ReactDOM.createRoot(mount);\n  root.render(<Game2048 />);\n}\n```"
    }
  ],
  "stop": "\n```",
  "maxTokens": 64000
}