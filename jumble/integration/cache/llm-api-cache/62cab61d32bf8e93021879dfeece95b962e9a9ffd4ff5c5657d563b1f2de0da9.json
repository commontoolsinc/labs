{
  "model": "anthropic:claude-3-7-sonnet-latest",
  "system": "\nYou are creating a simple MVP based on the user's goal, using an existing data schema. Focus on the simplest implementation that works with the provided schema.\n\nGiven a user's feature request and an existing data schema, you will:\n1. Create a short title (2-5 words) that names the artifact\n2. Create a one-sentence description in the format \"A <artifact> to <goal>\"\n3. Create a concise specification (3-5 sentences max) that works with the existing schema\n4. Generate a brief implementation plan (3 steps max)\n5. Design a minimal JSON schema that represents the core data model\n\nYour response must be structured as follows:\n\n<title>\n[Short title for the artifact, 2-5 words]\n</title>\n\n<description>\n[One-sentence description in the format \"A <artifact> to <goal>\"]\n</description>\n\n<spec>\n[Concise specification that captures only the essential requirements]\n</spec>\n\n<plan>\n[Brief 3-step implementation plan using the existing schema]\n</plan>\n\n<result_schema>\n[Minimal JSON Schema in valid JSON format that represents data created by the artifact]\n</result_schema>\n\nSCHEMA GUIDELINES:\n1. Keep it minimal:\n   - Include only essential fields (5-7 properties max)\n   - Focus on the core functionality\n   - If user requested complex features, simplify for this first version\n\n2. Each property should have:\n   - A descriptive \"title\" field\n   - A brief \"description\" field\n   - A sensible default value where appropriate\n\n3. Example of a simple schema:\n```json\n{\n  \"type\": \"object\",\n  \"title\": \"Note\",\n  \"description\": \"A simple note for the user\",\n  \"properties\": {\n    \"title\": {\n      \"type\": \"string\",\n      \"title\": \"Title\",\n      \"description\": \"Title of the note\",\n      \"default\": \"New Note\"\n    },\n    \"content\": {\n      \"type\": \"string\",\n      \"title\": \"Content\",\n      \"description\": \"Content of the note\"\n    },\n    \"created\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\",\n      \"title\": \"Created Date\",\n      \"description\": \"When the note was created\",\n    }\n  },\n  \"required\": [\"title\", \"content\"]\n}\n\nGUIDELINES:\n- Aim for the simplest possible solution that works with the existing schema\n- The specification should take into account the existing schema structure\n- Focus on what can be achieved quickly with the existing data model\n- Avoid suggesting modifications to the schema if possible\n\nIMPORTANT:\n- Focus on the simplest working version\n- Aim for fewer fields rather than more\n- But still capture all the important state the user is creating\n- The user can always iterate and improve the solution later\n",
  "stream": false,
  "messages": [
    {
      "role": "user",
      "content": "\n\n<goal>count the values in current</goal>\n<plan><step>Analyze the user's request to understand what \"count the values in current\" means in this context</step>\n<step>Design a simple charm that counts values in an array or object</step>\n<step>Define the input/output data model for the charm</step>\n<step>Plan the implementation logic to handle different data types (arrays, objects, etc.)</step>\n<step>Consider edge cases like empty inputs, non-countable inputs, etc.</step></plan>\n<description>This charm counts the number of values in the provided input data. It's designed to be flexible, accepting various data types and returning a count of their elements or properties. For arrays, it counts the number of elements; for objects, it counts the number of properties; for strings, it counts the number of characters; and for other primitive values, it returns 1. The charm provides a simple utility function that helps users quickly determine the size or length of their data without having to write custom counting logic for different data types.</description>\n<data>\"Input: Any → can be array, object, string, or primitive value\\nProcess: Count elements/properties/characters based on input type\\nOutput: Number → the count of values\\n\\nArray[T] → count number of elements → Number\\nObject → count number of properties → Number\\nString → count number of characters → Number\\nPrimitive (number, boolean, etc.) → return 1 → Number\\nnull/undefined → return 0 → Number\\n\\nThe charm processes the input data by first determining its type, then applying the appropriate counting logic based on that type.\"</data>\n\n\nExisting Schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"values\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n}\n```\n\nBased on this goal and the existing schema, please provide a title, description, any additional schema,detailed specification, and implementation plan.\n"
    },
    {
      "role": "assistant",
      "content": "<title>\nValue Counter Charm\n</title>\n\n<description>\nA charm to count the number of values in the current data structure.\n</description>\n\n<spec>\nThis charm counts elements in the provided data based on its type. It will count the number of elements in the \"values\" array from the existing schema. The charm returns a simple count result with the total number of values and supports empty arrays by returning zero.\n</spec>\n\n<plan>\n1. Extract the \"values\" array from the input data\n2. Count the number of elements in the array\n3. Return a result object with the count value\n</plan>\n\n<result_schema>\n{\n  \"type\": \"object\",\n  \"title\": \"Count Result\",\n  \"description\": \"Result of counting values in the data structure\",\n  \"properties\": {\n    \"count\": {\n      \"type\": \"integer\",\n      \"title\": \"Count\",\n      \"description\": \"The number of values counted\",\n      \"default\": 0\n    },\n    \"source\": {\n      \"type\": \"string\",\n      \"title\": \"Source\",\n      \"description\": \"The source of the counted values\",\n      \"default\": \"values\"\n    },\n    \"isEmpty\": {\n      \"type\": \"boolean\",\n      \"title\": \"Is Empty\",\n      \"description\": \"Whether the source contains no values\",\n      \"default\": false\n    },\n    \"timestamp\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\",\n      \"title\": \"Timestamp\",\n      \"description\": \"When the counting was performed\"\n    }\n  },\n  \"required\": [\"count\", \"source\", \"isEmpty\", \"timestamp\"]\n}\n</result_schema>"
    }
  ]
}