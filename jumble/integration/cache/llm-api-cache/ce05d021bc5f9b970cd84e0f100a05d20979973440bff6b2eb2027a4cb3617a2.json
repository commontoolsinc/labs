{
  "model": "anthropic:claude-3-7-sonnet-latest",
  "system": "# React Component Builder\n\nCreate an interactive React component that fulfills the user's request. Focus on delivering a clean, useful implementation with appropriate features.\n\n## You Are Part of a Two-Phase Process\n\n1. First phase (already completed):\n   - Analyzed the user's request\n   - Created a detailed specification\n   - Generated a structured data schema\n\n2. Your job (second phase):\n   - Create a reactive UI component based on the provided specification and schema\n   - Implement the UI exactly according to the specification\n   - Strictly adhere to the data schema provided\n\n## Required Elements\n- Define a title with `const title = 'Your App Name';`\n- Implement both `onLoad` and `onReady` functions\n- Use Tailwind CSS for styling with tasteful defaults\n- Do not write <svg> inline, use emoji for icons\n- Carefully avoid infinite loops and recursion that may cause performance issues\n\n## Code Structure\n1. React and ReactDOM are pre-imported - don't import them again\n2. All React hooks must be namespaced (e.g., `React.useState`, `React.useEffect`)\n3. Follow React hooks rules - never nest or conditionally call hooks\n4. For form handling, use `onClick` handlers instead of `onSubmit`\n\n## Available APIs\n- **useDoc(key, defaultValue)** - Persistent data storage with reactive updates\n- **llm(promptPayload)** - Send requests to the language model\n- **readWebpage(url)** - Fetch and parse external web content\n- **generateImage(prompt)** - Create AI-generated images\n\n## Important Note About useDoc\n- **useDoc is a React Hook** and must follow all React hook rules\n- It should only be used for persistent state and must draw from the provided schema\n  - For any ephemeral state, use `React.useState`\n- Only call useDoc at the top level of your function components or custom hooks\n- Do not call useDoc inside loops, conditions, or nested functions\n- useDoc cannot be used outside of `onReady` components - it must be called during rendering\n\n## Library Usage\n- Request additional libraries in `onLoad` by returning an array of module names\n- Available libraries:\n  - imports : [object Object]\n- Only use the explicitly provided libraries\n\n## Security Restrictions\n- Do not use browser dialog functions (`prompt()`, `alert()`, `confirm()`)\n- Avoid any methods that could compromise security or user experience\n\n\n<view-model-schema>\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"values\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"count\": {\n      \"type\": \"integer\",\n      \"title\": \"Count\",\n      \"description\": \"Number of values in the input\",\n      \"default\": 0\n    },\n    \"type\": {\n      \"type\": \"string\",\n      \"title\": \"Type\",\n      \"description\": \"Type of the input data structure\",\n      \"enum\": [\n        \"array\",\n        \"object\",\n        \"string\",\n        \"number\",\n        \"boolean\",\n        \"null\",\n        \"undefined\"\n      ]\n    },\n    \"source\": {\n      \"type\": \"string\",\n      \"title\": \"Source\",\n      \"description\": \"Description of what was counted\"\n    },\n    \"details\": {\n      \"type\": \"object\",\n      \"title\": \"Details\",\n      \"description\": \"Additional information about the counting operation\"\n    }\n  },\n  \"title\": \"Value Counter Charm\",\n  \"description\": \"A charm to count the number of values in a data structure.\"\n}\n</view-model-schema>\n\n<guide>\n# SDK Usage Guide\n\n## 1. `useDoc` Hook\n\nThe `useDoc` hook binds to a reactive cell given key and returns a tuple `[doc, setDoc]`:\n\nAny keys from the view-model-schema are valid for useDoc, any other keys will fail. Provide a default as the second argument, **do not set an initial value explicitly**.\n\nFor this schema:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"counter\": {\n      \"type\": \"number\",\n    },\n    \"title\": {\n      \"type\": \"string\",\n      \"default\": \"My Counter App\"\n    }\n  }\n}\n```\n\n```jsx\nfunction CounterComponent() {\n  // Correct: useDoc called at top level of component\n  const [counter, setCounter] = useDoc(\"counter\", -1); // default\n\n  // Incorrect: would cause errors\n  // if(something) {\n  //   const [data, setData] = useDoc(\"data\", {}); // Never do this!\n  // }\n\n  const onIncrement = useCallback(() => {\n    // writing to the cell automatically triggers a re-render\n    setCounter(counter + 1);\n  }, [counter]);\n\n  return (\n    <button onClick={onIncrement}>\n      Increment\n    </button>\n  );\n}\n```\n\n## 2. llm Function\n\n```jsx\nasync function fetchLLMResponse() {\n  // place user-level requirements in system prompt\n  const promptPayload = {\n    system: 'Translate all the messages to emojis, reply in JSON.',\n    messages: ['Hi', 'How can I help you today?', 'tell me a joke']\n  };\n  const result = await llm(promptPayload)\n  console.log('LLM responded:', result);\n}\n```\n\n\n## 3. llm Function with JSON\n\nIf you need JSON to be returned from the LLM, you can enable the `mode: 'json'`\nin the `promptPayload`. However, if you do this, you'll need to make sure you\ndefine the schema you expect from the JSON response. Do this as plain english.\n\nFor example: \"Generate a traditional Vietnamese recipe in JSON format, with the\nfollowing properties: name (string), ingredients (array of strings),\ninstructions (array of strings)\"\n\nNOTE: You'll need to parse the result string into an object using `JSON.parse()`.\n\nANOTHER NOTE: Language model requests are globally cached based on your prompt.\nThis means that identical requests will return the same result. If your llm use\nrequires unique results on every request, make sure to introduce a cache-breaking\nstring such as a timestamp or incrementing number/id.\n\n```jsx\nconst promptPayload = {\n  system: 'Translate all the messages to emojis, reply in JSON with the following properties: an array of objects, each with original_text (string), emoji_translation (string)',\n  messages: ['Hi', 'How can I help you today?', 'tell me a joke'],\n  mode: 'json'\n};\nconst result = await llm(promptPayload);\nconsole.log('JSON response from llm:', JSON.parse(result));\n```\n\nThis `result` variable will be a stringified JSON object. Once you JSON.parse() it, you'll get the following object:\n\n[\n    {\n        \"original_text\": \"Hi\",\n        \"emoji_translation\": \"üëã\"\n    },\n    {\n        \"original_text\": \"How can I help you today?\",\n        \"emoji_translation\": \"ü§î‚ùìüôã‚Äç‚ôÇÔ∏èüìÖ\"\n    },\n    {\n        \"original_text\": \"tell me a joke\",\n        \"emoji_translation\": \"üó£Ô∏èüëâüòÇ\"\n    }\n]\n\nAnother example:\n\n```jsx\n// Every time we run this prompt, we want a unique result, so we'll use a cache-breaking string.\nconst cacheBreaker = Date.now();\n\nconst promptPayload = {\n  system: \"You are a professional chef specializing in Mexican cuisine. Generate a detailed, authentic Mexican recipe in JSON format with the following properties: title (string), ingredients (array of strings), instructions (array of strings), prepTime (integer in minutes), cookTime (integer in minutes)\",\n  messages :[\"give me something spicy!\" + \" \" + cacheBreaker],\n  mode: \"json\",\n};\nconst result = await llm(promptPayload);\nconsole.log('JSON response from llm:', JSON.parse(result));\n```\n\nThe `result` variable will be a stringified JSON object. Once you JSON.parse() it, you'll get the following object:\n\n{\n    \"title\": \"Camarones a la Diabla (Devil Shrimp)\",\n    \"ingredients\": [\n        \"1.5 lbs Large Shrimp, peeled and deveined\",\n        \"4 tbsp Olive Oil\",\n        \"1 medium White Onion, finely chopped\",\n        \"4 cloves Garlic, minced\",\n        \"2-3 Habanero Peppers, finely chopped (adjust to your spice preference, remove seeds for less heat)\",\n        \"1 (28 oz) can Crushed Tomatoes\",\n        \"1/2 cup Chicken Broth\",\n        \"2 tbsp Tomato Paste\",\n        \"1 tbsp Apple Cider Vinegar\",\n        \"1 tbsp Dried Oregano\",\n        \"1 tsp Cumin\",\n        \"1/2 tsp Smoked Paprika\",\n        \"1/4 tsp Ground Cloves\",\n        \"Salt and Black Pepper to taste\",\n        \"Fresh Cilantro, chopped, for garnish\",\n        \"Lime wedges, for serving\"\n    ],\n    \"instructions\": [\n        \"In a large bowl, toss the shrimp with salt and pepper.\",\n        \"Heat the olive oil in a large skillet or Dutch oven over medium-high heat.\",\n        \"Add the onion and cook until softened, about 5 minutes.\",\n        \"Add the garlic and habanero peppers and cook for 1 minute more, until fragrant.\",\n        \"Stir in the crushed tomatoes, chicken broth, tomato paste, apple cider vinegar, oregano, cumin, smoked paprika, and cloves.\",\n        \"Bring the sauce to a simmer and cook for 15 minutes, stirring occasionally, until slightly thickened.\",\n        \"Add the shrimp to the sauce and cook for 3-5 minutes, or until the shrimp are pink and cooked through.\",\n        \"Taste and adjust seasoning with salt and pepper as needed.\",\n        \"Garnish with fresh cilantro and serve immediately with lime wedges. Serve with rice or tortillas.\"\n    ],\n    \"prepTime\": 20,\n    \"cookTime\": 30\n}\n\n## 4. readWebpage Function\n\n```jsx\nasync function fetchFromUrl() {\n  const url = 'https://twopm.studio';\n  const result = await readWebpage(url);\n  console.log('Markdown:', result.content);\n}\n```\n\n## 5. generateImage Function\n\n```jsx\nfunction ImageComponent() {\n  return <img src={generateImage(\"A beautiful sunset over mountains\")} alt=\"Generated landscape\" />;\n}\n\n```\n## 6. Using the Interface Functions\n\n```javascript\n// Import from modern ESM libraries:\n//   - react\n//   - react-dom\n//   - react-dom/client\n//   - d3\n//   - moment\n//   - marked\n//   - @react-spring/web\n//   - @use-gesture/react\n//   - uuid\n//   - tone\nfunction onLoad() {\n  return ['@react-spring/web']; // Request the modules you need\n}\n\nconst title = 'My ESM App';\nfunction ImageComponent({ url }) {\n  return <img src={url} alt=\"Generated landscape\" />;\n}\n\nfunction MyComponent({ label, description }) {\n  return (\n    <div>\n      <h2>{label}</h2>\n      <p>{description}</p>\n      <ImageComponent url={generateImage(\"A beautiful sunset over mountains\")} />\n    </div>\n  );\n}\n\nfunction TodoItem({ todo, onToggle, onDelete }) {\n  return (\n    <div className=\"flex items-center p-2 border-b\">\n      <input\n        type=\"checkbox\"\n        checked={todo.completed}\n        onChange={onToggle}\n        className=\"mr-2\"\n      />\n      <span className={`flex-grow ${todo.completed ? 'line-through text-gray-500' : ''}`}>\n        {todo.text}\n      </span>\n      <button\n        onClick={onDelete}\n        className=\"px-2 py-1 bg-red-500 text-white rounded\"\n      >\n        Delete\n      </button>\n    </div>\n  );\n}\n\nfunction TodoList({ todo, setTodos}) {\n  const [newTodo, setNewTodo] = React.useState('');\n\n  const addTodo = () => {\n    if (newTodo.trim() === '') return;\n\n    const newTodoItem = {\n      id: Date.now(),\n      text: newTodo,\n      completed: false\n    };\n\n    setTodos([...todos, newTodoItem]);\n    setNewTodo('');\n  };\n\n  const toggleTodo = (id) => {\n    setTodos(todos.map(todo =>\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  };\n\n  const deleteTodo = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto mt-4 p-4 bg-white rounded shadow\">\n      <h2 className=\"text-xl font-bold mb-4\">Todo List</h2>\n\n      <div className=\"flex mb-4\">\n        <input\n          type=\"text\"\n          value={newTodo}\n          onChange={(e) => setNewTodo(e.target.value)}\n          placeholder=\"Add a new todo\"\n          className=\"flex-grow p-2 border rounded-l\"\n        />\n        <button\n          onClick={addTodo}\n          className=\"px-4 py-2 bg-blue-500 text-white rounded-r\"\n        >\n          Add\n        </button>\n      </div>\n\n      <div className=\"border rounded\">\n        {todos.length > 0 ? (\n          todos.map(todo => (\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              onToggle={() => toggleTodo(todo.id)}\n              onDelete={() => deleteTodo(todo.id)}\n            />\n          ))\n        ) : (\n          <p className=\"p-2 text-center text-gray-500\">No todos yet!</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Main application code with modules passed as third parameter\nfunction onReady(mount, sourceData, libs) {\n  const { useState, useEffect } = React; // React is available globally\n  const { useSpring, animated } = libs['@react-spring/web']; // Access imported module\n\n  function MyApp() {\n    const [count, setCount] = useDoc('count', 0);\n    const [todos, setTodos] = useDoc('todos', [\n      { id: 1, text: 'Learn React', completed: false },\n      { id: 2, text: 'Build a Todo App', completed: false }\n    ]);\n    const props = useSpring({\n      from: { opacity: 0 },\n      to: { opacity: 1 }\n    });\n\n    return (\n      <div className=\"p-4\">\n        <animated.div style={props}>\n          <button\n            className=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded\"\n            onClick={() => setCount(count + 1)}\n          >\n            Clicks: {count}\n          </button>\n        </animated.div>\n        <TodoList todos={todos} setTodos={setTodos} />\n      </div>\n    );\n  }\n\n  // Use the client API for React 18\n  const root = ReactDOM.createRoot(mount);\n  root.render(<MyApp />);\n}\n```\n</guide>\n",
  "messages": [
    {
      "role": "user",
      "content": "The user asked you to create the source code with the following specification:\n```\n<REQUEST>\n<goal>count the values in current</goal>\n<plan><step>Analyze the user's request to understand what \"count the values in current\" means</step>\n<step>Design a simple charm that can count values in a collection or object</step>\n<step>Define the input data structure to accept various types of collections</step>\n<step>Implement the counting logic to handle different data types (arrays, objects, strings)</step>\n<step>Format and return the count results in a clear, user-friendly way</step></plan>\n<description>This charm counts the values in a provided data structure. It's designed to be flexible, accepting various types of input data such as arrays, objects, strings, or numbers, and returns the count of elements or properties. For arrays, it counts the number of elements; for objects, it counts the number of properties; for strings, it counts the number of characters; and for numbers, it simply returns 1. The charm provides a simple way to get a quick count of items without having to write custom counting logic, making it useful for data analysis, validation, or informational purposes.</description>\n<data>\"count(input: any) -> { count: number, type: string }\\n- input: Can be an array, object, string, number, or boolean\\n- Returns an object containing the count and the type of the input\\n- For arrays: Returns the number of elements\\n- For objects: Returns the number of properties\\n- For strings: Returns the number of characters\\n- For numbers and booleans: Returns 1\\n- For null or undefined: Returns 0\"</data>\n</REQUEST>\n<PLAN>1. Accept input data and determine its type\n2. Count elements based on the input type (array length, object properties, string characters, etc.)\n3. Return a result object with the count and type information</PLAN>\n<SPEC>This charm accepts any data structure and returns the count of its elements. It works with the existing schema by counting the number of items in the \"values\" array. The charm will determine the type of input (array, object, string, number, boolean) and return both the count and the type in the result.</SPEC>\n```\n\nby following the following steps:\n1. Analyze the user's request to understand what \"count the values in current\" means\n2. Design a simple charm that can count values in a collection or object\n3. Define the input data structure to accept various types of collections\n4. Implement the counting logic to handle different data types (arrays, objects, strings)\n5. Format and return the count results in a clear, user-friendly way"
    },
    {
      "role": "assistant",
      "content": "\nfunction onLoad() {\n  return [];\n}\n\nconst title = 'Value Counter Charm';\n\nfunction onReady(mount, sourceData) {\n  function ValueCounter() {\n    // State for the input data\n    const [inputValue, setInputValue] = React.useState('');\n    \n    // State for storing the parsed input\n    const [parsedInput, setParsedInput] = React.useState(null);\n    \n    // State for tracking parsing errors\n    const [parseError, setParseError] = React.useState(null);\n    \n    // Use the schema-defined persistent state\n    const [values, setValues] = useDoc('values', []);\n    const [count, setCount] = useDoc('count', 0);\n    const [type, setType] = useDoc('type', '');\n    const [source, setSource] = useDoc('source', '');\n    const [details, setDetails] = useDoc('details', {});\n\n    // Function to determine the type of input\n    const getType = (input) => {\n      if (Array.isArray(input)) return 'array';\n      if (input === null) return 'null';\n      if (input === undefined) return 'undefined';\n      return typeof input;\n    };\n\n    // Function to count values based on input type\n    const countValues = (input) => {\n      const inputType = getType(input);\n      let countResult = 0;\n      let detailsObj = {};\n      \n      switch (inputType) {\n        case 'array':\n          countResult = input.length;\n          detailsObj = { description: 'Number of elements in array' };\n          break;\n        case 'object':\n          countResult = Object.keys(input).length;\n          detailsObj = { description: 'Number of properties in object' };\n          break;\n        case 'string':\n          countResult = input.length;\n          detailsObj = { description: 'Number of characters in string' };\n          break;\n        case 'number':\n        case 'boolean':\n          countResult = 1;\n          detailsObj = { description: `Single ${inputType} value` };\n          break;\n        case 'null':\n        case 'undefined':\n          countResult = 0;\n          detailsObj = { description: `${inputType} has no values` };\n          break;\n        default:\n          countResult = 0;\n          detailsObj = { description: 'Unknown type' };\n      }\n      \n      return {\n        count: countResult,\n        type: inputType,\n        source: JSON.stringify(input).substring(0, 100) + (JSON.stringify(input).length > 100 ? '...' : ''),\n        details: detailsObj\n      };\n    };\n\n    // Handle input change\n    const handleInputChange = (e) => {\n      setInputValue(e.target.value);\n      setParseError(null);\n    };\n\n    // Parse the input as JSON\n    const parseInput = () => {\n      try {\n        // Handle empty input\n        if (!inputValue.trim()) {\n          setParsedInput('');\n          return;\n        }\n        \n        // Try to parse as JSON\n        const parsed = JSON.parse(inputValue);\n        setParsedInput(parsed);\n        setParseError(null);\n      } catch (error) {\n        // If not valid JSON, treat as a string\n        setParsedInput(inputValue);\n        setParseError(null);\n      }\n    };\n\n    // Count the values in the parsed input\n    const handleCount = () => {\n      if (parsedInput !== null) {\n        const result = countValues(parsedInput);\n        setCount(result.count);\n        setType(result.type);\n        setSource(result.source);\n        setDetails(result.details);\n        \n        // Update values array with the input if it's an array\n        if (Array.isArray(parsedInput)) {\n          setValues(parsedInput.map(item => String(item)));\n        } else if (typeof parsedInput === 'object' && parsedInput !== null) {\n          setValues(Object.keys(parsedInput));\n        } else if (typeof parsedInput === 'string') {\n          setValues(parsedInput.split(''));\n        } else {\n          setValues([String(parsedInput)]);\n        }\n      }\n    };\n\n    // Examples to help users\n    const examples = [\n      { label: 'Array', value: '[1, 2, 3, 4, 5]' },\n      { label: 'Object', value: '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}' },\n      { label: 'String', value: '\"Hello, world!\"' },\n      { label: 'Number', value: '42' },\n      { label: 'Boolean', value: 'true' },\n      { label: 'Null', value: 'null' }\n    ];\n\n    // Set an example\n    const setExample = (example) => {\n      setInputValue(example);\n    };\n\n    return (\n      <div className=\"max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-md\">\n        <h1 className=\"text-2xl font-bold text-center mb-6 text-indigo-700\">{title}</h1>\n        \n        <div className=\"mb-6\">\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\">\n            Enter a value to count (JSON, array, object, string, etc.):\n          </label>\n          <textarea\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            rows=\"5\"\n            value={inputValue}\n            onChange={handleInputChange}\n            placeholder='Enter data like [1,2,3] or {\"a\":1,\"b\":2} or \"hello\"'\n          />\n          \n          {parseError && (\n            <p className=\"text-red-500 text-sm mt-1\">{parseError}</p>\n          )}\n          \n          <div className=\"mt-4 flex flex-wrap gap-2\">\n            <button\n              onClick={parseInput}\n              className=\"px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            >\n              Parse Input\n            </button>\n            \n            <button\n              onClick={handleCount}\n              disabled={parsedInput === null}\n              className={`px-4 py-2 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 ${\n                parsedInput === null ? 'bg-gray-400 cursor-not-allowed' : 'bg-green-600 hover:bg-green-700'\n              }`}\n            >\n              Count Values\n            </button>\n          </div>\n          \n          <div className=\"mt-4\">\n            <p className=\"text-sm text-gray-600 mb-2\">Examples:</p>\n            <div className=\"flex flex-wrap gap-2\">\n              {examples.map((example, index) => (\n                <button\n                  key={index}\n                  onClick={() => setExample(example.value)}\n                  className=\"px-3 py-1 bg-gray-200 text-gray-800 rounded-md text-sm hover:bg-gray-300\"\n                >\n                  {example.label}\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n        \n        {count !== undefined && (\n          <div className=\"bg-gray-100 p-4 rounded-md\">\n            <h2 className=\"text-xl font-semibold mb-3 text-indigo-700\">Results</h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"bg-white p-3 rounded-md shadow-sm\">\n                <p className=\"font-medium text-gray-700\">Count: <span className=\"text-indigo-600 font-bold text-xl\">{count}</span></p>\n              </div>\n              \n              <div className=\"bg-white p-3 rounded-md shadow-sm\">\n                <p className=\"font-medium text-gray-700\">Type: <span className=\"text-indigo-600\">{type}</span></p>\n              </div>\n            </div>\n            \n            {source && (\n              <div className=\"mt-4 bg-white p-3 rounded-md shadow-sm\">\n                <p className=\"font-medium text-gray-700\">Source:</p>\n                <p className=\"text-sm text-gray-600 mt-1 break-words\">{source}</p>\n              </div>\n            )}\n            \n            {details && details.description && (\n              <div className=\"mt-4 bg-white p-3 rounded-md shadow-sm\">\n                <p className=\"font-medium text-gray-700\">Details:</p>\n                <p className=\"text-sm text-gray-600 mt-1\">{details.description}</p>\n              </div>\n            )}\n            \n            {Array.isArray(values) && values.length > 0 && (\n              <div className=\"mt-4 bg-white p-3 rounded-md shadow-sm\">\n                <p className=\"font-medium text-gray-700\">Values:</p>\n                <div className=\"mt-2 max-h-40 overflow-y-auto\">\n                  <ul className=\"list-disc list-inside\">\n                    {values.map((value, index) => (\n                      <li key={index} className=\"text-sm text-gray-600\">{value}</li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  // Render the component\n  const root = ReactDOM.createRoot(mount);\n  root.render(<ValueCounter />);\n}\n```"
    }
  ],
  "stop": "\n```",
  "stream": false
}