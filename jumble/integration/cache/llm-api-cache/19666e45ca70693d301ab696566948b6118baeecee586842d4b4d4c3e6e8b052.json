{
  "model": "anthropic:claude-3-7-sonnet-latest",
  "system": "# React Component Builder\n\nCreate an interactive React component that fulfills the user's request. Focus on delivering a clean, useful implementation with appropriate features.\n\n## You Are Part of a Two-Phase Process\n\n1. First phase (already completed):\n   - Analyzed the user's request\n   - Created a detailed specification\n   - Generated a structured data schema\n\n2. Your job (second phase):\n   - Create a reactive UI component based on the provided specification and schema\n   - Implement the UI exactly according to the specification\n   - Strictly adhere to the data schema provided\n\n## Required Elements\n- Define a title with `const title = 'Your App Name';`\n- Implement both `onLoad` and `onReady` functions\n- Use Tailwind CSS for styling with tasteful defaults\n- Do not write <svg> inline, use emoji for icons\n- Carefully avoid infinite loops and recursion that may cause performance issues\n\n## Code Structure\n1. React and ReactDOM are pre-imported - don't import them again\n2. All React hooks must be namespaced (e.g., `React.useState`, `React.useEffect`)\n3. Follow React hooks rules - never nest or conditionally call hooks\n4. For form handling, use `onClick` handlers instead of `onSubmit`\n\n## Available APIs\n- **useDoc(key, defaultValue)** - Persistent data storage with reactive updates\n- **llm(promptPayload)** - Send requests to the language model\n- **readWebpage(url)** - Fetch and parse external web content\n- **generateImage(prompt)** - Create AI-generated images\n\n## Important Note About useDoc\n- **useDoc is a React Hook** and must follow all React hook rules\n- It should only be used for persistent state and must draw from the provided schema\n  - For any ephemeral state, use `React.useState`\n- Only call useDoc at the top level of your function components or custom hooks\n- Do not call useDoc inside loops, conditions, or nested functions\n- useDoc cannot be used outside of `onReady` components - it must be called during rendering\n\n## Library Usage\n- Request additional libraries in `onLoad` by returning an array of module names\n- Available libraries:\n  - imports : [object Object]\n- Only use the explicitly provided libraries\n\n## Security Restrictions\n- Do not use browser dialog functions (`prompt()`, `alert()`, `confirm()`)\n- Avoid any methods that could compromise security or user experience\n\n\n<view-model-schema>\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"simplevalue2\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"values\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"count\": {\n      \"type\": \"number\",\n      \"title\": \"Count\",\n      \"description\": \"Number of elements counted\",\n      \"default\": 0\n    },\n    \"type\": {\n      \"type\": \"string\",\n      \"title\": \"Type\",\n      \"description\": \"Data type that was analyzed\",\n      \"default\": \"array\"\n    },\n    \"description\": {\n      \"type\": \"string\",\n      \"title\": \"Description\",\n      \"description\": \"Human-readable description of what was counted\",\n      \"default\": \"Number of string values in simpleValue2.values array\"\n    },\n    \"source\": {\n      \"type\": \"string\",\n      \"title\": \"Source\",\n      \"description\": \"The source of the counted data\",\n      \"default\": \"simpleValue2.values\"\n    },\n    \"timestamp\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\",\n      \"title\": \"Timestamp\",\n      \"description\": \"When the counting was performed\"\n    }\n  },\n  \"title\": \"Value Counter Utility\",\n  \"description\": \"A utility function to count elements in the simpleValue2 data structure.\"\n}\n</view-model-schema>\n\n<guide>\n# SDK Usage Guide\n\n## 1. `useDoc` Hook\n\nThe `useDoc` hook binds to a reactive cell given key and returns a tuple `[doc, setDoc]`:\n\nAny keys from the view-model-schema are valid for useDoc, any other keys will fail. Provide a default as the second argument, **do not set an initial value explicitly**.\n\nFor this schema:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"counter\": {\n      \"type\": \"number\",\n    },\n    \"title\": {\n      \"type\": \"string\",\n      \"default\": \"My Counter App\"\n    }\n  }\n}\n```\n\n```jsx\nfunction CounterComponent() {\n  // Correct: useDoc called at top level of component\n  const [counter, setCounter] = useDoc(\"counter\", -1); // default\n\n  // Incorrect: would cause errors\n  // if(something) {\n  //   const [data, setData] = useDoc(\"data\", {}); // Never do this!\n  // }\n\n  const onIncrement = useCallback(() => {\n    // writing to the cell automatically triggers a re-render\n    setCounter(counter + 1);\n  }, [counter]);\n\n  return (\n    <button onClick={onIncrement}>\n      Increment\n    </button>\n  );\n}\n```\n\n## 2. llm Function\n\n```jsx\nasync function fetchLLMResponse() {\n  // place user-level requirements in system prompt\n  const promptPayload = {\n    system: 'Translate all the messages to emojis, reply in JSON.',\n    messages: ['Hi', 'How can I help you today?', 'tell me a joke']\n  };\n  const result = await llm(promptPayload)\n  console.log('LLM responded:', result);\n}\n```\n\n\n## 3. llm Function with JSON\n\nIf you need JSON to be returned from the LLM, you can enable the `mode: 'json'`\nin the `promptPayload`. However, if you do this, you'll need to make sure you\ndefine the schema you expect from the JSON response. Do this as plain english.\n\nFor example: \"Generate a traditional Vietnamese recipe in JSON format, with the\nfollowing properties: name (string), ingredients (array of strings),\ninstructions (array of strings)\"\n\nNOTE: You'll need to parse the result string into an object using `JSON.parse()`.\n\nANOTHER NOTE: Language model requests are globally cached based on your prompt.\nThis means that identical requests will return the same result. If your llm use\nrequires unique results on every request, make sure to introduce a cache-breaking\nstring such as a timestamp or incrementing number/id.\n\n```jsx\nconst promptPayload = {\n  system: 'Translate all the messages to emojis, reply in JSON with the following properties: an array of objects, each with original_text (string), emoji_translation (string)',\n  messages: ['Hi', 'How can I help you today?', 'tell me a joke'],\n  mode: 'json'\n};\nconst result = await llm(promptPayload);\nconsole.log('JSON response from llm:', JSON.parse(result));\n```\n\nThis `result` variable will be a stringified JSON object. Once you JSON.parse() it, you'll get the following object:\n\n[\n    {\n        \"original_text\": \"Hi\",\n        \"emoji_translation\": \"üëã\"\n    },\n    {\n        \"original_text\": \"How can I help you today?\",\n        \"emoji_translation\": \"ü§î‚ùìüôã‚Äç‚ôÇÔ∏èüìÖ\"\n    },\n    {\n        \"original_text\": \"tell me a joke\",\n        \"emoji_translation\": \"üó£Ô∏èüëâüòÇ\"\n    }\n]\n\nAnother example:\n\n```jsx\n// Every time we run this prompt, we want a unique result, so we'll use a cache-breaking string.\nconst cacheBreaker = Date.now();\n\nconst promptPayload = {\n  system: \"You are a professional chef specializing in Mexican cuisine. Generate a detailed, authentic Mexican recipe in JSON format with the following properties: title (string), ingredients (array of strings), instructions (array of strings), prepTime (integer in minutes), cookTime (integer in minutes)\",\n  messages :[\"give me something spicy!\" + \" \" + cacheBreaker],\n  mode: \"json\",\n};\nconst result = await llm(promptPayload);\nconsole.log('JSON response from llm:', JSON.parse(result));\n```\n\nThe `result` variable will be a stringified JSON object. Once you JSON.parse() it, you'll get the following object:\n\n{\n    \"title\": \"Camarones a la Diabla (Devil Shrimp)\",\n    \"ingredients\": [\n        \"1.5 lbs Large Shrimp, peeled and deveined\",\n        \"4 tbsp Olive Oil\",\n        \"1 medium White Onion, finely chopped\",\n        \"4 cloves Garlic, minced\",\n        \"2-3 Habanero Peppers, finely chopped (adjust to your spice preference, remove seeds for less heat)\",\n        \"1 (28 oz) can Crushed Tomatoes\",\n        \"1/2 cup Chicken Broth\",\n        \"2 tbsp Tomato Paste\",\n        \"1 tbsp Apple Cider Vinegar\",\n        \"1 tbsp Dried Oregano\",\n        \"1 tsp Cumin\",\n        \"1/2 tsp Smoked Paprika\",\n        \"1/4 tsp Ground Cloves\",\n        \"Salt and Black Pepper to taste\",\n        \"Fresh Cilantro, chopped, for garnish\",\n        \"Lime wedges, for serving\"\n    ],\n    \"instructions\": [\n        \"In a large bowl, toss the shrimp with salt and pepper.\",\n        \"Heat the olive oil in a large skillet or Dutch oven over medium-high heat.\",\n        \"Add the onion and cook until softened, about 5 minutes.\",\n        \"Add the garlic and habanero peppers and cook for 1 minute more, until fragrant.\",\n        \"Stir in the crushed tomatoes, chicken broth, tomato paste, apple cider vinegar, oregano, cumin, smoked paprika, and cloves.\",\n        \"Bring the sauce to a simmer and cook for 15 minutes, stirring occasionally, until slightly thickened.\",\n        \"Add the shrimp to the sauce and cook for 3-5 minutes, or until the shrimp are pink and cooked through.\",\n        \"Taste and adjust seasoning with salt and pepper as needed.\",\n        \"Garnish with fresh cilantro and serve immediately with lime wedges. Serve with rice or tortillas.\"\n    ],\n    \"prepTime\": 20,\n    \"cookTime\": 30\n}\n\n## 4. readWebpage Function\n\n```jsx\nasync function fetchFromUrl() {\n  const url = 'https://twopm.studio';\n  const result = await readWebpage(url);\n  console.log('Markdown:', result.content);\n}\n```\n\n## 5. generateImage Function\n\n```jsx\nfunction ImageComponent() {\n  return <img src={generateImage(\"A beautiful sunset over mountains\")} alt=\"Generated landscape\" />;\n}\n\n```\n## 6. Using the Interface Functions\n\n```javascript\n// Import from modern ESM libraries:\n//   - react\n//   - react-dom\n//   - react-dom/client\n//   - d3\n//   - moment\n//   - marked\n//   - @react-spring/web\n//   - @use-gesture/react\n//   - uuid\n//   - tone\nfunction onLoad() {\n  return ['@react-spring/web']; // Request the modules you need\n}\n\nconst title = 'My ESM App';\nfunction ImageComponent({ url }) {\n  return <img src={url} alt=\"Generated landscape\" />;\n}\n\nfunction MyComponent({ label, description }) {\n  return (\n    <div>\n      <h2>{label}</h2>\n      <p>{description}</p>\n      <ImageComponent url={generateImage(\"A beautiful sunset over mountains\")} />\n    </div>\n  );\n}\n\nfunction TodoItem({ todo, onToggle, onDelete }) {\n  return (\n    <div className=\"flex items-center p-2 border-b\">\n      <input\n        type=\"checkbox\"\n        checked={todo.completed}\n        onChange={onToggle}\n        className=\"mr-2\"\n      />\n      <span className={`flex-grow ${todo.completed ? 'line-through text-gray-500' : ''}`}>\n        {todo.text}\n      </span>\n      <button\n        onClick={onDelete}\n        className=\"px-2 py-1 bg-red-500 text-white rounded\"\n      >\n        Delete\n      </button>\n    </div>\n  );\n}\n\nfunction TodoList({ todo, setTodos}) {\n  const [newTodo, setNewTodo] = React.useState('');\n\n  const addTodo = () => {\n    if (newTodo.trim() === '') return;\n\n    const newTodoItem = {\n      id: Date.now(),\n      text: newTodo,\n      completed: false\n    };\n\n    setTodos([...todos, newTodoItem]);\n    setNewTodo('');\n  };\n\n  const toggleTodo = (id) => {\n    setTodos(todos.map(todo =>\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  };\n\n  const deleteTodo = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto mt-4 p-4 bg-white rounded shadow\">\n      <h2 className=\"text-xl font-bold mb-4\">Todo List</h2>\n\n      <div className=\"flex mb-4\">\n        <input\n          type=\"text\"\n          value={newTodo}\n          onChange={(e) => setNewTodo(e.target.value)}\n          placeholder=\"Add a new todo\"\n          className=\"flex-grow p-2 border rounded-l\"\n        />\n        <button\n          onClick={addTodo}\n          className=\"px-4 py-2 bg-blue-500 text-white rounded-r\"\n        >\n          Add\n        </button>\n      </div>\n\n      <div className=\"border rounded\">\n        {todos.length > 0 ? (\n          todos.map(todo => (\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              onToggle={() => toggleTodo(todo.id)}\n              onDelete={() => deleteTodo(todo.id)}\n            />\n          ))\n        ) : (\n          <p className=\"p-2 text-center text-gray-500\">No todos yet!</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Main application code with modules passed as third parameter\nfunction onReady(mount, sourceData, libs) {\n  const { useState, useEffect } = React; // React is available globally\n  const { useSpring, animated } = libs['@react-spring/web']; // Access imported module\n\n  function MyApp() {\n    const [count, setCount] = useDoc('count', 0);\n    const [todos, setTodos] = useDoc('todos', [\n      { id: 1, text: 'Learn React', completed: false },\n      { id: 2, text: 'Build a Todo App', completed: false }\n    ]);\n    const props = useSpring({\n      from: { opacity: 0 },\n      to: { opacity: 1 }\n    });\n\n    return (\n      <div className=\"p-4\">\n        <animated.div style={props}>\n          <button\n            className=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded\"\n            onClick={() => setCount(count + 1)}\n          >\n            Clicks: {count}\n          </button>\n        </animated.div>\n        <TodoList todos={todos} setTodos={setTodos} />\n      </div>\n    );\n  }\n\n  // Use the client API for React 18\n  const root = ReactDOM.createRoot(mount);\n  root.render(<MyApp />);\n}\n```\n</guide>\n",
  "messages": [
    {
      "role": "user",
      "content": "The user asked you to create the source code with the following specification:\n```\n<REQUEST>\n<goal>count the values in `simpleValue2`</goal>\n<plan><step>Analyze the user's request to count values in `simpleValue2`</step>\n<step>Design a function that can count values in an array or object</step>\n<step>Create a utility that handles different data types (arrays, objects, strings)</step>\n<step>Implement error handling for invalid inputs</step>\n<step>Format the output to clearly display the count results</step></plan>\n<description>This charm counts the values in a variable named `simpleValue2`. It analyzes the provided data structure and returns a count of its elements. For arrays, it counts the number of items; for objects, it counts the number of properties; for strings, it counts the characters; and for other primitive values, it returns appropriate descriptive information. The charm handles various data types gracefully and provides clear, formatted output with the count results. This is a new utility charm that performs a simple but useful data analysis function.</description>\n<data>\"count(simpleValue2: any) -> CountResult\\n- If simpleValue2 is an array: Returns the number of elements in the array\\n- If simpleValue2 is an object: Returns the number of properties in the object\\n- If simpleValue2 is a string: Returns the number of characters in the string\\n- If simpleValue2 is a number, boolean, null, or undefined: Returns a description of the value type\\n\\nThe CountResult will include:\\n- count: number (the count of elements/properties/characters)\\n- type: string (the data type of simpleValue2)\\n- description: string (human-readable description of what was counted)\"</data>\n</REQUEST>\n<PLAN>1. Access the simpleValue2 object from the existing schema\n2. Count the number of elements in the simpleValue2.values array\n3. Return a CountResult object with the count, type information, and description</PLAN>\n<SPEC>The Value Counter will analyze the simpleValue2 object and count the number of string values in its \"values\" array. It will return a result object containing the count, the data type that was analyzed, and a human-readable description of what was counted. The utility will handle the case where simpleValue2 or its values array might be empty or undefined.</SPEC>\n```\n\nby following the following steps:\n1. Analyze the user's request to count values in `simpleValue2`\n2. Design a function that can count values in an array or object\n3. Create a utility that handles different data types (arrays, objects, strings)\n4. Implement error handling for invalid inputs\n5. Format the output to clearly display the count results"
    },
    {
      "role": "assistant",
      "content": "\nconst title = 'Value Counter Utility';\n\nfunction onLoad() {\n  return [];\n}\n\nfunction onReady(mount, sourceData) {\n  function ValueCounter() {\n    // Access the simpleValue2 data from the schema\n    const [simpleValue2, setSimpleValue2] = useDoc('simplevalue2', { values: [] });\n    const [count, setCount] = useDoc('count', 0);\n    const [type, setType] = useDoc('type', 'array');\n    const [description, setDescription] = useDoc('description', 'Number of string values in simpleValue2.values array');\n    const [source, setSource] = useDoc('source', 'simpleValue2.values');\n    const [timestamp, setTimestamp] = useDoc('timestamp', '');\n    \n    // Local state for input values\n    const [inputValue, setInputValue] = React.useState('');\n    \n    // Function to count values\n    const countValues = React.useCallback(() => {\n      try {\n        // Check if simpleValue2 exists and has a values array\n        if (simpleValue2 && Array.isArray(simpleValue2.values)) {\n          const valuesCount = simpleValue2.values.length;\n          setCount(valuesCount);\n          setType('array');\n          setDescription('Number of string values in simpleValue2.values array');\n          setSource('simpleValue2.values');\n          setTimestamp(new Date().toISOString());\n        } else {\n          setCount(0);\n          setType('unknown');\n          setDescription('No valid array found in simpleValue2.values');\n          setSource('simpleValue2.values');\n          setTimestamp(new Date().toISOString());\n        }\n      } catch (error) {\n        console.error('Error counting values:', error);\n        setCount(0);\n        setType('error');\n        setDescription(`Error: ${error.message}`);\n        setSource('simpleValue2.values');\n        setTimestamp(new Date().toISOString());\n      }\n    }, [simpleValue2, setCount, setType, setDescription, setSource, setTimestamp]);\n    \n    // Add a value to the array\n    const addValue = React.useCallback(() => {\n      if (inputValue.trim()) {\n        const updatedValues = [...(simpleValue2.values || []), inputValue.trim()];\n        setSimpleValue2({ ...simpleValue2, values: updatedValues });\n        setInputValue('');\n        // Update the count after adding\n        countValues();\n      }\n    }, [inputValue, simpleValue2, setSimpleValue2, countValues]);\n    \n    // Remove a value from the array\n    const removeValue = React.useCallback((index) => {\n      const updatedValues = [...simpleValue2.values];\n      updatedValues.splice(index, 1);\n      setSimpleValue2({ ...simpleValue2, values: updatedValues });\n      // Update the count after removing\n      countValues();\n    }, [simpleValue2, setSimpleValue2, countValues]);\n    \n    // Clear all values\n    const clearValues = React.useCallback(() => {\n      setSimpleValue2({ values: [] });\n      countValues();\n    }, [setSimpleValue2, countValues]);\n    \n    // Initialize the counter on first load\n    React.useEffect(() => {\n      countValues();\n    }, [countValues]);\n    \n    // Format the timestamp for display\n    const formattedTimestamp = timestamp \n      ? new Date(timestamp).toLocaleString() \n      : 'Not counted yet';\n    \n    return (\n      <div className=\"max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-md\">\n        <h1 className=\"text-2xl font-bold text-gray-800 mb-6\">{title}</h1>\n        \n        {/* Input section */}\n        <div className=\"mb-6 p-4 bg-gray-50 rounded-md\">\n          <h2 className=\"text-lg font-semibold mb-3\">Add Values to Count</h2>\n          <div className=\"flex gap-2 mb-4\">\n            <input\n              type=\"text\"\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              placeholder=\"Enter a value\"\n              className=\"flex-1 p-2 border border-gray-300 rounded\"\n            />\n            <button\n              onClick={addValue}\n              className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition\"\n            >\n              Add Value\n            </button>\n            <button\n              onClick={clearValues}\n              className=\"px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition\"\n            >\n              Clear All\n            </button>\n          </div>\n        </div>\n        \n        {/* Values display */}\n        <div className=\"mb-6 p-4 bg-gray-50 rounded-md\">\n          <h2 className=\"text-lg font-semibold mb-3\">Current Values</h2>\n          {simpleValue2.values && simpleValue2.values.length > 0 ? (\n            <ul className=\"list-disc pl-5\">\n              {simpleValue2.values.map((value, index) => (\n                <li key={index} className=\"mb-2 flex justify-between items-center\">\n                  <span className=\"mr-2\">{value}</span>\n                  <button\n                    onClick={() => removeValue(index)}\n                    className=\"text-red-500 hover:text-red-700\"\n                  >\n                    ‚ùå\n                  </button>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <p className=\"text-gray-500 italic\">No values added yet</p>\n          )}\n        </div>\n        \n        {/* Count results */}\n        <div className=\"p-4 bg-blue-50 rounded-md\">\n          <h2 className=\"text-lg font-semibold mb-3\">Count Results</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"p-3 bg-white rounded shadow-sm\">\n              <p className=\"text-sm text-gray-500\">Count</p>\n              <p className=\"text-2xl font-bold\">{count}</p>\n            </div>\n            <div className=\"p-3 bg-white rounded shadow-sm\">\n              <p className=\"text-sm text-gray-500\">Type</p>\n              <p className=\"text-lg\">{type}</p>\n            </div>\n            <div className=\"p-3 bg-white rounded shadow-sm\">\n              <p className=\"text-sm text-gray-500\">Source</p>\n              <p className=\"text-lg\">{source}</p>\n            </div>\n            <div className=\"p-3 bg-white rounded shadow-sm\">\n              <p className=\"text-sm text-gray-500\">Last Updated</p>\n              <p className=\"text-lg\">{formattedTimestamp}</p>\n            </div>\n          </div>\n          <div className=\"mt-4 p-3 bg-white rounded shadow-sm\">\n            <p className=\"text-sm text-gray-500\">Description</p>\n            <p className=\"text-lg\">{description}</p>\n          </div>\n        </div>\n        \n        {/* Manual count button */}\n        <div className=\"mt-6 text-center\">\n          <button\n            onClick={countValues}\n            className=\"px-6 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition\"\n          >\n            Refresh Count\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  const root = ReactDOM.createRoot(mount);\n  root.render(<ValueCounter />);\n}\n```"
    }
  ],
  "stop": "\n```",
  "maxTokens": 64000
}