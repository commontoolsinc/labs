{
  "model": "anthropic:claude-3-7-sonnet-latest",
  "system": "# React Component Builder\n\nCreate an interactive React component that fulfills the user's request. Focus on delivering a clean, useful implementation with appropriate features.\n\n## You Are Part of a Two-Phase Process\n\n1. First phase (already completed):\n   - Analyzed the user's request\n   - Created a detailed specification\n   - Generated a structured data schema\n\n2. Your job (second phase):\n   - Create a reactive UI component based on the provided specification and schema\n   - Implement the UI exactly according to the specification\n   - Strictly adhere to the data schema provided\n\n## Required Elements\n- Define a title with `const title = 'Your App Name';`\n- Implement both `onLoad` and `onReady` functions\n- Use Tailwind CSS for styling with tasteful defaults\n\n## Code Structure\n1. React and ReactDOM are pre-imported - don't import them again\n2. All React hooks must be namespaced (e.g., `React.useState`, `React.useEffect`)\n3. Follow React hooks rules - never nest or conditionally call hooks\n4. Define components within the `onReady` function\n5. For form handling, use `onClick` handlers instead of `onSubmit`\n\n## Available APIs\n- **useDoc(key, defaultValue)** - Persistent data storage with real-time updates (follows React hook rules)\n- **llm(promptPayload)** - Send requests to the language model\n- **readWebpage(url)** - Fetch and parse external web content\n- **generateImage(prompt)** - Create AI-generated images\n\n## Important Note About useDoc\n- **useDoc is a React Hook** and must follow all React hook rules\n- Only call useDoc at the top level of your function components or custom hooks\n- Do not call useDoc inside loops, conditions, or nested functions\n- useDoc cannot be used outside of React components - it must be called during rendering\n\n## Library Usage\n- Request additional libraries in `onLoad` by returning an array of module names\n- Available libraries:\n  - imports : [object Object]\n- Only use the explicitly provided libraries\n\n## Security Restrictions\n- Do not use browser dialog functions (`prompt()`, `alert()`, `confirm()`)\n- Avoid any methods that could compromise security or user experience\n\n<view-model-schema>\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"this\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\"\n        },\n        \"properties\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"values\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"type\": {\n                  \"type\": \"string\"\n                },\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"type\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            },\n            \"updater\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"asStream\": {\n                  \"type\": \"boolean\"\n                },\n                \"type\": {\n                  \"type\": \"string\"\n                },\n                \"properties\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"newValues\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"type\": {\n                          \"type\": \"string\"\n                        },\n                        \"items\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"type\": {\n                              \"type\": \"string\"\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                },\n                \"title\": {\n                  \"type\": \"string\"\n                },\n                \"description\": {\n                  \"type\": \"string\"\n                },\n                \"example\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"newValues\": {\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {}\n                      }\n                    }\n                  }\n                },\n                \"default\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"newValues\": {\n                      \"type\": \"array\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"title\": \"Value Counter\",\n  \"description\": \"A utility to count the number of values in a collection.\"\n}\n</view-model-schema>\n\n<guide>\n# SDK Usage Guide\n\n## 1. `useDoc` Hook\n\nThe `useDoc` hook subscribes to real-time updates for a given key and returns a tuple `[doc, setDoc]`:\n\nAny keys from the view-model-schema are valid for useDoc, any other keys will fail. Provide a default as the second argument, **do not set an initial value explicitly**.\n\n**Important**: useDoc is a React Hook and must follow React Hook Rules:\n- Only call useDoc at the top level of your function components or custom hooks\n- Do not call useDoc inside loops, conditions, or nested functions\n- It cannot be used outside React components\n\nFor this schema:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"counter\": {\n      \"type\": \"number\",\n    },\n    \"title\": {\n      \"type\": \"string\",\n      \"default\": \"My Counter App\"\n    }\n  }\n}\n```\n\n```jsx\nfunction CounterComponent() {\n  // Correct: useDoc called at top level of component\n  const [counter, setCounter] = useDoc(\"counter\", -1); // default\n  const [title, setTitle] = useDoc(\"title\", \"My Counter App\"); // default\n\n  // Incorrect: would cause errors\n  // if(something) {\n  //   const [data, setData] = useDoc(\"data\", {}); // Never do this!\n  // }\n\n  return (\n    <div>\n      <h2>{title}</h2>\n      <button onClick={() => setTitle(Math.random().toString(36).substring(2, 15))}>\n        Randomize Title\n      </button>\n      <button onClick={() => setCounter(counter + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n}\n```\n\n## 2. llm Function\n\n```jsx\nasync function fetchLLMResponse() {\n  const promptPayload = { messages: ['Hi', 'How can I help you today?', 'tell me a joke']};\n  try {\n    const result = await llm(promptPayload);\n    console.log('LLM responded:', result);\n  } catch (error) {\n    console.error('LLM error:', error);\n  }\n}\n```\n\n## 3. readWebpage Function\n\n```jsx\nasync function fetchFromUrl() {\n  const url = 'https://twopm.studio';\n  try {\n    const result = await readWebpage(url);\n    console.log('Markdown:', result.content);\n  } catch (error) {\n    console.error('readWebpage error:', error);\n  }\n}\n```\n\n## 4. generateImage Function\n\n```jsx\nfunction ImageComponent() {\n  return <img src={generateImage(\"A beautiful sunset over mountains\")} alt=\"Generated landscape\" />;\n}\n```\n## 5. Using the Interface Functions\n\n```javascript\n// Import from modern ESM libraries:\n//   - react\n//   - react-dom\n//   - react-dom/client\n//   - d3\n//   - moment\n//   - marked\n//   - @react-spring/web\n//   - @use-gesture/react\n//   - uuid\n//   - tone\nfunction onLoad() {\n  return ['@react-spring/web']; // Request the modules you need\n}\n\nconst title = 'My ESM App';\n\n// Main application code with modules passed as third parameter\nfunction onReady(mount, sourceData, libs) {\n  const { useState, useEffect } = React; // React is available globally\n  const { useSpring, animated } = libs['@react-spring/web']; // Access imported module\n\n  function MyApp() {\n    const [count, setCount] = useDoc('count', 0);\n    const props = useSpring({\n      from: { opacity: 0 },\n      to: { opacity: 1 }\n    });\n\n    return (\n      <div className=\"p-4\">\n        <animated.div style={props}>\n          <h1 className=\"text-2xl font-bold\">Hello ESM World!</h1>\n          <button\n            className=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded\"\n            onClick={() => setCount(count + 1)}\n          >\n            Clicks: {count}\n          </button>\n        </animated.div>\n      </div>\n    );\n  }\n\n  // Use the client API for React 18\n  const root = ReactDOM.createRoot(mount);\n  root.render(<MyApp />);\n}\n```\n</guide>\n",
  "messages": [
    {
      "role": "user",
      "content": "The user asked you to create the source code with the following specification:\n```\n<GOAL>count of values</GOAL>\n<PLAN>1. Add a \"count\" property to the schema to store the current number of values\n2. Implement a function to calculate the count from the existing values array\n3. Update the count whenever the updater's newValues property changes</PLAN>\n<SPEC>The Value Counter will track and display the total count of values in the collection. It will work with the existing schema structure that contains a \"values\" property. The counter will update automatically when values are added or removed through the updater mechanism.</SPEC>\n```"
    },
    {
      "role": "assistant",
      "content": "\nconst title = 'Value Counter';\n\nfunction onLoad() {\n  return []; // No additional libraries needed\n}\n\nfunction onReady(mount, sourceData) {\n  const { useState, useEffect } = React;\n\n  function ValueCounter() {\n    // Use the values array from the schema\n    const [values, setValues] = useDoc('this.properties.values.items', []);\n    // Track the count of values\n    const [count, setCount] = useState(0);\n    // Access the updater for new values\n    const [updater, setUpdater] = useDoc('this.properties.updater', {\n      newValues: []\n    });\n\n    // Calculate the count whenever values change\n    useEffect(() => {\n      if (values && Array.isArray(values)) {\n        setCount(values.length);\n      }\n    }, [values]);\n\n    // Update values when new values are added through the updater\n    useEffect(() => {\n      if (updater && updater.newValues && Array.isArray(updater.newValues)) {\n        setValues(updater.newValues);\n      }\n    }, [updater, setValues]);\n\n    // Function to add a new value\n    const addValue = () => {\n      const newValue = { id: Date.now() };\n      const updatedValues = [...(values || []), newValue];\n      setUpdater({\n        ...updater,\n        newValues: updatedValues\n      });\n    };\n\n    // Function to remove a value\n    const removeValue = (id) => {\n      const updatedValues = (values || []).filter(value => value.id !== id);\n      setUpdater({\n        ...updater,\n        newValues: updatedValues\n      });\n    };\n\n    return (\n      <div className=\"p-6 max-w-md mx-auto bg-white rounded-xl shadow-md\">\n        <h1 className=\"text-2xl font-bold text-gray-800 mb-4\">{title}</h1>\n        \n        <div className=\"bg-blue-100 p-4 rounded-lg mb-4\">\n          <div className=\"text-lg font-semibold\">Total Count</div>\n          <div className=\"text-3xl font-bold text-blue-600\">{count}</div>\n        </div>\n        \n        <div className=\"mb-4\">\n          <button \n            onClick={addValue}\n            className=\"bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded\"\n          >\n            Add Value\n          </button>\n        </div>\n        \n        <div className=\"border rounded-lg overflow-hidden\">\n          <div className=\"bg-gray-100 px-4 py-2 border-b\">\n            <h2 className=\"font-semibold\">Values List</h2>\n          </div>\n          <ul className=\"divide-y divide-gray-200\">\n            {values && values.length > 0 ? (\n              values.map((value, index) => (\n                <li key={value.id || index} className=\"px-4 py-3 flex justify-between items-center\">\n                  <span>Value #{index + 1}</span>\n                  <button \n                    onClick={() => removeValue(value.id)}\n                    className=\"text-red-500 hover:text-red-700\"\n                  >\n                    Remove\n                  </button>\n                </li>\n              ))\n            ) : (\n              <li className=\"px-4 py-3 text-gray-500 italic\">No values added yet</li>\n            )}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  // Render the component\n  const root = ReactDOM.createRoot(mount);\n  root.render(<ValueCounter />);\n}\n```"
    },
    {
      "role": "assistant",
      "content": "\nconst title = 'Value Counter';\n\nfunction onLoad() {\n  return []; // No additional libraries needed\n}\n\nfunction onReady(mount, sourceData) {\n  const { useState, useEffect } = React;\n\n  function ValueCounter() {\n    // Use the values array from the schema\n    const [values, setValues] = useDoc('this.properties.values.items', []);\n    // Track the count of values\n    const [count, setCount] = useState(0);\n    // Access the updater for new values\n    const [updater, setUpdater] = useDoc('this.properties.updater', {\n      newValues: []\n    });\n\n    // Calculate the count whenever values change\n    useEffect(() => {\n      if (values && Array.isArray(values)) {\n        setCount(values.length);\n      }\n    }, [values]);\n\n    // Update values when new values are added through the updater\n    useEffect(() => {\n      if (updater && updater.newValues && Array.isArray(updater.newValues)) {\n        setValues(updater.newValues);\n      }\n    }, [updater, setValues]);\n\n    // Function to add a new value\n    const addValue = () => {\n      const newValue = { id: Date.now() };\n      const updatedValues = [...(values || []), newValue];\n      setUpdater({\n        ...updater,\n        newValues: updatedValues\n      });\n    };\n\n    // Function to remove a value\n    const removeValue = (id) => {\n      const updatedValues = (values || []).filter(value => value.id !== id);\n      setUpdater({\n        ...updater,\n        newValues: updatedValues\n      });\n    };\n\n    return (\n      <div className=\"p-6 max-w-md mx-auto bg-white rounded-xl shadow-md\">\n        <h1 className=\"text-2xl font-bold text-gray-800 mb-4\">{title}</h1>\n        \n        <div className=\"bg-blue-100 p-4 rounded-lg mb-4\">\n          <div className=\"text-lg font-semibold\">Total Count</div>\n          <div className=\"text-3xl font-bold text-blue-600\">{count}</div>\n        </div>\n        \n        <div className=\"mb-4\">\n          <button \n            onClick={addValue}\n            className=\"bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded\"\n          >\n            Add Value\n          </button>\n        </div>\n        \n        <div className=\"border rounded-lg overflow-hidden\">\n          <div className=\"bg-gray-100 px-4 py-2 border-b\">\n            <h2 className=\"font-semibold\">Values List</h2>\n          </div>\n          <ul className=\"divide-y divide-gray-200\">\n            {values && values.length > 0 ? (\n              values.map((value, index) => (\n                <li key={value.id || index} className=\"px-4 py-3 flex justify-between items-center\">\n                  <span>Value #{index + 1}</span>\n                  <button \n                    onClick={() => removeValue(value.id)}\n                    className=\"text-red-500 hover:text-red-700\"\n                  >\n                    Remove\n                  </button>\n                </li>\n              ))\n            ) : (\n              <li className=\"px-4 py-3 text-gray-500 italic\">No values added yet</li>\n            )}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  // Render the component\n  const root = ReactDOM.createRoot(mount);\n  root.render(<ValueCounter />);\n}\n```"
    }
  ],
  "stop": "\n```",
  "stream": false
}