{
  "model": "anthropic:claude-3-7-sonnet-latest",
  "system": "\nYou are creating a simple MVP based on the user's goal, using an existing data schema. Focus on the simplest implementation that works with the provided schema.\n\nGiven a user's feature request and an existing data schema, you will:\n1. Create a short title (2-5 words) that names the artifact\n2. Create a one-sentence description in the format \"A <artifact> to <goal>\"\n3. Create a concise specification (3-5 sentences max) that works with the existing schema\n4. Generate a brief implementation plan (3 steps max)\n5. Design a minimal JSON schema that represents the core data model\n\nYour response must be structured as follows:\n\n<title>\n[Short title for the artifact, 2-5 words]\n</title>\n\n<description>\n[One-sentence description in the format \"A <artifact> to <goal>\"]\n</description>\n\n<spec>\n[Concise specification that captures only the essential requirements]\n</spec>\n\n<plan>\n[Brief 3-step implementation plan using the existing schema]\n</plan>\n\n<result_schema>\n[Minimal JSON Schema in valid JSON format that represents data created by the artifact]\n</result_schema>\n\nSCHEMA GUIDELINES:\n1. Keep it minimal:\n   - Include only essential fields (5-7 properties max)\n   - Focus on the core functionality\n   - If user requested complex features, simplify for this first version\n\n2. Each property should have:\n   - A descriptive \"title\" field\n   - A brief \"description\" field\n   - A sensible default value where appropriate\n\n3. Example of a simple schema:\n```json\n{\n  \"type\": \"object\",\n  \"title\": \"Note\",\n  \"description\": \"A simple note for the user\",\n  \"properties\": {\n    \"title\": {\n      \"type\": \"string\",\n      \"title\": \"Title\",\n      \"description\": \"Title of the note\",\n      \"default\": \"New Note\"\n    },\n    \"content\": {\n      \"type\": \"string\",\n      \"title\": \"Content\",\n      \"description\": \"Content of the note\"\n    },\n    \"created\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\",\n      \"title\": \"Created Date\",\n      \"description\": \"When the note was created\",\n    }\n  },\n  \"required\": [\"title\", \"content\"]\n}\n\nGUIDELINES:\n- Aim for the simplest possible solution that works with the existing schema\n- The specification should take into account the existing schema structure\n- Focus on what can be achieved quickly with the existing data model\n- Avoid suggesting modifications to the schema if possible\n\nIMPORTANT:\n- Focus on the simplest working version\n- Aim for fewer fields rather than more\n- But still capture all the important state the user is creating\n- The user can always iterate and improve the solution later\n",
  "stream": false,
  "messages": [
    {
      "role": "user",
      "content": "\n\n<goal>count the values in `simpleValue2`</goal>\n<plan><step>Analyze the user's request to count values in `simpleValue2`</step>\n<step>Design a function that can count values in an array or object</step>\n<step>Create a utility that handles different data types (arrays, objects, strings)</step>\n<step>Implement error handling for invalid inputs</step>\n<step>Format the output to clearly display the count results</step></plan>\n<description>This charm counts the values in a variable named `simpleValue2`. It analyzes the provided data structure and returns a count of its elements. For arrays, it counts the number of items; for objects, it counts the number of properties; for strings, it counts the characters; and for other primitive values, it returns appropriate descriptive information. The charm handles various data types gracefully and provides clear, formatted output with the count results. This is a new utility charm that performs a simple but useful data analysis function.</description>\n<data>\"count(simpleValue2: any) -> CountResult\\n- If simpleValue2 is an array: Returns the number of elements in the array\\n- If simpleValue2 is an object: Returns the number of properties in the object\\n- If simpleValue2 is a string: Returns the number of characters in the string\\n- If simpleValue2 is a number, boolean, null, or undefined: Returns a description of the value type\\n\\nThe CountResult will include:\\n- count: number (the count of elements/properties/characters)\\n- type: string (the data type of simpleValue2)\\n- description: string (human-readable description of what was counted)\"</data>\n\n\nExisting Schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"simplevalue2\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"values\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nBased on this goal and the existing schema, please provide a title, description, any additional schema,detailed specification, and implementation plan.\n"
    },
    {
      "role": "assistant",
      "content": "<title>\nValue Counter Utility\n</title>\n\n<description>\nA utility function to count elements in the simpleValue2 data structure.\n</description>\n\n<spec>\nThe Value Counter will analyze the simpleValue2 object and count the number of string values in its \"values\" array. It will return a result object containing the count, the data type that was analyzed, and a human-readable description of what was counted. The utility will handle the case where simpleValue2 or its values array might be empty or undefined.\n</spec>\n\n<plan>\n1. Access the simpleValue2 object from the existing schema\n2. Count the number of elements in the simpleValue2.values array\n3. Return a CountResult object with the count, type information, and description\n</plan>\n\n<result_schema>\n{\n  \"type\": \"object\",\n  \"title\": \"CountResult\",\n  \"description\": \"Result of counting values in simpleValue2\",\n  \"properties\": {\n    \"count\": {\n      \"type\": \"number\",\n      \"title\": \"Count\",\n      \"description\": \"Number of elements counted\",\n      \"default\": 0\n    },\n    \"type\": {\n      \"type\": \"string\",\n      \"title\": \"Type\",\n      \"description\": \"Data type that was analyzed\",\n      \"default\": \"array\"\n    },\n    \"description\": {\n      \"type\": \"string\",\n      \"title\": \"Description\",\n      \"description\": \"Human-readable description of what was counted\",\n      \"default\": \"Number of string values in simpleValue2.values array\"\n    },\n    \"source\": {\n      \"type\": \"string\",\n      \"title\": \"Source\",\n      \"description\": \"The source of the counted data\",\n      \"default\": \"simpleValue2.values\"\n    },\n    \"timestamp\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\",\n      \"title\": \"Timestamp\",\n      \"description\": \"When the counting was performed\"\n    }\n  },\n  \"required\": [\"count\", \"type\", \"description\"]\n}\n</result_schema>"
    }
  ],
  "maxTokens": 64000
}