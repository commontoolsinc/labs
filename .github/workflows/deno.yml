name: Deno Workflow 

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  workspace-tests:
    name: "Workspace Tests"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: "2.2.2"
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.json') }}
      - name: Install dependencies 
        # Errors if `deno.lock` file was not
        # committed with the current change.
        run: deno install --frozen=true
      - name: Check 
        run: deno task check
      - name: Lint 
        run: deno lint
      # For deno-web-test browser tests
      # https://github.com/lino-levan/astral/blob/f5ef833b2c5bde3783564a6b925073d5d46bb4b8/README.md#no-usable-sandbox-with-user-namespace-cloning-enabled
      - name: Disable AppArmor
        run: echo 0 | sudo tee /proc/sys/kernel/apparmor_restrict_unprivileged_userns
      - name: Run tests
        run: deno task test-all

  build-artifact:
    name: "Build Artifact"
    runs-on: ubuntu-latest
    needs: ['workspace-tests']
    steps:
      - uses: actions/checkout@v4
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: "2.2.2"
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.json') }}
      - name: Build artifact 
        # Errors if `deno.lock` file was not
        # committed with the current change.
        run: deno task build-artifact
      - uses: actions/upload-artifact@v4
        with:
          name: common-artifact
          path: ./artifact
  
  integration-test:
    name: "Integration Tests"
    runs-on: ubuntu-latest
    needs: ['build-artifact']
    environment: production
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: "2.2.2"
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.json') }}
      - uses: actions/download-artifact@v4
      - name: Run Compiled Toolshed
        run: |
          chmod +x ./common-artifact/artifact
          CACHE_DIR=${GITHUB_WORKSPACE}/jumble/integration/cache \
          ./common-artifact/artifact &
      # For Astral
      # https://github.com/lino-levan/astral/blob/f5ef833b2c5bde3783564a6b925073d5d46bb4b8/README.md#no-usable-sandbox-with-user-namespace-cloning-enabled
      - name: Disable AppArmor
        run: echo 0 | sudo tee /proc/sys/kernel/apparmor_restrict_unprivileged_userns
      - name: Run Integration
        working-directory: jumble
        run: |
          CTTS_AI_LLM_ANTHROPIC_API_KEY=fake \
          TOOLSHED_API_URL=http://localhost:8000/ \
          FRONTEND_URL=http://localhost:8000/ \
          deno task integration
