name: Deno Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Define the list of binaries we're building
# This makes it easy to add more binaries in the future
env:
  BINARIES: "toolshed bg-charm-service"

jobs:
  workspace-tests:
    name: "Workspace Tests"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: "2.2.2"
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.json') }}
      - name: Install dependencies
        # Errors if `deno.lock` file was not
        # committed with the current change.
        run: deno install --frozen=true
      - name: Check
        run: deno task check
      - name: Lint
        run: deno lint
      # For deno-web-test browser tests
      # https://github.com/lino-levan/astral/blob/f5ef833b2c5bde3783564a6b925073d5d46bb4b8/README.md#no-usable-sandbox-with-user-namespace-cloning-enabled
      - name: Disable AppArmor
        run: echo 0 | sudo tee /proc/sys/kernel/apparmor_restrict_unprivileged_userns
      - name: Run tests
        run: deno task test-all

  build-binaries:
    name: "Build Binaries"
    runs-on: ubuntu-24.04-32-core
    needs: ["workspace-tests"]
    environment: production
    permissions:
      id-token: write
      contents: read
      actions: read
      attestations: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: "2.2.2"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.json') }}

      - name: Build binaries
        run: deno task build-binaries

      # When on main branch, sign binaries, create attestations, and upload to GCS
      - name: Process binaries for main branch
        if: github.ref == 'refs/heads/main'
        run: |
          mkdir -p release
          mkdir -p signed

          # Process toolshed binary
          echo "Processing binary: toolshed"
          sha256sum ./dist/toolshed > ./dist/toolshed.hash.txt
          TOOLSHED_HASH=$(cat ./dist/toolshed.hash.txt | awk '{print $1}')
          echo "toolshed hash: $TOOLSHED_HASH"
          echo "toolshed_hash=$TOOLSHED_HASH" >> $GITHUB_OUTPUT

          # Sign the toolshed binary
          openssl dgst -sha256 -sign <(echo "${{ secrets.ARTIFACT_SIGNING_KEY }}") -out ./dist/toolshed.sig ./dist/toolshed

          # Copy to signed directory
          cp ./dist/toolshed ./signed/
          cp ./dist/toolshed.sig ./signed/

          # Process bg-charm-service binary
          echo "Processing binary: bg-charm-service"
          sha256sum ./dist/bg-charm-service > ./dist/bg-charm-service.hash.txt
          BG_CHARM_SERVICE_HASH=$(cat ./dist/bg-charm-service.hash.txt | awk '{print $1}')
          echo "bg-charm-service hash: $BG_CHARM_SERVICE_HASH"
          echo "bg_charm_service_hash=$BG_CHARM_SERVICE_HASH" >> $GITHUB_OUTPUT

          # Sign the bg-charm-service binary
          openssl dgst -sha256 -sign <(echo "${{ secrets.ARTIFACT_SIGNING_KEY }}") -out ./dist/bg-charm-service.sig ./dist/bg-charm-service

          # Copy to signed directory
          cp ./dist/bg-charm-service ./signed/
          cp ./dist/bg-charm-service.sig ./signed/

          # Create a single tarball with all binaries and signatures
          tar -czf release/labs-${{ github.sha }}.tar.gz -C signed .

          # Generate hash for the tarball
          sha256sum release/labs-${{ github.sha }}.tar.gz > release/labs-${{ github.sha }}.hash.txt
          TARBALL_HASH=$(cat release/labs-${{ github.sha }}.hash.txt | awk '{print $1}')
          echo "Tarball hash: $TARBALL_HASH"
          echo "tarball_hash=$TARBALL_HASH" >> $GITHUB_OUTPUT
        id: binary_processing

      # Generate attestations for each binary
      - name: Generate attestations for toolshed binary
        if: github.ref == 'refs/heads/main'
        id: attest_toolshed
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ./dist/toolshed
          subject-digest: sha256:${{ steps.binary_processing.outputs.toolshed_hash }}

      - name: Generate attestations for bg-charm-service binary
        if: github.ref == 'refs/heads/main'
        id: attest_bg_charm_service
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ./dist/bg-charm-service
          subject-digest: sha256:${{ steps.binary_processing.outputs.bg_charm_service_hash }}

      # Generate attestation for the tarball
      - name: Generate tarball attestation
        if: github.ref == 'refs/heads/main'
        id: attest_tarball
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: https://storage.cloud.google.com/commontools-build-artifacts/workspace-artifacts/labs-${{ github.sha }}.tar.gz
          subject-digest: sha256:${{ steps.binary_processing.outputs.tarball_hash }}

      # Upload all attestations
      - name: Upload attestations
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: binary_attestations
          if-no-files-found: error
          path: |
            ${{ steps.attest_toolshed.outputs.bundle-path }}
            ${{ steps.attest_bg_charm_service.outputs.bundle-path }}
            ${{ steps.attest_tarball.outputs.bundle-path }}

      # Verify attestations
      - name: Verify attestations
        if: github.ref == 'refs/heads/main'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Verify tarball attestation
          echo "::group::Tarball attestation details"
          gh attestation verify release/labs-${{ github.sha }}.tar.gz -R ${{ github.repository }} --format json | jq
          echo "::endgroup::"
          if [ $? -eq 0 ]; then
            echo -e "\033[32mâœ“ Tarball attestation verified successfully\033[0m"
          else
            echo -e "\033[31mâœ— Tarball attestation verification failed\033[0m"
            exit 1
          fi

          # Verify toolshed binary attestation
          echo "::group::toolshed attestation details"
          gh attestation verify ./dist/toolshed -R ${{ github.repository }} --format json | jq
          echo "::endgroup::"
          if [ $? -eq 0 ]; then
            echo -e "\033[32mâœ“ toolshed attestation verified successfully\033[0m"
          else
            echo -e "\033[31mâœ— toolshed attestation verification failed\033[0m"
            exit 1
          fi

          # Verify bg-charm-service binary attestation
          echo "::group::bg-charm-service attestation details"
          gh attestation verify ./dist/bg-charm-service -R ${{ github.repository }} --format json | jq
          echo "::endgroup::"
          if [ $? -eq 0 ]; then
            echo -e "\033[32mâœ“ bg-charm-service attestation verified successfully\033[0m"
          else
            echo -e "\033[31mâœ— bg-charm-service attestation verification failed\033[0m"
            exit 1
          fi

      # Upload to GCS
      - name: Authenticate to Google Cloud for main
        if: github.ref == 'refs/heads/main'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK for main
        if: github.ref == 'refs/heads/main'
        uses: google-github-actions/setup-gcloud@v1

      - name: Upload to GCS for main
        if: github.ref == 'refs/heads/main'
        run: |
          gsutil cp release/labs-${{ github.sha }}.tar.gz gs://commontools-build-artifacts/workspace-artifacts/
          gsutil cp release/labs-${{ github.sha }}.hash.txt gs://commontools-build-artifacts/workspace-artifacts/

          # Print clickable links to the uploaded files
          echo "::group::ðŸ“¦ Artifact Links"
          echo "Tarball URL: https://storage.cloud.google.com/commontools-build-artifacts/workspace-artifacts/labs-${{ github.sha }}.tar.gz"
          echo "Hash URL: https://storage.cloud.google.com/commontools-build-artifacts/workspace-artifacts/labs-${{ github.sha }}.hash.txt"
          echo "::endgroup::"

      # Upload binaries as artifacts for the integration tests
      - uses: actions/upload-artifact@v4
        with:
          name: common-binaries
          path: |
            ./dist/toolshed
            ./dist/bg-charm-service

  integration-test:
    name: "Integration Tests"
    runs-on: ubuntu-latest
    needs: ["build-binaries"]
    environment: production
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: "2.2.2"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.json') }}

      - uses: actions/download-artifact@v4

      - name: Run Compiled Toolshed
        run: |
          chmod +x ./common-binaries/toolshed
          CTTS_AI_LLM_ANTHROPIC_API_KEY=fake \
          CACHE_DIR=${GITHUB_WORKSPACE}/jumble/integration/cache \
          ./common-binaries/toolshed &

      # For Astral
      # https://github.com/lino-levan/astral/blob/f5ef833b2c5bde3783564a6b925073d5d46bb4b8/README.md#no-usable-sandbox-with-user-namespace-cloning-enabled
      - name: Disable AppArmor
        run: echo 0 | sudo tee /proc/sys/kernel/apparmor_restrict_unprivileged_userns

      - name: Run Integration
        working-directory: jumble
        run: |
          TOOLSHED_API_URL=http://localhost:8000/ \
          FRONTEND_URL=http://localhost:8000/ \
          deno task integration
